{"ast":null,"code":"/**\r\n * DevExtreme (events/pointer/mspointer.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar BaseStrategy = require(\"./base\");\n\nvar Observer = require(\"./observer\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar eventMap = {\n  dxpointerdown: \"pointerdown\",\n  dxpointermove: \"pointermove\",\n  dxpointerup: \"pointerup\",\n  dxpointercancel: \"pointercancel\",\n  dxpointerover: \"pointerover\",\n  dxpointerout: \"pointerout\",\n  dxpointerenter: \"pointerenter\",\n  dxpointerleave: \"pointerleave\"\n};\nvar observer;\nvar activated = false;\n\nvar activateStrategy = function () {\n  if (activated) {\n    return;\n  }\n\n  observer = new Observer(eventMap, function (a, b) {\n    return a.pointerId === b.pointerId;\n  }, function (e) {\n    if (e.isPrimary) {\n      observer.reset();\n    }\n  });\n  activated = true;\n};\n\nvar MsPointerStrategy = BaseStrategy.inherit({\n  ctor: function () {\n    this.callBase.apply(this, arguments);\n    activateStrategy();\n  },\n  _fireEvent: function (args) {\n    return this.callBase(extend({\n      pointers: observer.pointers(),\n      pointerId: args.originalEvent.pointerId\n    }, args));\n  }\n});\nMsPointerStrategy.map = eventMap;\n\nMsPointerStrategy.resetObserver = function () {\n  observer.reset();\n};\n\nmodule.exports = MsPointerStrategy;","map":null,"metadata":{},"sourceType":"script"}