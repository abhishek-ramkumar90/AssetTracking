{"ast":null,"code":"/**\r\n * DevExtreme (viz/series/bubble_series.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar lineSeries = require(\"./line_series\").chart.line;\n\nvar scatterSeries = require(\"./scatter_series\").chart;\n\nvar areaSeries = require(\"./area_series\").chart.area;\n\nvar barSeries = require(\"./bar_series\");\n\nvar chartBarSeries = barSeries.chart.bar;\nvar polarBarSeries = barSeries.polar.bar;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar _extend = extend;\nvar _each = each;\n\nvar _noop = require(\"../../core/utils/common\").noop;\n\nexports.chart = {};\nexports.chart.bubble = _extend({}, scatterSeries, {\n  _calculateErrorBars: _noop,\n  _getMainColor: chartBarSeries._getMainColor,\n  _createPointStyles: chartBarSeries._createPointStyles,\n  _updatePointsVisibility: chartBarSeries._updatePointsVisibility,\n  _getOptionsForPoint: chartBarSeries._getOptionsForPoint,\n  _applyMarkerClipRect: lineSeries._applyElementsClipRect,\n  _parsePointStyle: polarBarSeries._parsePointStyle,\n  _createLegendState: areaSeries._createLegendState,\n  _setMarkerGroupSettings: polarBarSeries._setMarkerGroupSettings,\n  areErrorBarsVisible: _noop,\n  _createErrorBarGroup: _noop,\n  _checkData: function (data, skippedFields) {\n    return scatterSeries._checkData.call(this, data, skippedFields, {\n      value: this.getValueFields()[0],\n      size: this.getSizeField()\n    });\n  },\n  _getPointDataSelector: function (data, options) {\n    var sizeField = this.getSizeField();\n\n    var baseGetter = scatterSeries._getPointDataSelector.call(this);\n\n    return function (data) {\n      var pointData = baseGetter(data);\n      pointData.size = data[sizeField];\n      return pointData;\n    };\n  },\n  _aggregators: {\n    avg: function (_ref, series) {\n      var _ref2;\n\n      var data = _ref.data,\n          intervalStart = _ref.intervalStart;\n\n      if (!data.length) {\n        return;\n      }\n\n      var valueField = series.getValueFields()[0];\n      var sizeField = series.getSizeField();\n      var aggregate = data.reduce(function (result, item) {\n        result[0] += item[valueField];\n        result[1] += item[sizeField];\n        result[2]++;\n        return result;\n      }, [0, 0, 0]);\n      return _ref2 = {}, _defineProperty(_ref2, valueField, aggregate[0] / aggregate[2]), _defineProperty(_ref2, sizeField, aggregate[1] / aggregate[2]), _defineProperty(_ref2, series.getArgumentField(), intervalStart), _ref2;\n    }\n  },\n  getValueFields: function () {\n    return [this._options.valueField || \"val\"];\n  },\n  getSizeField: function () {\n    return this._options.sizeField || \"size\";\n  },\n  _animate: function () {\n    var that = this;\n    var lastPointIndex = that._drawnPoints.length - 1;\n    var labelsGroup = that._labelsGroup;\n\n    var labelAnimFunc = function () {\n      labelsGroup && labelsGroup.animate({\n        opacity: 1\n      }, {\n        duration: that._defaultDuration\n      });\n    };\n\n    _each(that._drawnPoints || [], function (i, p) {\n      p.animate(i === lastPointIndex ? labelAnimFunc : void 0, {\n        r: p.bubbleSize,\n        translateX: p.x,\n        translateY: p.y\n      });\n    });\n  },\n  _patchMarginOptions: function (options) {\n    options.processBubbleSize = true;\n    return options;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}