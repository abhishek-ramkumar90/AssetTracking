{"ast":null,"code":"/**\r\n * DevExtreme (format_helper.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar typeUtils = require(\"./core/utils/type\");\n\nvar dateUtils = require(\"./core/utils/date\");\n\nvar numberLocalization = require(\"./localization/number\");\n\nvar dateLocalization = require(\"./localization/date\");\n\nvar dependencyInjector = require(\"./core/utils/dependency_injector\");\n\nrequire(\"./localization/currency\");\n\nmodule.exports = dependencyInjector({\n  format: function (value, _format) {\n    var formatIsValid = typeUtils.isString(_format) && \"\" !== _format || typeUtils.isPlainObject(_format) || typeUtils.isFunction(_format);\n    var valueIsValid = typeUtils.isNumeric(value) || typeUtils.isDate(value);\n\n    if (!formatIsValid || !valueIsValid) {\n      return typeUtils.isDefined(value) ? value.toString() : \"\";\n    }\n\n    if (typeUtils.isFunction(_format)) {\n      return _format(value);\n    }\n\n    if (typeUtils.isString(_format)) {\n      _format = {\n        type: _format\n      };\n    }\n\n    if (typeUtils.isNumeric(value)) {\n      return numberLocalization.format(value, _format);\n    }\n\n    if (typeUtils.isDate(value)) {\n      return dateLocalization.format(value, _format);\n    }\n  },\n  getTimeFormat: function (showSecond) {\n    return showSecond ? \"longtime\" : \"shorttime\";\n  },\n  _normalizeFormat: function (format) {\n    if (!Array.isArray(format)) {\n      return format;\n    }\n\n    if (1 === format.length) {\n      return format[0];\n    }\n\n    return function (date) {\n      return format.map(function (formatPart) {\n        return dateLocalization.format(date, formatPart);\n      }).join(\" \");\n    };\n  },\n  getDateFormatByDifferences: function (dateDifferences, intervalFormat) {\n    var resultFormat = [];\n    var needSpecialSecondFormatter = intervalFormat && dateDifferences.millisecond && !(dateDifferences.year || dateDifferences.month || dateDifferences.day);\n\n    if (needSpecialSecondFormatter) {\n      var secondFormatter = function (date) {\n        return date.getSeconds() + date.getMilliseconds() / 1e3 + \"s\";\n      };\n\n      resultFormat.push(secondFormatter);\n    } else {\n      if (dateDifferences.millisecond) {\n        resultFormat.push(\"millisecond\");\n      }\n    }\n\n    if (dateDifferences.hour || dateDifferences.minute || !needSpecialSecondFormatter && dateDifferences.second) {\n      resultFormat.unshift(this.getTimeFormat(dateDifferences.second));\n    }\n\n    if (dateDifferences.year && dateDifferences.month && dateDifferences.day) {\n      if (intervalFormat && \"month\" === intervalFormat) {\n        return \"monthandyear\";\n      } else {\n        resultFormat.unshift(\"shortdate\");\n        return this._normalizeFormat(resultFormat);\n      }\n    }\n\n    if (dateDifferences.year && dateDifferences.month) {\n      return \"monthandyear\";\n    }\n\n    if (dateDifferences.year && dateDifferences.quarter) {\n      return \"quarterandyear\";\n    }\n\n    if (dateDifferences.year) {\n      return \"year\";\n    }\n\n    if (dateDifferences.quarter) {\n      return \"quarter\";\n    }\n\n    if (dateDifferences.month && dateDifferences.day) {\n      if (intervalFormat) {\n        var monthDayFormatter = function (date) {\n          return dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()] + \" \" + dateLocalization.format(date, \"day\");\n        };\n\n        resultFormat.unshift(monthDayFormatter);\n      } else {\n        resultFormat.unshift(\"monthandday\");\n      }\n\n      return this._normalizeFormat(resultFormat);\n    }\n\n    if (dateDifferences.month) {\n      return \"month\";\n    }\n\n    if (dateDifferences.day) {\n      if (intervalFormat) {\n        resultFormat.unshift(\"day\");\n      } else {\n        var dayFormatter = function (date) {\n          return dateLocalization.format(date, \"dayofweek\") + \", \" + dateLocalization.format(date, \"day\");\n        };\n\n        resultFormat.unshift(dayFormatter);\n      }\n\n      return this._normalizeFormat(resultFormat);\n    }\n\n    return this._normalizeFormat(resultFormat);\n  },\n  getDateFormatByTicks: function (ticks) {\n    var resultFormat;\n    var maxDiff;\n    var currentDiff;\n    var i;\n\n    if (ticks.length > 1) {\n      maxDiff = dateUtils.getDatesDifferences(ticks[0], ticks[1]);\n\n      for (i = 1; i < ticks.length - 1; i++) {\n        currentDiff = dateUtils.getDatesDifferences(ticks[i], ticks[i + 1]);\n\n        if (maxDiff.count < currentDiff.count) {\n          maxDiff = currentDiff;\n        }\n      }\n    } else {\n      maxDiff = {\n        year: true,\n        month: true,\n        day: true,\n        hour: ticks[0].getHours() > 0,\n        minute: ticks[0].getMinutes() > 0,\n        second: ticks[0].getSeconds() > 0,\n        millisecond: ticks[0].getMilliseconds() > 0\n      };\n    }\n\n    resultFormat = this.getDateFormatByDifferences(maxDiff);\n    return resultFormat;\n  },\n  getDateFormatByTickInterval: function (startValue, endValue, tickInterval) {\n    var resultFormat;\n    var dateDifferences;\n    var dateUnitInterval;\n    var dateDifferencesConverter = {\n      week: \"day\"\n    };\n\n    var correctDateDifferences = function (dateDifferences, tickInterval, value) {\n      switch (tickInterval) {\n        case \"year\":\n        case \"quarter\":\n          dateDifferences.month = value;\n\n        case \"month\":\n          dateDifferences.day = value;\n\n        case \"week\":\n        case \"day\":\n          dateDifferences.hour = value;\n\n        case \"hour\":\n          dateDifferences.minute = value;\n\n        case \"minute\":\n          dateDifferences.second = value;\n\n        case \"second\":\n          dateDifferences.millisecond = value;\n      }\n    };\n\n    var correctDifferencesByMaxDate = function (differences, minDate, maxDate) {\n      if (!maxDate.getMilliseconds() && maxDate.getSeconds()) {\n        if (maxDate.getSeconds() - minDate.getSeconds() === 1) {\n          differences.millisecond = true;\n          differences.second = false;\n        }\n      } else {\n        if (!maxDate.getSeconds() && maxDate.getMinutes()) {\n          if (maxDate.getMinutes() - minDate.getMinutes() === 1) {\n            differences.second = true;\n            differences.minute = false;\n          }\n        } else {\n          if (!maxDate.getMinutes() && maxDate.getHours()) {\n            if (maxDate.getHours() - minDate.getHours() === 1) {\n              differences.minute = true;\n              differences.hour = false;\n            }\n          } else {\n            if (!maxDate.getHours() && maxDate.getDate() > 1) {\n              if (maxDate.getDate() - minDate.getDate() === 1) {\n                differences.hour = true;\n                differences.day = false;\n              }\n            } else {\n              if (1 === maxDate.getDate() && maxDate.getMonth()) {\n                if (maxDate.getMonth() - minDate.getMonth() === 1) {\n                  differences.day = true;\n                  differences.month = false;\n                }\n              } else {\n                if (!maxDate.getMonth() && maxDate.getFullYear()) {\n                  if (maxDate.getFullYear() - minDate.getFullYear() === 1) {\n                    differences.month = true;\n                    differences.year = false;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    tickInterval = typeUtils.isString(tickInterval) ? tickInterval.toLowerCase() : tickInterval;\n    dateDifferences = dateUtils.getDatesDifferences(startValue, endValue);\n\n    if (startValue !== endValue) {\n      correctDifferencesByMaxDate(dateDifferences, startValue > endValue ? endValue : startValue, startValue > endValue ? startValue : endValue);\n    }\n\n    dateUnitInterval = dateUtils.getDateUnitInterval(dateDifferences);\n    correctDateDifferences(dateDifferences, dateUnitInterval, true);\n    dateUnitInterval = dateUtils.getDateUnitInterval(tickInterval || \"second\");\n    correctDateDifferences(dateDifferences, dateUnitInterval, false);\n    dateDifferences[dateDifferencesConverter[dateUnitInterval] || dateUnitInterval] = true;\n    resultFormat = this.getDateFormatByDifferences(dateDifferences);\n    return resultFormat;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}