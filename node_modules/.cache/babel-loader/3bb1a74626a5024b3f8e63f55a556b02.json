{"ast":null,"code":"/**\r\n * DevExtreme (exporter/excel_format_converter.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _string = require(\"../core/utils/string\");\n\nvar _string2 = _interopRequireDefault(_string);\n\nvar _number = require(\"../localization/number\");\n\nvar _number2 = _interopRequireDefault(_number);\n\nvar _date = require(\"../localization/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _type = require(\"../core/utils/type\");\n\nvar _date3 = require(\"../localization/ldml/date.format\");\n\nvar _language_codes = require(\"../localization/language_codes\");\n\nrequire(\"../localization/currency\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ARABIC_ZERO_CODE = 1632;\nvar DEFINED_NUMBER_FORMTATS = {\n  thousands: \"#,##0{0},&quot;K&quot;\",\n  millions: \"#,##0{0},,&quot;M&quot;\",\n  billions: \"#,##0{0},,,&quot;B&quot;\",\n  trillions: \"#,##0{0},,,,&quot;T&quot;\",\n  percent: \"0{0}%\",\n  decimal: \"#{0}\",\n  fixedpoint: \"#,##0{0}\",\n  exponential: \"0{0}E+00\",\n  currency: \" \"\n};\nvar PERIOD_REGEXP = /a+/g;\nvar DAY_REGEXP = /E/g;\nvar DO_REGEXP = /dE+/g;\nvar STANDALONE_MONTH_REGEXP = /L/g;\nvar HOUR_REGEXP = /h/g;\nvar SLASH_REGEXP = /\\//g;\nvar SQUARE_OPEN_BRACKET_REGEXP = /\\[/g;\nvar SQUARE_CLOSE_BRACKET_REGEXP = /]/g;\nvar ANY_REGEXP = /./g;\nvar excelFormatConverter = module.exports = {\n  _applyPrecision: function (format, precision) {\n    var result;\n    var i;\n\n    if (precision > 0) {\n      result = \"decimal\" !== format ? \".\" : \"\";\n\n      for (i = 0; i < precision; i++) {\n        result += \"0\";\n      }\n\n      return result;\n    }\n\n    return \"\";\n  },\n  _hasArabicDigits: function (text) {\n    var code;\n\n    for (var i = 0; i < text.length; i++) {\n      code = text.charCodeAt(i);\n\n      if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _convertDateFormatToOpenXml: function (format) {\n    return format.replace(SLASH_REGEXP, \"\\\\/\").split(\"'\").map(function (datePart, index) {\n      if (index % 2 === 0) {\n        return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").replace(SQUARE_OPEN_BRACKET_REGEXP, \"\\\\[\").replace(SQUARE_CLOSE_BRACKET_REGEXP, \"\\\\]\");\n      }\n\n      if (datePart) {\n        return datePart.replace(ANY_REGEXP, \"\\\\$&\");\n      }\n\n      return \"'\";\n    }).join(\"\");\n  },\n  _convertDateFormat: function (format) {\n    var formattedValue = (_date2.default.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\n    var result = (0, _date3.getFormat)(function (value) {\n      return _date2.default.format(value, format);\n    });\n\n    if (result) {\n      result = this._convertDateFormatToOpenXml(result);\n      result = this._getLanguageInfo(formattedValue) + result;\n    }\n\n    return result;\n  },\n  _getLanguageInfo: function (defaultPattern) {\n    var languageID = (0, _language_codes.getLanguageId)();\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\n    var languageInfo = \"\";\n\n    if (this._hasArabicDigits(defaultPattern)) {\n      while (languageIDStr.length < 3) {\n        languageIDStr = \"0\" + languageIDStr;\n      }\n\n      languageInfo = \"[$-2010\" + languageIDStr + \"]\";\n    } else {\n      if (languageIDStr) {\n        languageInfo = \"[$-\" + languageIDStr + \"]\";\n      }\n    }\n\n    return languageInfo;\n  },\n  _convertNumberFormat: function (format, precision, currency) {\n    var result;\n    var excelFormat;\n\n    if (\"currency\" === format) {\n      excelFormat = _number2.default.getOpenXmlCurrencyFormat(currency);\n    } else {\n      excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()];\n    }\n\n    if (excelFormat) {\n      result = _string2.default.format(excelFormat, this._applyPrecision(format, precision));\n    }\n\n    return result;\n  },\n  convertFormat: function (format, precision, type, currency) {\n    if ((0, _type.isDefined)(format)) {\n      if (\"date\" === type) {\n        return excelFormatConverter._convertDateFormat(format);\n      } else {\n        if ((0, _type.isString)(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\n          return excelFormatConverter._convertNumberFormat(format, precision, currency);\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}