{"ast":null,"code":"/**\r\n * DevExtreme (core/dom_adapter.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _dependency_injector = require(\"./utils/dependency_injector\");\n\nvar _dependency_injector2 = _interopRequireDefault(_dependency_injector);\n\nvar _common = require(\"./utils/common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar DOCUMENT_NODE = 9;\nvar nativeDOMAdapterStrategy = {\n  querySelectorAll: function (element, selector) {\n    return element.querySelectorAll(selector);\n  },\n  elementMatches: function (element, selector) {\n    var _this = this;\n\n    var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || function (selector) {\n      var doc = element.document || element.ownerDocument;\n\n      if (!doc) {\n        return false;\n      }\n\n      var items = _this.querySelectorAll(doc, selector);\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i] === element) {\n          return true;\n        }\n      }\n    };\n\n    return matches.call(element, selector);\n  },\n  createElement: function (tagName, context) {\n    context = context || this._document;\n    return context.createElement(tagName);\n  },\n  createElementNS: function (ns, tagName, context) {\n    context = context || this._document;\n    return context.createElementNS(ns, tagName);\n  },\n  createTextNode: function (text, context) {\n    context = context || this._document;\n    return context.createTextNode(text);\n  },\n  isNode: function (element) {\n    return \"object\" === _typeof(element) && \"nodeType\" in element;\n  },\n  isElementNode: function (element) {\n    return element && element.nodeType === ELEMENT_NODE;\n  },\n  isTextNode: function (element) {\n    return element && element.nodeType === TEXT_NODE;\n  },\n  isDocument: function (element) {\n    return element && element.nodeType === DOCUMENT_NODE;\n  },\n  removeElement: function (element) {\n    var parentNode = element && element.parentNode;\n\n    if (parentNode) {\n      parentNode.removeChild(element);\n    }\n  },\n  insertElement: function (parentElement, newElement, nextSiblingElement) {\n    if (parentElement && newElement && parentElement !== newElement) {\n      if (nextSiblingElement) {\n        parentElement.insertBefore(newElement, nextSiblingElement);\n      } else {\n        parentElement.appendChild(newElement);\n      }\n    }\n  },\n  getAttribute: function (element, name) {\n    return element.getAttribute(name);\n  },\n  setAttribute: function (element, name, value) {\n    element.setAttribute(name, value);\n  },\n  removeAttribute: function (element, name) {\n    element.removeAttribute(name);\n  },\n  setProperty: function (element, name, value) {\n    element[name] = value;\n  },\n  setText: function (element, text) {\n    if (element) {\n      element.textContent = text;\n    }\n  },\n  setClass: function (element, className, isAdd) {\n    if (1 === element.nodeType && className) {\n      if (element.classList) {\n        if (isAdd) {\n          element.classList.add(className);\n        } else {\n          element.classList.remove(className);\n        }\n      } else {\n        var classNameSupported = \"string\" === typeof element.className;\n        var elementClass = classNameSupported ? element.className : this.getAttribute(element, \"class\") || \"\";\n        var classNames = elementClass.split(\" \");\n        var classIndex = classNames.indexOf(className);\n        var resultClassName;\n\n        if (isAdd && classIndex < 0) {\n          resultClassName = elementClass ? elementClass + \" \" + className : className;\n        }\n\n        if (!isAdd && classIndex >= 0) {\n          classNames.splice(classIndex, 1);\n          resultClassName = classNames.join(\" \");\n        }\n\n        if (void 0 !== resultClassName) {\n          if (classNameSupported) {\n            element.className = resultClassName;\n          } else {\n            this.setAttribute(element, \"class\", resultClassName);\n          }\n        }\n      }\n    }\n  },\n  setStyle: function (element, name, value) {\n    element.style[name] = value || \"\";\n  },\n  _document: \"undefined\" === typeof document ? void 0 : document,\n  getDocument: function () {\n    return this._document;\n  },\n  getActiveElement: function () {\n    return this._document.activeElement;\n  },\n  getBody: function () {\n    return this._document.body;\n  },\n  createDocumentFragment: function () {\n    return this._document.createDocumentFragment();\n  },\n  getDocumentElement: function () {\n    return this._document.documentElement;\n  },\n  getLocation: function () {\n    return this._document.location;\n  },\n  getSelection: function () {\n    return this._document.selection;\n  },\n  getReadyState: function () {\n    return this._document.readyState;\n  },\n  getHead: function () {\n    return this._document.head;\n  },\n  hasDocumentProperty: function (property) {\n    return property in this._document;\n  },\n  listen: function (element, event, callback, options) {\n    if (!element || !(\"addEventListener\" in element)) {\n      return _common.noop;\n    }\n\n    element.addEventListener(event, callback, options);\n    return function () {\n      element.removeEventListener(event, callback);\n    };\n  }\n};\nmodule.exports = (0, _dependency_injector2.default)(nativeDOMAdapterStrategy);","map":null,"metadata":{},"sourceType":"script"}