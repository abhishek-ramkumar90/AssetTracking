{"ast":null,"code":"/**\r\n * DevExtreme (viz/core/base_widget.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar windowUtils = require(\"../../core/utils/window\");\n\nvar domAdapter = require(\"../../core/dom_adapter\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar version = require(\"../../core/version\");\n\nvar _windowResizeCallbacks = require(\"../../core/utils/resize_callbacks\");\n\nvar _stringFormat = require(\"../../core/utils/string\").format;\n\nvar _isObject = require(\"../../core/utils/type\").isObject;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar themeManagerModule = require(\"../core/base_theme_manager\");\n\nvar _floor = Math.floor;\n\nvar DOMComponentWithTemplate = require(\"../../core/dom_component_with_template\");\n\nvar helpers = require(\"./helpers\");\n\nvar _parseScalar = require(\"./utils\").parseScalar;\n\nvar errors = require(\"./errors_warnings\");\n\nvar _log = errors.log;\n\nvar rendererModule = require(\"./renderers/renderer\");\n\nvar _Layout = require(\"./layout\");\n\nvar devices = require(\"../../core/devices\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar OPTION_RTL_ENABLED = \"rtlEnabled\";\nvar SIZED_ELEMENT_CLASS = \"dx-sized-element\";\nvar _option = DOMComponentWithTemplate.prototype.option;\n\nfunction getTrue() {\n  return true;\n}\n\nfunction getFalse() {\n  return false;\n}\n\nfunction areCanvasesDifferent(canvas1, canvas2) {\n  return !(canvas1.width === canvas2.width && canvas1.height === canvas2.height && canvas1.left === canvas2.left && canvas1.top === canvas2.top && canvas1.right === canvas2.right && canvas1.bottom === canvas2.bottom);\n}\n\nfunction createResizeHandler(callback) {\n  var timeout;\n\n  var handler = function () {\n    clearTimeout(timeout);\n    timeout = setTimeout(callback, 100);\n  };\n\n  handler.dispose = function () {\n    clearTimeout(timeout);\n    return this;\n  };\n\n  return handler;\n}\n\nfunction defaultOnIncidentOccurred(e) {\n  if (!e.component.hasEvent(\"incidentOccurred\")) {\n    _log.apply(null, [e.target.id].concat(e.target.args || []));\n  }\n}\n\nvar createIncidentOccurred = function (widgetName, eventTrigger) {\n  return function (id, args) {\n    eventTrigger(\"incidentOccurred\", {\n      target: {\n        id: id,\n        type: \"E\" === id[0] ? \"error\" : \"warning\",\n        args: args,\n        text: _stringFormat.apply(null, [errors.ERROR_MESSAGES[id]].concat(args || [])),\n        widget: widgetName,\n        version: version\n      }\n    });\n  };\n};\n\nfunction pickPositiveValue(values) {\n  return values.reduce(function (result, value) {\n    return value > 0 && !result ? value : result;\n  }, 0);\n}\n\nvar getEmptyComponent = function () {\n  var emptyComponentConfig = {\n    _initTemplates: function () {},\n    ctor: function (element, options) {\n      this.callBase(element, options);\n      var sizedElement = domAdapter.createElement(\"div\");\n      var width = options && typeUtils.isNumeric(options.width) ? options.width + \"px\" : \"100%\";\n      var height = options && typeUtils.isNumeric(options.height) ? options.height + \"px\" : this._getDefaultSize().height + \"px\";\n      domAdapter.setStyle(sizedElement, \"width\", width);\n      domAdapter.setStyle(sizedElement, \"height\", height);\n      domAdapter.setClass(sizedElement, SIZED_ELEMENT_CLASS);\n      domAdapter.insertElement(element, sizedElement);\n    }\n  };\n  var EmptyComponent = DOMComponentWithTemplate.inherit(emptyComponentConfig);\n  var originalInherit = EmptyComponent.inherit;\n\n  EmptyComponent.inherit = function (config) {\n    for (var field in config) {\n      if (typeUtils.isFunction(config[field]) && \"_\" !== field.substr(0, 1) || \"_dispose\" === field || \"_optionChanged\" === field) {\n        config[field] = noop;\n      }\n    }\n\n    return originalInherit.call(this, config);\n  };\n\n  return EmptyComponent;\n};\n\nvar isServerSide = !windowUtils.hasWindow();\n\nfunction sizeIsValid(value) {\n  return typeUtils.isDefined(value) && value > 0;\n}\n\nmodule.exports = isServerSide ? getEmptyComponent() : DOMComponentWithTemplate.inherit({\n  _eventsMap: {\n    onIncidentOccurred: {\n      name: \"incidentOccurred\"\n    },\n    onDrawn: {\n      name: \"drawn\"\n    }\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      onIncidentOccurred: defaultOnIncidentOccurred\n    });\n  },\n  _extractAnonymousTemplate: function () {},\n  _useLinks: true,\n  _init: function () {\n    var that = this;\n    var linkTarget;\n\n    that._$element.children(\".\" + SIZED_ELEMENT_CLASS).remove();\n\n    that.callBase.apply(that, arguments);\n    that._changesLocker = 0;\n    that._optionChangedLocker = 0;\n    that._changes = helpers.changes();\n\n    that._suspendChanges();\n\n    that._themeManager = that._createThemeManager();\n\n    that._themeManager.setCallback(function () {\n      that._requestChange(that._themeDependentChanges);\n    });\n\n    that._renderElementAttributes();\n\n    that._initRenderer();\n\n    linkTarget = that._useLinks && that._renderer.root;\n    linkTarget && linkTarget.enableLinks().virtualLink(\"core\").virtualLink(\"peripheral\");\n\n    that._renderVisibilityChange();\n\n    that._attachVisibilityChangeHandlers();\n\n    that._toggleParentsScrollSubscription(this._isVisible());\n\n    that._initEventTrigger();\n\n    that._incidentOccurred = createIncidentOccurred(that.NAME, that._eventTrigger);\n    that._layout = new _Layout();\n    linkTarget && linkTarget.linkAfter(\"core\");\n\n    that._initPlugins();\n\n    that._initCore();\n\n    linkTarget && linkTarget.linkAfter();\n\n    that._change(that._initialChanges);\n  },\n  _createThemeManager: function () {\n    return new themeManagerModule.BaseThemeManager(this._getThemeManagerOptions());\n  },\n  _getThemeManagerOptions: function () {\n    return {\n      themeSection: this._themeSection,\n      fontFields: this._fontFields\n    };\n  },\n  _initialChanges: [\"LAYOUT\", \"RESIZE_HANDLER\", \"THEME\", \"DISABLED\"],\n  _initPlugins: function () {\n    var that = this;\n    each(that._plugins, function (_, plugin) {\n      plugin.init.call(that);\n    });\n  },\n  _disposePlugins: function () {\n    var that = this;\n    each(that._plugins.slice().reverse(), function (_, plugin) {\n      plugin.dispose.call(that);\n    });\n  },\n  _change: function (codes) {\n    this._changes.add(codes);\n  },\n  _suspendChanges: function () {\n    ++this._changesLocker;\n  },\n  _resumeChanges: function () {\n    var that = this;\n\n    if (0 === --that._changesLocker && that._changes.count() > 0 && !that._applyingChanges) {\n      that._renderer.lock();\n\n      that._applyingChanges = true;\n\n      that._applyChanges();\n\n      that._changes.reset();\n\n      that._applyingChanges = false;\n\n      that._renderer.unlock();\n\n      if (that._optionsQueue) {\n        that._applyQueuedOptions();\n      }\n\n      that._optionChangedLocker++;\n\n      that._notify();\n\n      that._optionChangedLocker--;\n    }\n  },\n  _applyQueuedOptions: function () {\n    var that = this;\n    var queue = that._optionsQueue;\n    that._optionsQueue = null;\n    that.beginUpdate();\n    each(queue, function (_, action) {\n      action();\n    });\n    that.endUpdate();\n  },\n  _requestChange: function (codes) {\n    this._suspendChanges();\n\n    this._change(codes);\n\n    this._resumeChanges();\n  },\n  _applyChanges: function () {\n    var that = this;\n    var changes = that._changes;\n    var order = that._totalChangesOrder;\n    var i;\n    var ii = order.length;\n\n    for (i = 0; i < ii; ++i) {\n      if (changes.has(order[i])) {\n        that[\"_change_\" + order[i]]();\n      }\n    }\n  },\n  _optionChangesOrder: [\"EVENTS\", \"THEME\", \"RENDERER\", \"RESIZE_HANDLER\"],\n  _layoutChangesOrder: [\"ELEMENT_ATTR\", \"CONTAINER_SIZE\", \"LAYOUT\"],\n  _customChangesOrder: [\"DISABLED\"],\n  _change_EVENTS: function () {\n    this._eventTrigger.applyChanges();\n  },\n  _change_THEME: function () {\n    this._setThemeAndRtl();\n  },\n  _change_RENDERER: function () {\n    this._setRendererOptions();\n  },\n  _change_RESIZE_HANDLER: function () {\n    this._setupResizeHandler();\n  },\n  _change_ELEMENT_ATTR: function () {\n    this._renderElementAttributes();\n\n    this._change([\"CONTAINER_SIZE\"]);\n  },\n  _change_CONTAINER_SIZE: function () {\n    this._updateSize();\n  },\n  _change_LAYOUT: function () {\n    this._setContentSize();\n  },\n  _change_DISABLED: function () {\n    var renderer = this._renderer;\n    var root = renderer.root;\n\n    if (this.option(\"disabled\")) {\n      this._initDisabledState = root.attr(\"pointer-events\");\n      root.attr({\n        \"pointer-events\": \"none\",\n        filter: renderer.getGrayScaleFilter().id\n      });\n    } else {\n      if (\"none\" === root.attr(\"pointer-events\")) {\n        root.attr({\n          \"pointer-events\": typeUtils.isDefined(this._initDisabledState) ? this._initDisabledState : null,\n          filter: null\n        });\n      }\n    }\n  },\n  _themeDependentChanges: [\"RENDERER\"],\n  _initRenderer: function () {\n    var that = this;\n    that._canvas = that._calculateCanvas();\n    that._renderer = new rendererModule.Renderer({\n      cssClass: that._rootClassPrefix + \" \" + that._rootClass,\n      pathModified: that.option(\"pathModified\"),\n      container: that._$element[0]\n    });\n\n    that._renderer.resize(that._canvas.width, that._canvas.height);\n  },\n  _disposeRenderer: function () {\n    this._renderer.dispose();\n  },\n  _getAnimationOptions: noop,\n  render: function () {\n    this._requestChange([\"CONTAINER_SIZE\"]);\n\n    var visible = this._isVisible();\n\n    this._toggleParentsScrollSubscription(visible);\n\n    !visible && this._stopCurrentHandling();\n  },\n  _toggleParentsScrollSubscription: function (subscribe) {\n    var $parents = $(this._renderer.root.element).parents();\n    var scrollEvents = \"scroll.viz_widgets\";\n\n    if (\"generic\" === devices.real().platform) {\n      $parents = $parents.add(windowUtils.getWindow());\n    }\n\n    this._proxiedTargetParentsScrollHandler = this._proxiedTargetParentsScrollHandler || function () {\n      this._stopCurrentHandling();\n    }.bind(this);\n\n    eventsEngine.off($().add(this._$prevRootParents), scrollEvents, this._proxiedTargetParentsScrollHandler);\n\n    if (subscribe) {\n      eventsEngine.on($parents, scrollEvents, this._proxiedTargetParentsScrollHandler);\n      this._$prevRootParents = $parents;\n    }\n  },\n  _stopCurrentHandling: noop,\n  _dispose: function () {\n    var that = this;\n    that.callBase.apply(that, arguments);\n\n    that._toggleParentsScrollSubscription(false);\n\n    that._removeResizeHandler();\n\n    that._layout.dispose();\n\n    that._eventTrigger.dispose();\n\n    that._disposeCore();\n\n    that._disposePlugins();\n\n    that._disposeRenderer();\n\n    that._themeManager.dispose();\n\n    that._themeManager = that._renderer = that._eventTrigger = null;\n  },\n  _initEventTrigger: function () {\n    var that = this;\n    that._eventTrigger = createEventTrigger(that._eventsMap, function (name) {\n      return that._createActionByOption(name);\n    });\n  },\n  _calculateCanvas: function () {\n    var that = this;\n    var size = that.option(\"size\") || {};\n    var margin = that.option(\"margin\") || {};\n    var defaultCanvas = that._getDefaultSize() || {};\n    var elementWidth = !sizeIsValid(size.width) && windowUtils.hasWindow() ? that._$element.width() : 0;\n    var elementHeight = !sizeIsValid(size.height) && windowUtils.hasWindow() ? that._$element.height() : 0;\n    var canvas = {\n      width: size.width <= 0 ? 0 : _floor(pickPositiveValue([size.width, elementWidth, defaultCanvas.width])),\n      height: size.height <= 0 ? 0 : _floor(pickPositiveValue([size.height, elementHeight, defaultCanvas.height])),\n      left: pickPositiveValue([margin.left, defaultCanvas.left]),\n      top: pickPositiveValue([margin.top, defaultCanvas.top]),\n      right: pickPositiveValue([margin.right, defaultCanvas.right]),\n      bottom: pickPositiveValue([margin.bottom, defaultCanvas.bottom])\n    };\n\n    if (canvas.width - canvas.left - canvas.right <= 0 || canvas.height - canvas.top - canvas.bottom <= 0) {\n      canvas = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    return canvas;\n  },\n  _updateSize: function () {\n    var that = this;\n\n    var canvas = that._calculateCanvas();\n\n    that._renderer.fixPlacement();\n\n    if (areCanvasesDifferent(that._canvas, canvas) || that.__forceRender) {\n      that._canvas = canvas;\n\n      that._recreateSizeDependentObjects(true);\n\n      that._renderer.resize(canvas.width, canvas.height);\n\n      that._change([\"LAYOUT\"]);\n    }\n  },\n  _recreateSizeDependentObjects: noop,\n  _getMinSize: function () {\n    return [0, 0];\n  },\n  _getAlignmentRect: noop,\n  _setContentSize: function () {\n    var canvas = this._canvas;\n    var layout = this._layout;\n    var rect = canvas.width > 0 && canvas.height > 0 ? [canvas.left, canvas.top, canvas.width - canvas.right, canvas.height - canvas.bottom] : [0, 0, 0, 0];\n    var nextRect;\n    rect = layout.forward(rect, this._getMinSize());\n    nextRect = this._applySize(rect) || rect;\n    layout.backward(nextRect, this._getAlignmentRect() || nextRect);\n  },\n  _getOption: function (name, isScalar) {\n    var theme = this._themeManager.theme(name);\n\n    var option = this.option(name);\n    return isScalar ? void 0 !== option ? option : theme : extend(true, {}, theme, option);\n  },\n  _setupResizeHandler: function () {\n    var that = this;\n\n    var redrawOnResize = _parseScalar(this._getOption(\"redrawOnResize\", true), true);\n\n    if (that._resizeHandler) {\n      that._removeResizeHandler();\n    }\n\n    that._resizeHandler = createResizeHandler(function () {\n      if (redrawOnResize) {\n        that._requestChange([\"CONTAINER_SIZE\"]);\n      } else {\n        that._renderer.fixPlacement();\n      }\n    });\n\n    _windowResizeCallbacks.add(that._resizeHandler);\n  },\n  _removeResizeHandler: function () {\n    if (this._resizeHandler) {\n      _windowResizeCallbacks.remove(this._resizeHandler);\n\n      this._resizeHandler.dispose();\n\n      this._resizeHandler = null;\n    }\n  },\n  _onBeginUpdate: noop,\n  beginUpdate: function () {\n    var that = this;\n\n    if (that._initialized && 0 === that._updateLockCount) {\n      that._onBeginUpdate();\n\n      that._suspendChanges();\n    }\n\n    that.callBase.apply(that, arguments);\n    return that;\n  },\n  endUpdate: function () {\n    var that = this;\n    that.callBase.apply(that, arguments);\n\n    if (0 === that._updateLockCount) {\n      that._resumeChanges();\n    }\n\n    return that;\n  },\n  option: function (name) {\n    var that = this;\n\n    if (that._initialized && that._applyingChanges && (arguments.length > 1 || _isObject(name))) {\n      that._optionsQueue = that._optionsQueue || [];\n\n      that._optionsQueue.push(that._getActionForUpdating(arguments));\n    } else {\n      return _option.apply(that, arguments);\n    }\n  },\n  _getActionForUpdating: function (args) {\n    var that = this;\n    return function () {\n      _option.apply(that, args);\n    };\n  },\n  _clean: noop,\n  _render: noop,\n  _optionChanged: function (arg) {\n    var that = this;\n\n    if (that._optionChangedLocker) {\n      return;\n    }\n\n    var partialChanges = that.getPartialChangeOptionsName(arg);\n    var changes = [];\n\n    if (partialChanges.length > 0) {\n      partialChanges.forEach(function (pc) {\n        return changes.push(that._partialOptionChangesMap[pc]);\n      });\n    } else {\n      changes.push(that._optionChangesMap[arg.name]);\n    }\n\n    changes = changes.filter(function (c) {\n      return !!c;\n    });\n\n    if (that._eventTrigger.change(arg.name)) {\n      that._change([\"EVENTS\"]);\n    } else {\n      if (changes.length > 0) {\n        that._change(changes);\n      } else {\n        that.callBase.apply(that, arguments);\n      }\n    }\n  },\n  _notify: noop,\n  _optionChangesMap: {\n    size: \"CONTAINER_SIZE\",\n    margin: \"CONTAINER_SIZE\",\n    redrawOnResize: \"RESIZE_HANDLER\",\n    theme: \"THEME\",\n    rtlEnabled: \"THEME\",\n    encodeHtml: \"THEME\",\n    elementAttr: \"ELEMENT_ATTR\",\n    disabled: \"DISABLED\"\n  },\n  _partialOptionChangesMap: {},\n  _partialOptionChangesPath: {},\n  getPartialChangeOptionsName: function (changedOption) {\n    var that = this;\n    var fullName = changedOption.fullName;\n    var sections = fullName.split(/[.]/);\n    var name = changedOption.name;\n    var value = changedOption.value;\n    var options = this._partialOptionChangesPath[name];\n    var partialChangeOptionsName = [];\n\n    if (options) {\n      if (true === options) {\n        partialChangeOptionsName.push(name);\n      } else {\n        options.forEach(function (op) {\n          fullName.indexOf(op) >= 0 && partialChangeOptionsName.push(op);\n        });\n\n        if (1 === sections.length) {\n          if (\"object\" === typeUtils.type(value)) {\n            that._addOptionsNameForPartialUpdate(value, options, partialChangeOptionsName);\n          } else {\n            if (\"array\" === typeUtils.type(value)) {\n              if (value.length > 0 && value.every(function (item) {\n                return that._checkOptionsForPartialUpdate(item, options);\n              })) {\n                value.forEach(function (item) {\n                  return that._addOptionsNameForPartialUpdate(item, options, partialChangeOptionsName);\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return partialChangeOptionsName.filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    });\n  },\n  _checkOptionsForPartialUpdate: function (optionObject, options) {\n    return !Object.keys(optionObject).some(function (key) {\n      return options.indexOf(key) === -1;\n    });\n  },\n  _addOptionsNameForPartialUpdate: function (optionObject, options, partialChangeOptionsName) {\n    var optionKeys = Object.keys(optionObject);\n\n    if (this._checkOptionsForPartialUpdate(optionObject, options)) {\n      optionKeys.forEach(function (key) {\n        return options.indexOf(key) > -1 && partialChangeOptionsName.push(key);\n      });\n    }\n  },\n  _visibilityChanged: function () {\n    this.render();\n  },\n  _setThemeAndRtl: function () {\n    this._themeManager.setTheme(this.option(\"theme\"), this.option(OPTION_RTL_ENABLED));\n  },\n  _getRendererOptions: function () {\n    return {\n      rtl: this.option(OPTION_RTL_ENABLED),\n      encodeHtml: this.option(\"encodeHtml\"),\n      animation: this._getAnimationOptions()\n    };\n  },\n  _setRendererOptions: function () {\n    this._renderer.setOptions(this._getRendererOptions());\n  },\n  svg: function () {\n    return this._renderer.svg();\n  },\n  getSize: function () {\n    var canvas = this._canvas || {};\n    return {\n      width: canvas.width,\n      height: canvas.height\n    };\n  },\n  isReady: getFalse,\n  _dataIsReady: getTrue,\n  _resetIsReady: function () {\n    this.isReady = getFalse;\n  },\n  _drawn: function () {\n    var that = this;\n    that.isReady = getFalse;\n\n    if (that._dataIsReady()) {\n      that._renderer.onEndAnimation(function () {\n        that.isReady = getTrue;\n      });\n    }\n\n    that._eventTrigger(\"drawn\", {});\n  }\n});\nhelpers.replaceInherit(module.exports);\n\nfunction createEventTrigger(eventsMap, callbackGetter) {\n  var triggers = {};\n  each(eventsMap, function (name, info) {\n    if (info.name) {\n      createEvent(name);\n    }\n  });\n  var changes;\n\n  triggerEvent.change = function (name) {\n    var eventInfo = eventsMap[name];\n\n    if (eventInfo) {\n      (changes = changes || {})[name] = eventInfo;\n    }\n\n    return !!eventInfo;\n  };\n\n  triggerEvent.applyChanges = function () {\n    if (changes) {\n      each(changes, function (name, eventInfo) {\n        createEvent(eventInfo.newName || name);\n      });\n      changes = null;\n    }\n  };\n\n  triggerEvent.dispose = function () {\n    eventsMap = callbackGetter = triggers = null;\n  };\n\n  return triggerEvent;\n\n  function createEvent(name) {\n    var eventInfo = eventsMap[name];\n    triggers[eventInfo.name] = callbackGetter(name);\n  }\n\n  function triggerEvent(name, arg, complete) {\n    triggers[name](arg);\n    complete && complete();\n  }\n}","map":null,"metadata":{},"sourceType":"script"}