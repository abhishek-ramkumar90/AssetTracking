{"ast":null,"code":"/**\r\n * DevExtreme (core/component.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(n);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar Config = require(\"./config\");\n\nvar extend = require(\"./utils/extend\").extend;\n\nvar optionManager = require(\"./option_manager\").OptionManager;\n\nvar bracketsToDots = require(\"./utils/data\").bracketsToDots;\n\nvar Class = require(\"./class\");\n\nvar Action = require(\"./action\");\n\nvar errors = require(\"./errors\");\n\nvar commonUtils = require(\"./utils/common\");\n\nvar typeUtils = require(\"./utils/type\");\n\nvar objectUtils = require(\"./utils/object\");\n\nvar deferredUtils = require(\"../core/utils/deferred\");\n\nvar Deferred = deferredUtils.Deferred;\nvar when = deferredUtils.when;\n\nvar Callbacks = require(\"./utils/callbacks\");\n\nvar EventsMixin = require(\"./events_mixin\");\n\nvar publicComponentUtils = require(\"./utils/public_component\");\n\nvar devices = require(\"./devices\");\n\nvar isFunction = typeUtils.isFunction;\nvar noop = commonUtils.noop;\n\nvar PostponedOperations = function () {\n  function PostponedOperations() {\n    _classCallCheck(this, PostponedOperations);\n\n    this._postponedOperations = {};\n  }\n\n  _createClass(PostponedOperations, [{\n    key: \"add\",\n    value: function (key, fn, postponedPromise) {\n      if (key in this._postponedOperations) {\n        postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);\n      } else {\n        var completePromise = new Deferred();\n        this._postponedOperations[key] = {\n          fn: fn,\n          completePromise: completePromise,\n          promises: postponedPromise ? [postponedPromise] : []\n        };\n      }\n\n      return this._postponedOperations[key].completePromise.promise();\n    }\n  }, {\n    key: \"callPostponedOperations\",\n    value: function () {\n      for (var key in this._postponedOperations) {\n        var operation = this._postponedOperations[key];\n\n        if (typeUtils.isDefined(operation)) {\n          if (operation.promises && operation.promises.length) {\n            when.apply(void 0, _toConsumableArray(operation.promises)).done(operation.fn).then(operation.completePromise.resolve);\n          } else {\n            operation.fn().done(operation.completePromise.resolve);\n          }\n        }\n      }\n\n      this._postponedOperations = {};\n    }\n  }]);\n\n  return PostponedOperations;\n}();\n\nvar normalizeOptions = function (options, value) {\n  if (\"string\" !== typeof options) {\n    return options;\n  }\n\n  var result = {};\n  result[options] = value;\n  return result;\n};\n\nvar Component = Class.inherit({\n  _setDeprecatedOptions: function () {\n    this._deprecatedOptions = {};\n  },\n  _getDeprecatedOptions: function () {\n    return this._deprecatedOptions;\n  },\n  _getOptionAliasesByName: function (optionName) {\n    var _this = this;\n\n    return Object.keys(this._deprecatedOptions).filter(function (aliasName) {\n      return optionName === _this._deprecatedOptions[aliasName].alias;\n    });\n  },\n  _getDefaultOptions: function () {\n    return {\n      onInitialized: null,\n      onOptionChanged: null,\n      onDisposing: null,\n      defaultOptionsRules: null\n    };\n  },\n  _defaultOptionsRules: function () {\n    return [];\n  },\n  _getOptionByRules: function (customRules) {\n    var rules = this._defaultOptionsRules();\n\n    if (Array.isArray(customRules)) {\n      rules = rules.concat(customRules);\n    }\n\n    return this._convertRulesToOptions(rules);\n  },\n  _setOptionsByDevice: function (customRules) {\n    var rulesOptions = this._getOptionByRules(customRules);\n\n    this._setOptionByStealth(rulesOptions);\n  },\n  _convertRulesToOptions: function (rules) {\n    var options = {};\n    var currentDevice = devices.current();\n\n    var deviceMatch = function (device, filter) {\n      var filterArray = [];\n      Array.prototype.push.call(filterArray, filter);\n      return 1 === filterArray.length && typeUtils.isEmptyObject(filterArray[0]) || commonUtils.findBestMatches(device, filterArray).length > 0;\n    };\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var deviceFilter = rule.device || {};\n      var match;\n\n      if (isFunction(deviceFilter)) {\n        match = deviceFilter(currentDevice);\n      } else {\n        match = deviceMatch(currentDevice, deviceFilter);\n      }\n\n      if (match) {\n        extend(options, rule.options);\n      }\n    }\n\n    return options;\n  },\n  _isInitialOptionValue: function (name) {\n    var optionValue = this.option(name);\n    var initialOptionValue = this.initialOption(name);\n    var isInitialOption = isFunction(optionValue) && isFunction(initialOptionValue) ? optionValue.toString() === initialOptionValue.toString() : commonUtils.equalByValue(optionValue, initialOptionValue);\n    return isInitialOption;\n  },\n  _setOptionsByReference: function () {\n    this._optionsByReference = {};\n  },\n  _getOptionsByReference: function () {\n    return this._optionsByReference;\n  },\n  ctor: function (options) {\n    var _this2 = this;\n\n    this.NAME = publicComponentUtils.name(this.constructor);\n    options = options || {};\n\n    if (options.eventsStrategy) {\n      this.setEventsStrategy(options.eventsStrategy);\n    }\n\n    this._options = {};\n    this._updateLockCount = 0;\n    this._optionChangedCallbacks = options._optionChangedCallbacks || Callbacks();\n    this._disposingCallbacks = options._disposingCallbacks || Callbacks();\n    this.postponedOperations = new PostponedOperations();\n    this.beginUpdate();\n\n    try {\n      this._setOptionsByReference();\n\n      this._setDeprecatedOptions();\n\n      this._options = this._getDefaultOptions();\n      this._optionManager = new optionManager(this._options, this._getOptionsByReference(), this._deprecatedOptions);\n\n      this._optionManager.onChanging(function (name, previousValue, value) {\n        if (_this2._initialized) {\n          _this2._optionChanging(name, previousValue, value);\n        }\n      });\n\n      this._optionManager.onDeprecated(function (option, info) {\n        _this2._logDeprecatedWarning(option, info);\n      });\n\n      this._optionManager.onChanged(function (name, value, previousValue) {\n        _this2._notifyOptionChanged(name, value, previousValue);\n      });\n\n      if (options && options.onInitializing) {\n        options.onInitializing.apply(this, [options]);\n      }\n\n      this._setOptionsByDevice(options.defaultOptionsRules);\n\n      this._initOptions(options);\n    } finally {\n      this.endUpdate();\n    }\n  },\n  _initOptions: function (options) {\n    this.option(options);\n  },\n  _init: function () {\n    this._createOptionChangedAction();\n\n    this.on(\"disposing\", function (args) {\n      this._disposingCallbacks.fireWith(this, [args]);\n    }.bind(this));\n  },\n  _logDeprecatedWarning: function (option, info) {\n    var message = info.message || \"Use the '\" + info.alias + \"' option instead\";\n    errors.log(\"W0001\", this.NAME, option, info.since, message);\n  },\n  _createOptionChangedAction: function () {\n    this._optionChangedAction = this._createActionByOption(\"onOptionChanged\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _createDisposingAction: function () {\n    this._disposingAction = this._createActionByOption(\"onDisposing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"onDisposing\":\n      case \"onInitialized\":\n        break;\n\n      case \"onOptionChanged\":\n        this._createOptionChangedAction();\n\n        break;\n\n      case \"defaultOptionsRules\":\n    }\n  },\n  _dispose: function () {\n    this._optionChangedCallbacks.empty();\n\n    this._createDisposingAction();\n\n    this._disposingAction();\n\n    this._disposeEvents();\n\n    this._optionManager.dispose();\n\n    this._disposed = true;\n  },\n  instance: function () {\n    return this;\n  },\n  beginUpdate: function () {\n    this._updateLockCount++;\n  },\n  endUpdate: function () {\n    this._updateLockCount = Math.max(this._updateLockCount - 1, 0);\n\n    if (!this._updateLockCount) {\n      this.postponedOperations.callPostponedOperations();\n\n      if (!this._initializing && !this._initialized) {\n        this._initializing = true;\n\n        try {\n          this._init();\n        } finally {\n          this._initializing = false;\n          this._updateLockCount++;\n\n          this._createActionByOption(\"onInitialized\", {\n            excludeValidators: [\"disabled\", \"readOnly\"]\n          })();\n\n          this._updateLockCount--;\n          this._initialized = true;\n        }\n      }\n    }\n  },\n  _optionChanging: noop,\n  _notifyOptionChanged: function (option, value, previousValue) {\n    var that = this;\n\n    if (this._initialized) {\n      var optionNames = [option].concat(that._getOptionAliasesByName(option));\n\n      for (var i = 0; i < optionNames.length; i++) {\n        var name = optionNames[i];\n        var args = {\n          name: name.split(/[.[]/)[0],\n          fullName: name,\n          value: value,\n          previousValue: previousValue\n        };\n\n        that._optionChangedCallbacks.fireWith(that, [extend(that._defaultActionArgs(), args)]);\n\n        that._optionChangedAction(extend({}, args));\n\n        if (!that._disposed && this._cancelOptionChange !== args.name) {\n          that._optionChanged(args);\n        }\n      }\n    }\n  },\n  initialOption: function (optionName) {\n    if (!this._initialOptions) {\n      this._initialOptions = this._getDefaultOptions();\n\n      var rulesOptions = this._getOptionByRules(this._getOptionByStealth(\"defaultOptionsRules\"));\n\n      this._optionManager.setValueByReference(this._initialOptions, rulesOptions);\n    }\n\n    return this._initialOptions[optionName];\n  },\n  _defaultActionConfig: function () {\n    return {\n      context: this,\n      component: this\n    };\n  },\n  _defaultActionArgs: function () {\n    return {\n      component: this\n    };\n  },\n  _createAction: function (actionSource, config) {\n    var that = this;\n    var action;\n    return function (e) {\n      if (!arguments.length) {\n        e = {};\n      }\n\n      if (!typeUtils.isPlainObject(e)) {\n        e = {\n          actionValue: e\n        };\n      }\n\n      action = action || new Action(actionSource, extend(config, that._defaultActionConfig()));\n      return action.execute.call(action, extend(e, that._defaultActionArgs()));\n    };\n  },\n  _createActionByOption: function (optionName, config) {\n    var that = this;\n    var action;\n    var eventName;\n    var actionFunc;\n\n    var result = function () {\n      if (!eventName) {\n        config = config || {};\n\n        if (\"string\" !== typeof optionName) {\n          throw errors.Error(\"E0008\");\n        }\n\n        if (0 === optionName.indexOf(\"on\")) {\n          eventName = that._getEventName(optionName);\n        }\n\n        actionFunc = that.option(optionName);\n      }\n\n      if (!action && !actionFunc && !config.beforeExecute && !config.afterExecute && !that.hasEvent(eventName)) {\n        return;\n      }\n\n      if (!action) {\n        var beforeExecute = config.beforeExecute;\n\n        config.beforeExecute = function (args) {\n          beforeExecute && beforeExecute.apply(that, arguments);\n          that.fireEvent(eventName, args.args);\n        };\n\n        action = that._createAction(actionFunc, config);\n      }\n\n      if (Config().wrapActionsBeforeExecute) {\n        var beforeActionExecute = that.option(\"beforeActionExecute\") || noop;\n        var wrappedAction = beforeActionExecute(that, action, config) || action;\n        return wrappedAction.apply(that, arguments);\n      }\n\n      return action.apply(that, arguments);\n    };\n\n    if (!Config().wrapActionsBeforeExecute) {\n      var onActionCreated = that.option(\"onActionCreated\") || noop;\n      result = onActionCreated(that, result, config) || result;\n    }\n\n    return result;\n  },\n  _getOptionByStealth: function (name) {\n    return this._optionManager.getValueSilently(name);\n  },\n  _setOptionByStealth: function (options, value) {\n    this._optionManager.setValueSilently(normalizeOptions(options, value));\n  },\n  _getEventName: function (actionName) {\n    return actionName.charAt(2).toLowerCase() + actionName.substr(3);\n  },\n  hasActionSubscription: function (actionName) {\n    return !!this.option(actionName) || this.hasEvent(this._getEventName(actionName));\n  },\n  isOptionDeprecated: function (name) {\n    var deprecatedOptions = this._getDeprecatedOptions();\n\n    return Object.prototype.hasOwnProperty.call(deprecatedOptions, name);\n  },\n  _setOptionSilent: function (name, value) {\n    this._cancelOptionChange = name;\n    this.option(name, value);\n    this._cancelOptionChange = false;\n  },\n  _getOptionValue: function (name, context) {\n    var value = this.option(name);\n\n    if (isFunction(value)) {\n      return value.bind(context)();\n    }\n\n    return value;\n  },\n  option: function (options, value) {\n    if (arguments.length < 2 && \"object\" !== typeUtils.type(options)) {\n      return this._optionManager.getValue(options);\n    }\n\n    this.beginUpdate();\n\n    try {\n      this._optionManager.setValue(normalizeOptions(options, value));\n    } finally {\n      this.endUpdate();\n    }\n  },\n  resetOption: function (name) {\n    var _this3 = this;\n\n    if (!name) {\n      return;\n    }\n\n    var defaultValue;\n\n    if (name.search(/\\.|\\[/) !== -1) {\n      name = bracketsToDots(name);\n      var fullPath = name.split(\".\");\n      fullPath.forEach(function (path) {\n        defaultValue = defaultValue ? defaultValue[path] : _this3.initialOption(path);\n      });\n    } else {\n      defaultValue = this.initialOption(name);\n    }\n\n    defaultValue = typeUtils.isObject(defaultValue) ? objectUtils.clone(defaultValue) : defaultValue;\n    this.beginUpdate();\n\n    this._optionManager.setValue(normalizeOptions(name, defaultValue), false);\n\n    this.endUpdate();\n  }\n}).include(EventsMixin);\nmodule.exports = Component;\nmodule.exports.PostponedOperations = PostponedOperations;","map":null,"metadata":{},"sourceType":"script"}