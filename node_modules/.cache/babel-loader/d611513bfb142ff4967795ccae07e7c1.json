{"ast":null,"code":"/**\r\n * DevExtreme (color.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar standardColorNames = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"00ffff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"0000ff\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"00ffff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dodgerblue: \"1e90ff\",\n  feldspar: \"d19275\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"ff00ff\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgrey: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslateblue: \"8470ff\",\n  lightslategray: \"778899\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"00ff00\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"ff00ff\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370d8\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"d87093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  rebeccapurple: \"663399\",\n  red: \"ff0000\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  violetred: \"d02090\",\n  wheat: \"f5deb3\",\n  white: \"ffffff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ffff00\",\n  yellowgreen: \"9acd32\"\n};\nvar standardColorTypes = [{\n  re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n  process: function (colorString) {\n    return [parseInt(colorString[1], 10), parseInt(colorString[2], 10), parseInt(colorString[3], 10)];\n  }\n}, {\n  re: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d*\\.*\\d+)\\)$/,\n  process: function (colorString) {\n    return [parseInt(colorString[1], 10), parseInt(colorString[2], 10), parseInt(colorString[3], 10), parseFloat(colorString[4])];\n  }\n}, {\n  re: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/,\n  process: function (colorString) {\n    return [parseInt(colorString[1], 16), parseInt(colorString[2], 16), parseInt(colorString[3], 16)];\n  }\n}, {\n  re: /^#([a-f0-9]{1})([a-f0-9]{1})([a-f0-9]{1})$/,\n  process: function (colorString) {\n    return [parseInt(colorString[1] + colorString[1], 16), parseInt(colorString[2] + colorString[2], 16), parseInt(colorString[3] + colorString[3], 16)];\n  }\n}, {\n  re: /^hsv\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n  process: function (colorString) {\n    var h = parseInt(colorString[1], 10);\n    var s = parseInt(colorString[2], 10);\n    var v = parseInt(colorString[3], 10);\n    var rgb = hsvToRgb(h, s, v);\n    return [rgb[0], rgb[1], rgb[2], 1, [h, s, v]];\n  }\n}, {\n  re: /^hsl\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n  process: function (colorString) {\n    var h = parseInt(colorString[1], 10);\n    var s = parseInt(colorString[2], 10);\n    var l = parseInt(colorString[3], 10);\n    var rgb = hslToRgb(h, s, l);\n    return [rgb[0], rgb[1], rgb[2], 1, null, [h, s, l]];\n  }\n}];\n\nfunction Color(value) {\n  this.baseColor = value;\n  var color;\n\n  if (value) {\n    color = String(value).toLowerCase().replace(/ /g, \"\");\n    color = standardColorNames[color] ? \"#\" + standardColorNames[color] : color;\n    color = parseColor(color);\n  }\n\n  if (!color) {\n    this.colorIsInvalid = true;\n  }\n\n  color = color || {};\n  this.r = normalize(color[0]);\n  this.g = normalize(color[1]);\n  this.b = normalize(color[2]);\n  this.a = normalize(color[3], 1, 1);\n\n  if (color[4]) {\n    this.hsv = {\n      h: color[4][0],\n      s: color[4][1],\n      v: color[4][2]\n    };\n  } else {\n    this.hsv = toHsvFromRgb(this.r, this.g, this.b);\n  }\n\n  if (color[5]) {\n    this.hsl = {\n      h: color[5][0],\n      s: color[5][1],\n      l: color[5][2]\n    };\n  } else {\n    this.hsl = toHslFromRgb(this.r, this.g, this.b);\n  }\n}\n\nfunction parseColor(color) {\n  if (\"transparent\" === color) {\n    return [0, 0, 0, 0];\n  }\n\n  var i = 0;\n  var ii = standardColorTypes.length;\n  var str;\n\n  for (; i < ii; ++i) {\n    str = standardColorTypes[i].re.exec(color);\n\n    if (str) {\n      return standardColorTypes[i].process(str);\n    }\n  }\n\n  return null;\n}\n\nfunction normalize(colorComponent, def, max) {\n  def = def || 0;\n  max = max || 255;\n  return colorComponent < 0 || isNaN(colorComponent) ? def : colorComponent > max ? max : colorComponent;\n}\n\nfunction toHexFromRgb(r, g, b) {\n  return \"#\" + (16777216 | r << 16 | g << 8 | b).toString(16).slice(1);\n}\n\nfunction toHsvFromRgb(r, g, b) {\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var delta = max - min;\n  var H;\n  var S;\n  var V;\n  V = max;\n  S = 0 === max ? 0 : 1 - min / max;\n\n  if (max === min) {\n    H = 0;\n  } else {\n    switch (max) {\n      case r:\n        H = 60 * ((g - b) / delta);\n\n        if (g < b) {\n          H += 360;\n        }\n\n        break;\n\n      case g:\n        H = 60 * ((b - r) / delta) + 120;\n        break;\n\n      case b:\n        H = 60 * ((r - g) / delta) + 240;\n    }\n  }\n\n  S *= 100;\n  V *= 100 / 255;\n  return {\n    h: Math.round(H),\n    s: Math.round(S),\n    v: Math.round(V)\n  };\n}\n\nfunction hsvToRgb(h, s, v) {\n  var vDec;\n  var vInc;\n  var vMin;\n  var index;\n  var a;\n  var r;\n  var g;\n  var b;\n  index = Math.floor(h % 360 / 60);\n  vMin = (100 - s) * v / 100;\n  a = (v - vMin) * (h % 60 / 60);\n  vInc = vMin + a;\n  vDec = v - a;\n\n  switch (index) {\n    case 0:\n      r = v;\n      g = vInc;\n      b = vMin;\n      break;\n\n    case 1:\n      r = vDec;\n      g = v;\n      b = vMin;\n      break;\n\n    case 2:\n      r = vMin;\n      g = v;\n      b = vInc;\n      break;\n\n    case 3:\n      r = vMin;\n      g = vDec;\n      b = v;\n      break;\n\n    case 4:\n      r = vInc;\n      g = vMin;\n      b = v;\n      break;\n\n    case 5:\n      r = v;\n      g = vMin;\n      b = vDec;\n  }\n\n  return [Math.round(2.55 * r), Math.round(2.55 * g), Math.round(2.55 * b)];\n}\n\nfunction calculateHue(r, g, b, delta) {\n  var max = Math.max(r, g, b);\n\n  switch (max) {\n    case r:\n      return (g - b) / delta + (g < b ? 6 : 0);\n\n    case g:\n      return (b - r) / delta + 2;\n\n    case b:\n      return (r - g) / delta + 4;\n  }\n}\n\nfunction toHslFromRgb(r, g, b) {\n  r = convertTo01Bounds(r, 255);\n  g = convertTo01Bounds(g, 255);\n  b = convertTo01Bounds(b, 255);\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var maxMinSum = max + min;\n  var h;\n  var s;\n  var l = maxMinSum / 2;\n\n  if (max === min) {\n    h = s = 0;\n  } else {\n    var delta = max - min;\n\n    if (l > .5) {\n      s = delta / (2 - maxMinSum);\n    } else {\n      s = delta / maxMinSum;\n    }\n\n    h = calculateHue(r, g, b, delta);\n    h /= 6;\n  }\n\n  return {\n    h: _round(360 * h),\n    s: _round(100 * s),\n    l: _round(100 * l)\n  };\n}\n\nfunction makeColorTint(colorPart, h) {\n  var colorTint = h;\n\n  if (\"r\" === colorPart) {\n    colorTint = h + 1 / 3;\n  }\n\n  if (\"b\" === colorPart) {\n    colorTint = h - 1 / 3;\n  }\n\n  return colorTint;\n}\n\nfunction modifyColorTint(colorTint) {\n  if (colorTint < 0) {\n    colorTint += 1;\n  }\n\n  if (colorTint > 1) {\n    colorTint -= 1;\n  }\n\n  return colorTint;\n}\n\nfunction hueToRgb(p, q, colorTint) {\n  colorTint = modifyColorTint(colorTint);\n\n  if (colorTint < 1 / 6) {\n    return p + 6 * (q - p) * colorTint;\n  }\n\n  if (colorTint < .5) {\n    return q;\n  }\n\n  if (colorTint < 2 / 3) {\n    return p + (q - p) * (2 / 3 - colorTint) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  var r;\n  var g;\n  var b;\n  h = convertTo01Bounds(h, 360);\n  s = convertTo01Bounds(s, 100);\n  l = convertTo01Bounds(l, 100);\n\n  if (0 === s) {\n    r = g = b = l;\n  } else {\n    var q = l < .5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hueToRgb(p, q, makeColorTint(\"r\", h));\n    g = hueToRgb(p, q, makeColorTint(\"g\", h));\n    b = hueToRgb(p, q, makeColorTint(\"b\", h));\n  }\n\n  return [_round(255 * r), _round(255 * g), _round(255 * b)];\n}\n\nfunction convertTo01Bounds(n, max) {\n  n = Math.min(max, Math.max(0, parseFloat(n)));\n\n  if (Math.abs(n - max) < 1e-6) {\n    return 1;\n  }\n\n  return n % max / parseFloat(max);\n}\n\nfunction isIntegerBetweenMinAndMax(number, min, max) {\n  min = min || 0;\n  max = max || 255;\n\n  if (number % 1 !== 0 || number < min || number > max || \"number\" !== typeof number || isNaN(number)) {\n    return false;\n  }\n\n  return true;\n}\n\nvar _round = Math.round;\nColor.prototype = {\n  constructor: Color,\n  highlight: function (step) {\n    step = step || 10;\n    return this.alter(step).toHex();\n  },\n  darken: function (step) {\n    step = step || 10;\n    return this.alter(-step).toHex();\n  },\n  alter: function (step) {\n    var result = new Color();\n    result.r = normalize(this.r + step);\n    result.g = normalize(this.g + step);\n    result.b = normalize(this.b + step);\n    return result;\n  },\n  blend: function (blendColor, opacity) {\n    var other = blendColor instanceof Color ? blendColor : new Color(blendColor);\n    var result = new Color();\n    result.r = normalize(_round(this.r * (1 - opacity) + other.r * opacity));\n    result.g = normalize(_round(this.g * (1 - opacity) + other.g * opacity));\n    result.b = normalize(_round(this.b * (1 - opacity) + other.b * opacity));\n    return result;\n  },\n  toHex: function () {\n    return toHexFromRgb(this.r, this.g, this.b);\n  },\n  getPureColor: function () {\n    var rgb = hsvToRgb(this.hsv.h, 100, 100);\n    return new Color(\"rgb(\" + rgb.join(\",\") + \")\");\n  },\n  isValidHex: function (hex) {\n    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);\n  },\n  isValidRGB: function (r, g, b) {\n    if (!isIntegerBetweenMinAndMax(r) || !isIntegerBetweenMinAndMax(g) || !isIntegerBetweenMinAndMax(b)) {\n      return false;\n    }\n\n    return true;\n  },\n  isValidAlpha: function (a) {\n    if (isNaN(a) || a < 0 || a > 1 || \"number\" !== typeof a) {\n      return false;\n    }\n\n    return true;\n  },\n  colorIsInvalid: false,\n  fromHSL: function (hsl) {\n    var color = new Color();\n    var rgb = hslToRgb(hsl.h, hsl.s, hsl.l);\n    color.r = rgb[0];\n    color.g = rgb[1];\n    color.b = rgb[2];\n    return color;\n  }\n};\nmodule.exports = Color;","map":null,"metadata":{},"sourceType":"script"}