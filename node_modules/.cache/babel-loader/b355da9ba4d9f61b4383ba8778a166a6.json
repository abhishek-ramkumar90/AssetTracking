{"ast":null,"code":"/**\r\n * DevExtreme (viz/series/points/polar_point.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar extend = require(\"../../../core/utils/extend\").extend;\n\nvar _extend = extend;\n\nvar symbolPoint = require(\"./symbol_point\");\n\nvar barPoint = require(\"./bar_point\");\n\nvar piePoint = require(\"./pie_point\");\n\nvar isDefined = require(\"../../../core/utils/type\").isDefined;\n\nvar vizUtils = require(\"../../core/utils\");\n\nvar normalizeAngle = vizUtils.normalizeAngle;\nvar _math = Math;\nvar _max = _math.max;\n\nvar RADIAL_LABEL_INDENT = require(\"../../components/consts\").radialLabelIndent;\n\nvar ERROR_BARS_ANGLE_OFFSET = 90;\nvar CANVAS_POSITION_END = \"canvas_position_end\";\nvar CANVAS_POSITION_DEFAULT = \"canvas_position_default\";\nexports.polarSymbolPoint = _extend({}, symbolPoint, {\n  _getLabelCoords: piePoint._getLabelCoords,\n  _moveLabelOnCanvas: function (coord, visibleArea, labelBBox) {\n    var x = coord.x;\n    var y = coord.y;\n\n    if (visibleArea.minX > x) {\n      x = visibleArea.minX;\n    }\n\n    if (visibleArea.maxX < x + labelBBox.width) {\n      x = visibleArea.maxX - labelBBox.width;\n    }\n\n    if (visibleArea.minY > y) {\n      y = visibleArea.minY;\n    }\n\n    if (visibleArea.maxY < y + labelBBox.height) {\n      y = visibleArea.maxY - labelBBox.height;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  },\n  _getLabelPosition: function () {\n    return \"outside\";\n  },\n  _getCoords: function (argument, value) {\n    var axis = this.series.getValueAxis();\n    var startAngle = axis.getAngles()[0];\n\n    var angle = this._getArgTranslator().translate(argument);\n\n    var radius = this._getValTranslator().translate(value);\n\n    var coords = vizUtils.convertPolarToXY(axis.getCenter(), axis.getAngles()[0], angle, radius);\n    coords.angle = angle + startAngle - 90, coords.radius = radius;\n    return coords;\n  },\n  _translate: function () {\n    var that = this;\n    var center = that.series.getValueAxis().getCenter();\n\n    var coord = that._getCoords(that.argument, that.value);\n\n    var maxRadius = that._getValTranslator().translate(CANVAS_POSITION_END);\n\n    var normalizedRadius = isDefined(coord.radius) && coord.radius >= 0 ? coord.radius : null;\n    that.vx = normalizeAngle(coord.angle);\n    that.vy = that.radiusOuter = that.radiusLabels = normalizedRadius;\n    that.radiusLabels += RADIAL_LABEL_INDENT;\n    that.radius = normalizedRadius;\n    that.middleAngle = -coord.angle;\n    that.angle = -coord.angle;\n    that.x = coord.x;\n    that.y = coord.y;\n    that.defaultX = that.centerX = center.x;\n    that.defaultY = that.centerY = center.y;\n\n    that._translateErrorBars();\n\n    that.inVisibleArea = that._checkRadiusForVisibleArea(normalizedRadius, maxRadius);\n  },\n  _checkRadiusForVisibleArea: function (radius, maxRadius) {\n    return isDefined(radius) && radius <= maxRadius;\n  },\n  _translateErrorBars: function () {\n    var that = this;\n    var errorBars = that._options.errorBars;\n\n    var translator = that._getValTranslator();\n\n    if (!errorBars) {\n      return;\n    }\n\n    isDefined(that.lowError) && (that._lowErrorCoord = that.centerY - translator.translate(that.lowError));\n    isDefined(that.highError) && (that._highErrorCoord = that.centerY - translator.translate(that.highError));\n    that._errorBarPos = that.centerX;\n    that._baseErrorBarPos = \"stdDeviation\" === errorBars.type ? that._lowErrorCoord + (that._highErrorCoord - that._lowErrorCoord) / 2 : that.centerY - that.radius;\n  },\n  _getTranslates: function (animationEnabled) {\n    return animationEnabled ? this.getDefaultCoords() : {\n      x: this.x,\n      y: this.y\n    };\n  },\n  getDefaultCoords: function () {\n    var cosSin = vizUtils.getCosAndSin(-this.angle);\n\n    var radius = this._getValTranslator().translate(CANVAS_POSITION_DEFAULT);\n\n    var x = this.defaultX + radius * cosSin.cos;\n    var y = this.defaultY + radius * cosSin.sin;\n    return {\n      x: x,\n      y: y\n    };\n  },\n  _addLabelAlignmentAndOffset: function (label, coord) {\n    return coord;\n  },\n  _checkLabelPosition: function (label, coord) {\n    var that = this;\n\n    var visibleArea = that._getVisibleArea();\n\n    var graphicBBox = that._getGraphicBBox();\n\n    if (that._isPointInVisibleArea(visibleArea, graphicBBox)) {\n      coord = that._moveLabelOnCanvas(coord, visibleArea, label.getBoundingRect());\n    }\n\n    return coord;\n  },\n  _getErrorBarSettings: function (errorBarOptions, animationEnabled) {\n    var settings = symbolPoint._getErrorBarSettings.call(this, errorBarOptions, animationEnabled);\n\n    settings.rotate = ERROR_BARS_ANGLE_OFFSET - this.angle;\n    settings.rotateX = this.centerX;\n    settings.rotateY = this.centerY;\n    return settings;\n  },\n  getCoords: function (min) {\n    return min ? this.getDefaultCoords() : {\n      x: this.x,\n      y: this.y\n    };\n  }\n});\nexports.polarBarPoint = _extend({}, barPoint, {\n  _translateErrorBars: exports.polarSymbolPoint._translateErrorBars,\n  _getErrorBarSettings: exports.polarSymbolPoint._getErrorBarSettings,\n  _moveLabelOnCanvas: exports.polarSymbolPoint._moveLabelOnCanvas,\n  _getLabelCoords: piePoint._getLabelCoords,\n  _getLabelConnector: piePoint._getLabelConnector,\n  getTooltipParams: piePoint.getTooltipParams,\n  _getLabelPosition: piePoint._getLabelPosition,\n  _getCoords: exports.polarSymbolPoint._getCoords,\n  _translate: function () {\n    var that = this;\n\n    var translator = that._getValTranslator();\n\n    var businessRange = translator.getBusinessRange();\n    var maxRadius = translator.translate(CANVAS_POSITION_END);\n    that.radiusInner = translator.translate(that.minValue);\n\n    exports.polarSymbolPoint._translate.call(that);\n\n    if (null === that.radiusInner) {\n      that.radiusInner = that.radius = maxRadius;\n    } else {\n      if (null === that.radius) {\n        that.radius = that.value >= businessRange.minVisible ? maxRadius : 0;\n      } else {\n        if (that.radius > maxRadius) {\n          that.radius = maxRadius;\n        }\n      }\n    }\n\n    that.radiusOuter = that.radiusLabels = _max(that.radiusInner, that.radius);\n    that.radiusLabels += RADIAL_LABEL_INDENT;\n    that.radiusInner = that.defaultRadius = _math.min(that.radiusInner, that.radius);\n    that.middleAngle = that.angle = -normalizeAngle(that.middleAngleCorrection - that.angle);\n  },\n  _checkRadiusForVisibleArea: function (radius) {\n    return isDefined(radius) || this._getValTranslator().translate(this.minValue) > 0;\n  },\n  _getErrorBarBaseEdgeLength: function () {\n    var coord = this.getMarkerCoords();\n    return _math.PI * coord.outerRadius * _math.abs(coord.startAngle - coord.endAngle) / 180;\n  },\n  getMarkerCoords: function () {\n    return {\n      x: this.centerX,\n      y: this.centerY,\n      outerRadius: this.radiusOuter,\n      innerRadius: this.defaultRadius,\n      startAngle: this.middleAngle - this.interval / 2,\n      endAngle: this.middleAngle + this.interval / 2\n    };\n  },\n  _drawMarker: function (renderer, group, animationEnabled) {\n    var that = this;\n\n    var styles = that._getStyle();\n\n    var coords = that.getMarkerCoords();\n    var innerRadius = coords.innerRadius;\n    var outerRadius = coords.outerRadius;\n\n    var start = that._getCoords(that.argument, CANVAS_POSITION_DEFAULT);\n\n    var x = coords.x;\n    var y = coords.y;\n\n    if (animationEnabled) {\n      innerRadius = 0;\n      outerRadius = 0;\n      x = start.x;\n      y = start.y;\n    }\n\n    that.graphic = renderer.arc(x, y, innerRadius, outerRadius, coords.startAngle, coords.endAngle).attr(styles).data({\n      \"chart-data-point\": that\n    }).append(group);\n  },\n  _checkLabelPosition: function (label, coord) {\n    var that = this;\n\n    var visibleArea = that._getVisibleArea();\n\n    var angleFunctions = vizUtils.getCosAndSin(that.middleAngle);\n    var x = that.centerX + that.defaultRadius * angleFunctions.cos;\n    var y = that.centerY - that.defaultRadius * angleFunctions.sin;\n\n    if (x > visibleArea.minX && x < visibleArea.maxX && y > visibleArea.minY && y < visibleArea.maxY) {\n      coord = that._moveLabelOnCanvas(coord, visibleArea, label.getBoundingRect());\n    }\n\n    return coord;\n  },\n  _addLabelAlignmentAndOffset: function (label, coord) {\n    return coord;\n  },\n  correctCoordinates: function (correctOptions) {\n    this.middleAngleCorrection = correctOptions.offset;\n    this.interval = correctOptions.width;\n  },\n  coordsIn: function (x, y) {\n    var val = vizUtils.convertXYToPolar(this.series.getValueAxis().getCenter(), x, y);\n    var coords = this.getMarkerCoords();\n    var isBetweenAngles = coords.startAngle < coords.endAngle ? -val.phi >= coords.startAngle && -val.phi <= coords.endAngle : -val.phi <= coords.startAngle && -val.phi >= coords.endAngle;\n    return val.r >= coords.innerRadius && val.r <= coords.outerRadius && isBetweenAngles;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}