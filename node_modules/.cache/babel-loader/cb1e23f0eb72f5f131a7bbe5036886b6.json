{"ast":null,"code":"/**\r\n * DevExtreme (data/utils.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _dom_adapter = require(\"../core/dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _ready_callbacks = require(\"../core/utils/ready_callbacks\");\n\nvar _window = require(\"../core/utils/window\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nvar _common = require(\"../core/utils/common\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(n);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar XHR_ERROR_UNLOAD = \"DEVEXTREME_XHR_ERROR_UNLOAD\";\n\nvar normalizeBinaryCriterion = function (crit) {\n  return [crit[0], crit.length < 3 ? \"=\" : String(crit[1]).toLowerCase(), crit.length < 2 ? true : crit[crit.length - 1]];\n};\n\nvar normalizeSortingInfo = function (info) {\n  if (!Array.isArray(info)) {\n    info = [info];\n  }\n\n  return (0, _iterator.map)(info, function (i) {\n    var result = {\n      selector: (0, _type.isFunction)(i) || \"string\" === typeof i ? i : i.getter || i.field || i.selector,\n      desc: !!(i.desc || \"d\" === String(i.dir).charAt(0).toLowerCase())\n    };\n\n    if (i.compare) {\n      result.compare = i.compare;\n    }\n\n    return result;\n  });\n};\n\nvar errorMessageFromXhr = function () {\n  var textStatusMessages = {\n    timeout: \"Network connection timeout\",\n    error: \"Unspecified network error\",\n    parsererror: \"Unexpected server response\"\n  };\n\n  var explainTextStatus = function (textStatus) {\n    var result = textStatusMessages[textStatus];\n\n    if (!result) {\n      return textStatus;\n    }\n\n    return result;\n  };\n\n  var unloading;\n  (0, _ready_callbacks.add)(function () {\n    var window = (0, _window.getWindow)();\n\n    _dom_adapter2.default.listen(window, \"beforeunload\", function () {\n      unloading = true;\n    });\n  });\n  return function (xhr, textStatus) {\n    if (unloading) {\n      return XHR_ERROR_UNLOAD;\n    }\n\n    if (xhr.status < 400) {\n      return explainTextStatus(textStatus);\n    }\n\n    return xhr.statusText;\n  };\n}();\n\nvar aggregators = {\n  count: {\n    seed: 0,\n    step: function (count) {\n      return 1 + count;\n    }\n  },\n  sum: {\n    seed: 0,\n    step: function (sum, item) {\n      return sum + item;\n    }\n  },\n  min: {\n    step: function (min, item) {\n      return item < min ? item : min;\n    }\n  },\n  max: {\n    step: function (max, item) {\n      return item > max ? item : max;\n    }\n  },\n  avg: {\n    seed: [0, 0],\n    step: function (pair, value) {\n      return [pair[0] + value, pair[1] + 1];\n    },\n    finalize: function (pair) {\n      return pair[1] ? pair[0] / pair[1] : NaN;\n    }\n  }\n};\n\nvar processRequestResultLock = function () {\n  var lockCount = 0;\n  var lockDeferred;\n\n  var obtain = function () {\n    if (0 === lockCount) {\n      lockDeferred = new _deferred.Deferred();\n    }\n\n    lockCount++;\n  };\n\n  var release = function () {\n    lockCount--;\n\n    if (lockCount < 1) {\n      lockDeferred.resolve();\n    }\n  };\n\n  var promise = function () {\n    var deferred = 0 === lockCount ? new _deferred.Deferred().resolve() : lockDeferred;\n    return deferred.promise();\n  };\n\n  var reset = function () {\n    lockCount = 0;\n\n    if (lockDeferred) {\n      lockDeferred.resolve();\n    }\n  };\n\n  return {\n    obtain: obtain,\n    release: release,\n    promise: promise,\n    reset: reset\n  };\n}();\n\nfunction isDisjunctiveOperator(condition) {\n  return /^(or|\\|\\||\\|)$/i.test(condition);\n}\n\nfunction isConjunctiveOperator(condition) {\n  return /^(and|&&|&)$/i.test(condition);\n}\n\nvar keysEqual = function (key1, key2) {\n  return (0, _common.equalByValue)(key1, key2, 0, false);\n};\n\nvar BASE64_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nvar base64_encode = function (input) {\n  if (!Array.isArray(input)) {\n    input = stringToByteArray(String(input));\n  }\n\n  var result = \"\";\n\n  function getBase64Char(index) {\n    return BASE64_CHARS.charAt(index);\n  }\n\n  for (var i = 0; i < input.length; i += 3) {\n    var octet1 = input[i];\n    var octet2 = input[i + 1];\n    var octet3 = input[i + 2];\n    result += (0, _iterator.map)([octet1 >> 2, (3 & octet1) << 4 | octet2 >> 4, isNaN(octet2) ? 64 : (15 & octet2) << 2 | octet3 >> 6, isNaN(octet3) ? 64 : 63 & octet3], getBase64Char).join(\"\");\n  }\n\n  return result;\n};\n\nvar stringToByteArray = function (str) {\n  var bytes = [];\n  var code;\n  var i;\n\n  for (i = 0; i < str.length; i++) {\n    code = str.charCodeAt(i);\n\n    if (code < 128) {\n      bytes.push(code);\n    } else {\n      if (code < 2048) {\n        bytes.push(192 + (code >> 6), 128 + (63 & code));\n      } else {\n        if (code < 65536) {\n          bytes.push(224 + (code >> 12), 128 + (code >> 6 & 63), 128 + (63 & code));\n        } else {\n          if (code < 2097152) {\n            bytes.push(240 + (code >> 18), 128 + (code >> 12 & 63), 128 + (code >> 6 & 63), 128 + (63 & code));\n          }\n        }\n      }\n    }\n  }\n\n  return bytes;\n};\n\nvar isUnaryOperation = function (crit) {\n  return \"!\" === crit[0] && Array.isArray(crit[1]);\n};\n\nvar isGroupOperator = function (value) {\n  return \"and\" === value || \"or\" === value;\n};\n\nvar isGroupCriterion = function (crit) {\n  var first = crit[0];\n  var second = crit[1];\n\n  if (Array.isArray(first)) {\n    return true;\n  }\n\n  if (_type2.default.isFunction(first)) {\n    if (Array.isArray(second) || _type2.default.isFunction(second) || isGroupOperator(second)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar trivialPromise = function () {\n  var d = new _deferred.Deferred();\n  return d.resolve.apply(d, arguments).promise();\n};\n\nvar rejectedPromise = function () {\n  var d = new _deferred.Deferred();\n  return d.reject.apply(d, arguments).promise();\n};\n\nfunction throttle(func, timeout) {\n  var timeoutId;\n  var lastArgs;\n  return function () {\n    var _this = this;\n\n    lastArgs = arguments;\n\n    if (!timeoutId) {\n      timeoutId = setTimeout(function () {\n        timeoutId = void 0;\n\n        if (lastArgs) {\n          func.call(_this, lastArgs);\n        }\n      }, (0, _type.isFunction)(timeout) ? timeout() : timeout);\n    }\n\n    return timeoutId;\n  };\n}\n\nfunction throttleChanges(func, timeout) {\n  var cache = [];\n  var throttled = throttle(function () {\n    func.call(this, cache);\n    cache = [];\n  }, timeout);\n  return function (changes) {\n    if (Array.isArray(changes)) {\n      var _cache;\n\n      (_cache = cache).push.apply(_cache, _toConsumableArray(changes));\n    }\n\n    return throttled.call(this, cache);\n  };\n}\n\nvar utils = {\n  XHR_ERROR_UNLOAD: XHR_ERROR_UNLOAD,\n  normalizeBinaryCriterion: normalizeBinaryCriterion,\n  normalizeSortingInfo: normalizeSortingInfo,\n  errorMessageFromXhr: errorMessageFromXhr,\n  aggregators: aggregators,\n  keysEqual: keysEqual,\n  throttleChanges: throttleChanges,\n  trivialPromise: trivialPromise,\n  rejectedPromise: rejectedPromise,\n  isDisjunctiveOperator: isDisjunctiveOperator,\n  isConjunctiveOperator: isConjunctiveOperator,\n  processRequestResultLock: processRequestResultLock,\n  isUnaryOperation: isUnaryOperation,\n  isGroupCriterion: isGroupCriterion,\n  base64_encode: base64_encode\n};\nmodule.exports = utils;","map":null,"metadata":{},"sourceType":"script"}