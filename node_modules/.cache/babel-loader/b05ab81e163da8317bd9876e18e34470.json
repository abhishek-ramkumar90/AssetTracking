{"ast":null,"code":"/**\r\n * DevExtreme (data/array_utils.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _type = require(\"../core/utils/type\");\n\nvar _config = require(\"../core/config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _guid = require(\"../core/guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _errors = require(\"./errors\");\n\nvar _object = require(\"../core/utils/object\");\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction hasKey(target, keyOrKeys) {\n  var key;\n  var keys = \"string\" === typeof keyOrKeys ? keyOrKeys.split() : keyOrKeys.slice();\n\n  while (keys.length) {\n    key = keys.shift();\n\n    if (key in target) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction findItems(keyInfo, items, key, groupCount) {\n  var childItems;\n  var result;\n\n  if (groupCount) {\n    for (var i = 0; i < items.length; i++) {\n      childItems = items[i].items || items[i].collapsedItems || [];\n      result = findItems(keyInfo, childItems || [], key, groupCount - 1);\n\n      if (result) {\n        return result;\n      }\n    }\n  } else {\n    if (indexByKey(keyInfo, items, key) >= 0) {\n      return items;\n    }\n  }\n}\n\nfunction getItems(keyInfo, items, key, groupCount) {\n  if (groupCount) {\n    return findItems(keyInfo, items, key, groupCount) || [];\n  }\n\n  return items;\n}\n\nfunction generateDataByKeyMap(keyInfo, array) {\n  if (keyInfo.key() && (!array._dataByKeyMap || array._dataByKeyMapLength !== array.length)) {\n    var dataByKeyMap = {};\n\n    for (var i = 0, arrayLength = array.length; i < arrayLength; i++) {\n      dataByKeyMap[JSON.stringify(keyInfo.keyOf(array[i]))] = array[i];\n    }\n\n    array._dataByKeyMap = dataByKeyMap;\n    array._dataByKeyMapLength = arrayLength;\n  }\n}\n\nfunction getCacheValue(array, key) {\n  if (array._dataByKeyMap) {\n    return array._dataByKeyMap[JSON.stringify(key)];\n  }\n}\n\nfunction getHasKeyCacheValue(array, key) {\n  if (array._dataByKeyMap) {\n    return array._dataByKeyMap[JSON.stringify(key)];\n  }\n\n  return true;\n}\n\nfunction setDataByKeyMapValue(array, key, data) {\n  if (array._dataByKeyMap) {\n    array._dataByKeyMap[JSON.stringify(key)] = data;\n  }\n}\n\nfunction applyBatch(keyInfo, array, batchData, groupCount, useInsertIndex) {\n  batchData.forEach(function (item) {\n    var items = \"insert\" === item.type ? array : getItems(keyInfo, array, item.key, groupCount);\n    generateDataByKeyMap(keyInfo, items);\n\n    switch (item.type) {\n      case \"update\":\n        update(keyInfo, items, item.key, item.data, true);\n        break;\n\n      case \"insert\":\n        insert(keyInfo, items, item.data, useInsertIndex && (0, _type.isDefined)(item.index) ? item.index : -1, true);\n        break;\n\n      case \"remove\":\n        remove(keyInfo, items, item.key, true);\n    }\n  });\n}\n\nfunction update(keyInfo, array, key, data, isBatch) {\n  var target;\n  var extendComplexObject = true;\n  var keyExpr = keyInfo.key();\n\n  if (keyExpr) {\n    if (hasKey(data, keyExpr) && !(0, _utils.keysEqual)(key, keyInfo.keyOf(data))) {\n      return !isBatch && (0, _utils.rejectedPromise)(_errors.errors.Error(\"E4017\"));\n    }\n\n    target = getCacheValue(array, key);\n\n    if (!target) {\n      var index = indexByKey(keyInfo, array, key);\n\n      if (index < 0) {\n        return !isBatch && (0, _utils.rejectedPromise)(_errors.errors.Error(\"E4009\"));\n      }\n\n      target = array[index];\n    }\n  } else {\n    target = key;\n  }\n\n  _object2.default.deepExtendArraySafe(target, data, extendComplexObject);\n\n  if (!isBatch) {\n    if ((0, _config2.default)().useLegacyStoreResult) {\n      return (0, _utils.trivialPromise)(key, data);\n    } else {\n      return (0, _utils.trivialPromise)(target, key);\n    }\n  }\n}\n\nfunction insert(keyInfo, array, data, index, isBatch) {\n  var keyValue;\n  var obj;\n  var keyExpr = keyInfo.key();\n  obj = (0, _type.isPlainObject)(data) ? (0, _extend.extend)({}, data) : data;\n\n  if (keyExpr) {\n    keyValue = keyInfo.keyOf(obj);\n\n    if (void 0 === keyValue || \"object\" === _typeof(keyValue) && (0, _type.isEmptyObject)(keyValue)) {\n      if (Array.isArray(keyExpr)) {\n        throw _errors.errors.Error(\"E4007\");\n      }\n\n      keyValue = obj[keyExpr] = String(new _guid2.default());\n    } else {\n      if (void 0 !== array[indexByKey(keyInfo, array, keyValue)]) {\n        return !isBatch && (0, _utils.rejectedPromise)(_errors.errors.Error(\"E4008\"));\n      }\n    }\n  } else {\n    keyValue = obj;\n  }\n\n  if (index >= 0) {\n    array.splice(index, 0, obj);\n  } else {\n    array.push(obj);\n  }\n\n  setDataByKeyMapValue(array, keyValue, obj);\n\n  if (!isBatch) {\n    return (0, _utils.trivialPromise)((0, _config2.default)().useLegacyStoreResult ? data : obj, keyValue);\n  }\n}\n\nfunction remove(keyInfo, array, key, isBatch) {\n  var index = indexByKey(keyInfo, array, key);\n\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n\n  if (!isBatch) {\n    return (0, _utils.trivialPromise)(key);\n  }\n}\n\nfunction indexByKey(keyInfo, array, key) {\n  if (!getHasKeyCacheValue(array, key)) {\n    return -1;\n  }\n\n  for (var i = 0, arrayLength = array.length; i < arrayLength; i++) {\n    if ((0, _utils.keysEqual)(keyInfo.keyOf(array[i]), key)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports.applyBatch = applyBatch;\nmodule.exports.update = update;\nmodule.exports.insert = insert;\nmodule.exports.remove = remove;\nmodule.exports.indexByKey = indexByKey;","map":null,"metadata":{},"sourceType":"script"}