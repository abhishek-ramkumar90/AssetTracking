{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/deferred.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar typeUtils = require(\"../utils/type\");\n\nvar isPromise = typeUtils.isPromise;\nvar isDeferred = typeUtils.isDeferred;\n\nvar extend = require(\"../utils/extend\").extend;\n\nvar Callbacks = require(\"../utils/callbacks\");\n\nvar deferredConfig = [{\n  method: \"resolve\",\n  handler: \"done\",\n  state: \"resolved\"\n}, {\n  method: \"reject\",\n  handler: \"fail\",\n  state: \"rejected\"\n}, {\n  method: \"notify\",\n  handler: \"progress\"\n}];\n\nvar _Deferred = function () {\n  var that = this;\n  this._state = \"pending\";\n  this._promise = {};\n  deferredConfig.forEach(function (config) {\n    var methodName = config.method;\n    this[methodName + \"Callbacks\"] = new Callbacks();\n\n    this[methodName] = function () {\n      return this[methodName + \"With\"](this._promise, arguments);\n    }.bind(this);\n\n    this._promise[config.handler] = function (handler) {\n      if (!handler) {\n        return this;\n      }\n\n      var callbacks = that[methodName + \"Callbacks\"];\n\n      if (callbacks.fired()) {\n        handler.apply(that[methodName + \"Context\"], that[methodName + \"Args\"]);\n      } else {\n        callbacks.add(function (context, args) {\n          handler.apply(context, args);\n        }.bind(this));\n      }\n\n      return this;\n    };\n  }.bind(this));\n\n  this._promise.always = function (handler) {\n    return this.done(handler).fail(handler);\n  };\n\n  this._promise.catch = function (handler) {\n    return this.then(null, handler);\n  };\n\n  this._promise.then = function (resolve, reject) {\n    var result = new _Deferred();\n    [\"done\", \"fail\"].forEach(function (method) {\n      var callback = \"done\" === method ? resolve : reject;\n      this[method](function () {\n        if (!callback) {\n          result[\"done\" === method ? \"resolve\" : \"reject\"].apply(this, arguments);\n          return;\n        }\n\n        var callbackResult = callback && callback.apply(this, arguments);\n\n        if (isDeferred(callbackResult)) {\n          callbackResult.done(result.resolve).fail(result.reject);\n        } else {\n          if (isPromise(callbackResult)) {\n            callbackResult.then(result.resolve, result.reject);\n          } else {\n            result.resolve.apply(this, typeUtils.isDefined(callbackResult) ? [callbackResult] : arguments);\n          }\n        }\n      });\n    }.bind(this));\n    return result.promise();\n  };\n\n  this._promise.state = function () {\n    return that._state;\n  };\n\n  this._promise.promise = function (args) {\n    return args ? extend(args, that._promise) : that._promise;\n  };\n\n  this._promise.promise(this);\n};\n\ndeferredConfig.forEach(function (config) {\n  var methodName = config.method;\n  var state = config.state;\n\n  _Deferred.prototype[methodName + \"With\"] = function (context, args) {\n    var callbacks = this[methodName + \"Callbacks\"];\n\n    if (\"pending\" === this.state()) {\n      this[methodName + \"Args\"] = args;\n      this[methodName + \"Context\"] = context;\n\n      if (state) {\n        this._state = state;\n      }\n\n      callbacks.fire(context, args);\n    }\n\n    return this;\n  };\n});\n\nexports.fromPromise = function (promise, context) {\n  if (isDeferred(promise)) {\n    return promise;\n  } else {\n    if (isPromise(promise)) {\n      var d = new _Deferred();\n      promise.then(function () {\n        d.resolveWith.apply(d, [context].concat([[].slice.call(arguments)]));\n      }, function () {\n        d.rejectWith.apply(d, [context].concat([[].slice.call(arguments)]));\n      });\n      return d;\n    }\n  }\n\n  return new _Deferred().resolveWith(context, [promise]);\n};\n\nvar when = function () {\n  if (1 === arguments.length) {\n    return exports.fromPromise(arguments[0]);\n  }\n\n  var values = [].slice.call(arguments);\n  var contexts = [];\n  var resolvedCount = 0;\n  var deferred = new _Deferred();\n\n  var updateState = function (i) {\n    return function (value) {\n      contexts[i] = this;\n      values[i] = arguments.length > 1 ? [].slice.call(arguments) : value;\n      resolvedCount++;\n\n      if (resolvedCount === values.length) {\n        deferred.resolveWith(contexts, values);\n      }\n    };\n  };\n\n  for (var i = 0; i < values.length; i++) {\n    if (isDeferred(values[i])) {\n      values[i].promise().done(updateState(i)).fail(deferred.reject);\n    } else {\n      resolvedCount++;\n    }\n  }\n\n  if (resolvedCount === values.length) {\n    deferred.resolveWith(contexts, values);\n  }\n\n  return deferred.promise();\n};\n\nexports.setStrategy = function (value) {\n  _Deferred = value.Deferred;\n  when = value.when;\n};\n\nexports.Deferred = function () {\n  return new _Deferred();\n};\n\nexports.when = function () {\n  return when.apply(this, arguments);\n};","map":null,"metadata":{},"sourceType":"script"}