{"ast":null,"code":"/**\r\n * DevExtreme (data/data_source/data_source.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Class = require(\"../../core/class\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar commonUtils = require(\"../../core/utils/common\");\n\nvar iteratorUtils = require(\"../../core/utils/iterator\");\n\nvar ajax = require(\"../../core/utils/ajax\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar dataUtils = require(\"../utils\");\n\nvar arrayUtils = require(\"../array_utils\");\n\nvar Store = require(\"../abstract_store\");\n\nvar ArrayStore = require(\"../array_store\");\n\nvar CustomStore = require(\"../custom_store\");\n\nvar EventsMixin = require(\"../../core/events_mixin\");\n\nvar errors = require(\"../errors\").errors;\n\nvar array = require(\"../../core/utils/array\");\n\nvar queue = require(\"../../core/utils/queue\");\n\nvar deferredUtils = require(\"../../core/utils/deferred\");\n\nvar when = deferredUtils.when;\nvar Deferred = deferredUtils.Deferred;\nvar __isString = typeUtils.isString;\nvar __isNumber = typeUtils.isNumeric;\nvar __isBoolean = typeUtils.isBoolean;\nvar __isDefined = typeUtils.isDefined;\nvar CANCELED_TOKEN = \"canceled\";\n\nfunction OperationManager() {\n  this._counter = -1;\n  this._deferreds = {};\n}\n\nOperationManager.prototype.constructor = OperationManager;\n\nOperationManager.prototype.add = function (deferred) {\n  this._counter += 1;\n  this._deferreds[this._counter] = deferred;\n  return this._counter;\n};\n\nOperationManager.prototype.remove = function (operationId) {\n  return delete this._deferreds[operationId];\n};\n\nOperationManager.prototype.cancel = function (operationId) {\n  if (operationId in this._deferreds) {\n    this._deferreds[operationId].reject(CANCELED_TOKEN);\n\n    return true;\n  }\n\n  return false;\n};\n\nOperationManager.prototype.cancelAll = function () {\n  while (this._counter > -1) {\n    this.cancel(this._counter);\n    this._counter--;\n  }\n};\n\nfunction isPending(deferred) {\n  return \"pending\" === deferred.state();\n}\n\nfunction normalizeDataSourceOptions(options, normalizationOptions) {\n  var store;\n\n  function createCustomStoreFromLoadFunc() {\n    var storeConfig = {};\n    iteratorUtils.each([\"useDefaultSearch\", \"key\", \"load\", \"loadMode\", \"cacheRawData\", \"byKey\", \"lookup\", \"totalCount\", \"insert\", \"update\", \"remove\"], function () {\n      storeConfig[this] = options[this];\n      delete options[this];\n    });\n    return new CustomStore(storeConfig);\n  }\n\n  function createStoreFromConfig(storeConfig) {\n    var alias = storeConfig.type;\n    delete storeConfig.type;\n    return Store.create(alias, storeConfig);\n  }\n\n  function createCustomStoreFromUrl(url) {\n    return new CustomStore({\n      load: function () {\n        return ajax.sendRequest({\n          url: url,\n          dataType: \"json\"\n        });\n      },\n      loadMode: normalizationOptions && normalizationOptions.fromUrlLoadMode\n    });\n  }\n\n  if (\"string\" === typeof options) {\n    options = {\n      paginate: false,\n      store: createCustomStoreFromUrl(options)\n    };\n  }\n\n  if (void 0 === options) {\n    options = [];\n  }\n\n  if (Array.isArray(options) || options instanceof Store) {\n    options = {\n      store: options\n    };\n  } else {\n    options = extend({}, options);\n  }\n\n  if (void 0 === options.store) {\n    options.store = [];\n  }\n\n  store = options.store;\n\n  if (\"load\" in options) {\n    store = createCustomStoreFromLoadFunc();\n  } else {\n    if (Array.isArray(store)) {\n      store = new ArrayStore(store);\n    } else {\n      if (typeUtils.isPlainObject(store)) {\n        store = createStoreFromConfig(extend({}, store));\n      }\n    }\n  }\n\n  options.store = store;\n  return options;\n}\n\nfunction normalizeStoreLoadOptionAccessorArguments(originalArguments) {\n  switch (originalArguments.length) {\n    case 0:\n      return;\n\n    case 1:\n      return originalArguments[0];\n  }\n\n  return [].slice.call(originalArguments);\n}\n\nfunction generateStoreLoadOptionAccessor(optionName) {\n  return function () {\n    var args = normalizeStoreLoadOptionAccessorArguments(arguments);\n\n    if (void 0 === args) {\n      return this._storeLoadOptions[optionName];\n    }\n\n    this._storeLoadOptions[optionName] = args;\n  };\n}\n\nfunction mapDataRespectingGrouping(items, mapper, groupInfo) {\n  function mapRecursive(items, level) {\n    if (!Array.isArray(items)) {\n      return items;\n    }\n\n    return level ? mapGroup(items, level) : iteratorUtils.map(items, mapper);\n  }\n\n  function mapGroup(group, level) {\n    return iteratorUtils.map(group, function (item) {\n      var result = {\n        key: item.key,\n        items: mapRecursive(item.items, level - 1)\n      };\n\n      if (\"aggregates\" in item) {\n        result.aggregates = item.aggregates;\n      }\n\n      return result;\n    });\n  }\n\n  return mapRecursive(items, groupInfo ? dataUtils.normalizeSortingInfo(groupInfo).length : 0);\n}\n\nfunction normalizeLoadResult(data, extra) {\n  if (data && !Array.isArray(data) && data.data) {\n    extra = data;\n    data = data.data;\n  }\n\n  if (!Array.isArray(data)) {\n    data = [data];\n  }\n\n  return {\n    data: data,\n    extra: extra\n  };\n}\n\nvar DataSource = Class.inherit({\n  ctor: function (options) {\n    var _this = this;\n\n    var that = this;\n    options = normalizeDataSourceOptions(options);\n    var onPushHandler = 0 !== options.pushAggregationTimeout ? dataUtils.throttleChanges(this._onPush, function () {\n      if (void 0 === options.pushAggregationTimeout) {\n        return 5 * that._changedTime;\n      }\n\n      return options.pushAggregationTimeout;\n    }) : this._onPush;\n    this._changedTime = 0;\n\n    this._onPushHandler = function (changes) {\n      _this._aggregationTimeoutId = onPushHandler.call(_this, changes);\n    };\n\n    this._store = options.store;\n\n    this._store.on(\"push\", this._onPushHandler);\n\n    this._storeLoadOptions = this._extractLoadOptions(options);\n    this._mapFunc = options.map;\n    this._postProcessFunc = options.postProcess;\n    this._pageIndex = void 0 !== options.pageIndex ? options.pageIndex : 0;\n    this._pageSize = void 0 !== options.pageSize ? options.pageSize : 20;\n    this._loadingCount = 0;\n    this._loadQueue = this._createLoadQueue();\n    this._searchValue = \"searchValue\" in options ? options.searchValue : null;\n    this._searchOperation = options.searchOperation || \"contains\";\n    this._searchExpr = options.searchExpr;\n    this._paginate = options.paginate;\n    this._reshapeOnPush = __isDefined(options.reshapeOnPush) ? options.reshapeOnPush : false;\n    iteratorUtils.each([\"onChanged\", \"onLoadError\", \"onLoadingChanged\", \"onCustomizeLoadResult\", \"onCustomizeStoreLoadOptions\"], function (_, optionName) {\n      if (optionName in options) {\n        that.on(optionName.substr(2, 1).toLowerCase() + optionName.substr(3), options[optionName]);\n      }\n    });\n    this._operationManager = new OperationManager();\n\n    this._init();\n  },\n  _init: function () {\n    this._items = [];\n    this._userData = {};\n    this._totalCount = -1;\n    this._isLoaded = false;\n\n    if (!__isDefined(this._paginate)) {\n      this._paginate = !this.group();\n    }\n\n    this._isLastPage = !this._paginate;\n  },\n  dispose: function () {\n    this._store.off(\"push\", this._onPushHandler);\n\n    this._disposeEvents();\n\n    clearTimeout(this._aggregationTimeoutId);\n    delete this._store;\n\n    if (this._delayedLoadTask) {\n      this._delayedLoadTask.abort();\n    }\n\n    this._operationManager.cancelAll();\n\n    this._disposed = true;\n  },\n  _extractLoadOptions: function (options) {\n    var result = {};\n    var names = [\"sort\", \"filter\", \"select\", \"group\", \"requireTotalCount\"];\n\n    var customNames = this._store._customLoadOptions();\n\n    if (customNames) {\n      names = names.concat(customNames);\n    }\n\n    iteratorUtils.each(names, function () {\n      result[this] = options[this];\n    });\n    return result;\n  },\n  loadOptions: function () {\n    return this._storeLoadOptions;\n  },\n  items: function () {\n    return this._items;\n  },\n  pageIndex: function (newIndex) {\n    if (!__isNumber(newIndex)) {\n      return this._pageIndex;\n    }\n\n    this._pageIndex = newIndex;\n    this._isLastPage = !this._paginate;\n  },\n  paginate: function (value) {\n    if (!__isBoolean(value)) {\n      return this._paginate;\n    }\n\n    if (this._paginate !== value) {\n      this._paginate = value;\n      this.pageIndex(0);\n    }\n  },\n  pageSize: function (value) {\n    if (!__isNumber(value)) {\n      return this._pageSize;\n    }\n\n    this._pageSize = value;\n  },\n  isLastPage: function () {\n    return this._isLastPage;\n  },\n  sort: generateStoreLoadOptionAccessor(\"sort\"),\n  filter: function () {\n    var newFilter = normalizeStoreLoadOptionAccessorArguments(arguments);\n\n    if (void 0 === newFilter) {\n      return this._storeLoadOptions.filter;\n    }\n\n    this._storeLoadOptions.filter = newFilter;\n    this.pageIndex(0);\n  },\n  group: generateStoreLoadOptionAccessor(\"group\"),\n  select: generateStoreLoadOptionAccessor(\"select\"),\n  requireTotalCount: function (value) {\n    if (!__isBoolean(value)) {\n      return this._storeLoadOptions.requireTotalCount;\n    }\n\n    this._storeLoadOptions.requireTotalCount = value;\n  },\n  searchValue: function (value) {\n    if (arguments.length < 1) {\n      return this._searchValue;\n    }\n\n    this._searchValue = value;\n    this.pageIndex(0);\n  },\n  searchOperation: function (op) {\n    if (!__isString(op)) {\n      return this._searchOperation;\n    }\n\n    this._searchOperation = op;\n    this.pageIndex(0);\n  },\n  searchExpr: function (expr) {\n    var argc = arguments.length;\n\n    if (0 === argc) {\n      return this._searchExpr;\n    }\n\n    if (argc > 1) {\n      expr = [].slice.call(arguments);\n    }\n\n    this._searchExpr = expr;\n    this.pageIndex(0);\n  },\n  store: function () {\n    return this._store;\n  },\n  key: function () {\n    return this._store && this._store.key();\n  },\n  totalCount: function () {\n    return this._totalCount;\n  },\n  isLoaded: function () {\n    return this._isLoaded;\n  },\n  isLoading: function () {\n    return this._loadingCount > 0;\n  },\n  beginLoading: function () {\n    this._changeLoadingCount(1);\n  },\n  endLoading: function () {\n    this._changeLoadingCount(-1);\n  },\n  _createLoadQueue: function () {\n    return queue.create();\n  },\n  _changeLoadingCount: function (increment) {\n    var oldLoading = this.isLoading();\n    var newLoading;\n    this._loadingCount += increment;\n    newLoading = this.isLoading();\n\n    if (oldLoading ^ newLoading) {\n      this.fireEvent(\"loadingChanged\", [newLoading]);\n    }\n  },\n  _scheduleLoadCallbacks: function (deferred) {\n    var that = this;\n    that.beginLoading();\n    deferred.always(function () {\n      that.endLoading();\n    });\n  },\n  _scheduleFailCallbacks: function (deferred) {\n    var that = this;\n    deferred.fail(function () {\n      if (arguments[0] === CANCELED_TOKEN) {\n        return;\n      }\n\n      that.fireEvent(\"loadError\", arguments);\n    });\n  },\n  _fireChanged: function (args) {\n    var date = new Date();\n    this.fireEvent(\"changed\", args);\n    this._changedTime = new Date() - date;\n  },\n  _scheduleChangedCallbacks: function (deferred) {\n    var _this2 = this;\n\n    deferred.done(function () {\n      _this2._fireChanged();\n    });\n  },\n  loadSingle: function (propName, propValue) {\n    var that = this;\n    var d = new Deferred();\n    var key = this.key();\n    var store = this._store;\n\n    var options = this._createStoreLoadOptions();\n\n    var handleDone = function (data) {\n      if (!__isDefined(data) || array.isEmpty(data)) {\n        d.reject(new errors.Error(\"E4009\"));\n      } else {\n        if (!Array.isArray(data)) {\n          data = [data];\n        }\n\n        d.resolve(that._applyMapFunction(data)[0]);\n      }\n    };\n\n    this._scheduleFailCallbacks(d);\n\n    if (arguments.length < 2) {\n      propValue = propName;\n      propName = key;\n    }\n\n    delete options.skip;\n    delete options.group;\n    delete options.refresh;\n    delete options.pageIndex;\n    delete options.searchString;\n\n    function shouldForceByKey() {\n      return store instanceof CustomStore && !store._byKeyViaLoad();\n    }\n\n    (function () {\n      if (propName === key || shouldForceByKey()) {\n        return store.byKey(propValue, options);\n      }\n\n      options.take = 1;\n      options.filter = options.filter ? [options.filter, [propName, propValue]] : [propName, propValue];\n      return store.load(options);\n    })().fail(d.reject).done(handleDone);\n    return d.promise();\n  },\n  load: function () {\n    var that = this;\n    var d = new Deferred();\n    var loadOperation;\n\n    function loadTask() {\n      if (that._disposed) {\n        return;\n      }\n\n      if (!isPending(d)) {\n        return;\n      }\n\n      return that._loadFromStore(loadOperation, d);\n    }\n\n    this._scheduleLoadCallbacks(d);\n\n    this._scheduleFailCallbacks(d);\n\n    this._scheduleChangedCallbacks(d);\n\n    loadOperation = this._createLoadOperation(d);\n    this.fireEvent(\"customizeStoreLoadOptions\", [loadOperation]);\n\n    this._loadQueue.add(function () {\n      if (\"number\" === typeof loadOperation.delay) {\n        that._delayedLoadTask = commonUtils.executeAsync(loadTask, loadOperation.delay);\n      } else {\n        loadTask();\n      }\n\n      return d.promise();\n    });\n\n    return d.promise({\n      operationId: loadOperation.operationId\n    });\n  },\n  _onPush: function (changes) {\n    var _this3 = this;\n\n    if (this._reshapeOnPush) {\n      this.load();\n    } else {\n      this.fireEvent(\"changing\", [{\n        changes: changes\n      }]);\n      var group = this.group();\n      var items = this.items();\n      var groupLevel = 0;\n      var dataSourceChanges = this.paginate() || group ? changes.filter(function (item) {\n        return \"update\" === item.type;\n      }) : changes;\n\n      if (group) {\n        groupLevel = Array.isArray(group) ? group.length : 1;\n      }\n\n      if (this._mapFunc) {\n        dataSourceChanges.forEach(function (item) {\n          if (\"insert\" === item.type) {\n            item.data = _this3._mapFunc(item.data);\n          }\n        });\n      }\n\n      arrayUtils.applyBatch(this.store(), items, dataSourceChanges, groupLevel, true);\n\n      this._fireChanged([{\n        changes: changes\n      }]);\n    }\n  },\n  _createLoadOperation: function (deferred) {\n    var id = this._operationManager.add(deferred);\n\n    var options = this._createStoreLoadOptions();\n\n    deferred.always(function () {\n      this._operationManager.remove(id);\n    }.bind(this));\n    return {\n      operationId: id,\n      storeLoadOptions: options\n    };\n  },\n  reload: function () {\n    var store = this.store();\n\n    if (store instanceof CustomStore) {\n      store.clearRawDataCache();\n    }\n\n    this._init();\n\n    return this.load();\n  },\n  cancel: function (operationId) {\n    return this._operationManager.cancel(operationId);\n  },\n  cancelAll: function () {\n    return this._operationManager.cancelAll();\n  },\n  _addSearchOptions: function (storeLoadOptions) {\n    if (this._disposed) {\n      return;\n    }\n\n    if (this.store()._useDefaultSearch) {\n      this._addSearchFilter(storeLoadOptions);\n    } else {\n      storeLoadOptions.searchOperation = this._searchOperation;\n      storeLoadOptions.searchValue = this._searchValue;\n      storeLoadOptions.searchExpr = this._searchExpr;\n    }\n  },\n  _createStoreLoadOptions: function () {\n    var result = extend({}, this._storeLoadOptions);\n\n    this._addSearchOptions(result);\n\n    if (this._paginate) {\n      if (this._pageSize) {\n        result.skip = this._pageIndex * this._pageSize;\n        result.take = this._pageSize;\n      }\n    }\n\n    result.userData = this._userData;\n    return result;\n  },\n  _addSearchFilter: function (storeLoadOptions) {\n    var value = this._searchValue;\n    var op = this._searchOperation;\n    var selector = this._searchExpr;\n    var searchFilter = [];\n\n    if (!value) {\n      return;\n    }\n\n    if (!selector) {\n      selector = \"this\";\n    }\n\n    if (!Array.isArray(selector)) {\n      selector = [selector];\n    }\n\n    iteratorUtils.each(selector, function (i, item) {\n      if (searchFilter.length) {\n        searchFilter.push(\"or\");\n      }\n\n      searchFilter.push([item, op, value]);\n    });\n\n    if (storeLoadOptions.filter) {\n      storeLoadOptions.filter = [searchFilter, storeLoadOptions.filter];\n    } else {\n      storeLoadOptions.filter = searchFilter;\n    }\n  },\n  _loadFromStore: function (loadOptions, pendingDeferred) {\n    var that = this;\n\n    function handleSuccess(data, extra) {\n      function processResult() {\n        var loadResult = extend(normalizeLoadResult(data, extra), loadOptions);\n        that.fireEvent(\"customizeLoadResult\", [loadResult]);\n        when(loadResult.data).done(function (data) {\n          loadResult.data = data;\n\n          that._processStoreLoadResult(loadResult, pendingDeferred);\n        }).fail(pendingDeferred.reject);\n      }\n\n      if (that._disposed) {\n        return;\n      }\n\n      if (!isPending(pendingDeferred)) {\n        return;\n      }\n\n      processResult();\n    }\n\n    if (loadOptions.data) {\n      return new Deferred().resolve(loadOptions.data).done(handleSuccess);\n    }\n\n    return this.store().load(loadOptions.storeLoadOptions).done(handleSuccess).fail(pendingDeferred.reject);\n  },\n  _processStoreLoadResult: function (loadResult, pendingDeferred) {\n    var that = this;\n    var data = loadResult.data;\n    var extra = loadResult.extra;\n    var storeLoadOptions = loadResult.storeLoadOptions;\n\n    function resolvePendingDeferred() {\n      that._isLoaded = true;\n      that._totalCount = isFinite(extra.totalCount) ? extra.totalCount : -1;\n      return pendingDeferred.resolve(data, extra);\n    }\n\n    function proceedLoadingTotalCount() {\n      that.store().totalCount(storeLoadOptions).done(function (count) {\n        extra.totalCount = count;\n        resolvePendingDeferred();\n      }).fail(pendingDeferred.reject);\n    }\n\n    if (that._disposed) {\n      return;\n    }\n\n    data = that._applyPostProcessFunction(that._applyMapFunction(data));\n\n    if (!typeUtils.isPlainObject(extra)) {\n      extra = {};\n    }\n\n    that._items = data;\n\n    if (!data.length || !that._paginate || that._pageSize && data.length < that._pageSize) {\n      that._isLastPage = true;\n    }\n\n    if (storeLoadOptions.requireTotalCount && !isFinite(extra.totalCount)) {\n      proceedLoadingTotalCount();\n    } else {\n      resolvePendingDeferred();\n    }\n  },\n  _applyMapFunction: function (data) {\n    if (this._mapFunc) {\n      return mapDataRespectingGrouping(data, this._mapFunc, this.group());\n    }\n\n    return data;\n  },\n  _applyPostProcessFunction: function (data) {\n    if (this._postProcessFunc) {\n      return this._postProcessFunc(data);\n    }\n\n    return data;\n  }\n}).include(EventsMixin);\nexports.DataSource = DataSource;\nexports.normalizeDataSourceOptions = normalizeDataSourceOptions;\nexports.normalizeLoadResult = normalizeLoadResult;","map":null,"metadata":{},"sourceType":"script"}