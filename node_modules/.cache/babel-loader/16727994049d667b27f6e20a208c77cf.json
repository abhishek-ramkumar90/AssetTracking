{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport { withRouter } from 'react-router-dom';\nimport ScrollBehavior from 'scroll-behavior';\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar DEV = process.env.NODE_ENV !== 'production';\nvar propTypes = {\n  scrollKey: PropTypes.string.isRequired,\n  shouldUpdateScroll: PropTypes.func,\n  children: PropTypes.element.isRequired\n};\nvar contextTypes = {\n  // This is necessary when rendering on the client. However, when rendering on\n  // the server, this container will do nothing, and thus does not require the\n  // scroll behavior context.\n  scrollBehavior: PropTypes.object\n};\n\nvar ScrollContainer = function (_React$Component) {\n  inherits(ScrollContainer, _React$Component);\n\n  function ScrollContainer(props, context) {\n    classCallCheck(this, ScrollContainer); // We don't re-register if the scroll key changes, so make sure we\n    // unregister with the initial scroll key just in case the user changes it.\n\n    var _this = possibleConstructorReturn(this, (ScrollContainer.__proto__ || Object.getPrototypeOf(ScrollContainer)).call(this, props, context));\n\n    _this.shouldUpdateScroll = function (prevRouterProps, routerProps) {\n      var shouldUpdateScroll = _this.props.shouldUpdateScroll;\n\n      if (!shouldUpdateScroll) {\n        return true;\n      } // Hack to allow accessing scrollBehavior._stateStorage.\n\n\n      return shouldUpdateScroll.call(_this.context.scrollBehavior.scrollBehavior, prevRouterProps, routerProps);\n    };\n\n    _this.scrollKey = props.scrollKey;\n    return _this;\n  }\n\n  createClass(ScrollContainer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.context.scrollBehavior.registerElement(this.props.scrollKey, ReactDOM.findDOMNode(this), this.shouldUpdateScroll); // Only keep around the current DOM node in development, as this is only\n      // for emitting the appropriate warning.\n\n      if (DEV) {\n        this.domNode = ReactDOM.findDOMNode(this);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      process.env.NODE_ENV !== 'production' ? warning(nextProps.scrollKey === this.props.scrollKey, '<ScrollContainer> does not support changing scrollKey.') : void 0;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (DEV) {\n        var prevDomNode = this.domNode;\n        this.domNode = ReactDOM.findDOMNode(this);\n        process.env.NODE_ENV !== 'production' ? warning(this.domNode === prevDomNode, '<ScrollContainer> does not support changing DOM node.') : void 0;\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.context.scrollBehavior.unregisterElement(this.scrollKey);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n  return ScrollContainer;\n}(React.Component);\n\nScrollContainer.propTypes = propTypes;\nScrollContainer.contextTypes = contextTypes;\nvar STATE_KEY_PREFIX = '@@scroll|';\n\nvar SessionStorage = function () {\n  function SessionStorage() {\n    classCallCheck(this, SessionStorage);\n  }\n\n  createClass(SessionStorage, [{\n    key: 'read',\n    value: function read(location, key) {\n      var stateKey = this.getStateKey(location, key);\n\n      try {\n        var value = sessionStorage.getItem(stateKey);\n        return JSON.parse(value);\n      } catch (e) {\n        return {};\n      }\n    }\n  }, {\n    key: 'save',\n    value: function save(location, key, value) {\n      var stateKey = this.getStateKey(location, key);\n      var storedValue = JSON.stringify(value);\n\n      try {\n        sessionStorage.setItem(stateKey, storedValue);\n      } catch (e) {}\n    }\n  }, {\n    key: 'getStateKey',\n    value: function getStateKey(location, key) {\n      var locationKey = location.key;\n      var stateKeyBase = '' + STATE_KEY_PREFIX + locationKey;\n      return key == null ? stateKeyBase : stateKeyBase + '|' + key;\n    }\n  }]);\n  return SessionStorage;\n}();\n\nvar propTypes$1 = {\n  shouldUpdateScroll: PropTypes.func,\n  children: PropTypes.element.isRequired,\n  location: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  scrollBehavior: PropTypes.func\n};\nvar childContextTypes = {\n  scrollBehavior: PropTypes.object.isRequired\n};\n\nvar ScrollContext = function (_React$Component) {\n  inherits(ScrollContext, _React$Component);\n\n  function ScrollContext(props, context) {\n    classCallCheck(this, ScrollContext);\n\n    var _this = possibleConstructorReturn(this, (ScrollContext.__proto__ || Object.getPrototypeOf(ScrollContext)).call(this, props, context));\n\n    _this.shouldUpdateScroll = function (prevRouterProps, routerProps) {\n      var shouldUpdateScroll = _this.props.shouldUpdateScroll;\n\n      if (!shouldUpdateScroll) {\n        return true;\n      } // Hack to allow accessing scrollBehavior._stateStorage.\n\n\n      return shouldUpdateScroll.call(_this.scrollBehavior, prevRouterProps, routerProps);\n    };\n\n    _this.registerElement = function (key, element, shouldUpdateScroll) {\n      _this.scrollBehavior.registerElement(key, element, shouldUpdateScroll, _this.getRouterProps());\n    };\n\n    _this.unregisterElement = function (key) {\n      _this.scrollBehavior.unregisterElement(key);\n    };\n\n    var history = props.history;\n    var ScrollBehaviorConstructor = _this.props.scrollBehavior || ScrollBehavior;\n    _this.scrollBehavior = new ScrollBehaviorConstructor({\n      addTransitionHook: history.listen,\n      stateStorage: new SessionStorage(),\n      getCurrentLocation: function getCurrentLocation() {\n        return _this.props.location;\n      },\n      shouldUpdateScroll: _this.shouldUpdateScroll\n    });\n\n    _this.scrollBehavior.updateScroll(null, _this.getRouterProps());\n\n    return _this;\n  }\n\n  createClass(ScrollContext, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        scrollBehavior: this\n      };\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          location = _props.location,\n          history = _props.history;\n      var prevLocation = prevProps.location;\n\n      if (location === prevLocation) {\n        return;\n      }\n\n      var prevRouterProps = {\n        history: prevProps.history,\n        location: prevProps.location\n      };\n      this.scrollBehavior.updateScroll(prevRouterProps, {\n        history: history,\n        location: location\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.scrollBehavior.stop();\n    }\n  }, {\n    key: 'getRouterProps',\n    value: function getRouterProps() {\n      var _props2 = this.props,\n          history = _props2.history,\n          location = _props2.location;\n      return {\n        history: history,\n        location: location\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n  return ScrollContext;\n}(React.Component);\n\nScrollContext.propTypes = propTypes$1;\nScrollContext.childContextTypes = childContextTypes;\nvar ScrollBehaviorContext = withRouter(ScrollContext);\nexport { ScrollContainer, ScrollBehaviorContext as ScrollContext };","map":null,"metadata":{},"sourceType":"module"}