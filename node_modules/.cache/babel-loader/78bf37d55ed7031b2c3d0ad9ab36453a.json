{"ast":null,"code":"/**\r\n * DevExtreme (events/click.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar eventsEngine = require(\"../events/core/events_engine\");\n\nvar devices = require(\"../core/devices\");\n\nvar domAdapter = require(\"../core/dom_adapter\");\n\nvar domUtils = require(\"../core/utils/dom\");\n\nvar animationFrame = require(\"../animation/frame\");\n\nvar eventUtils = require(\"./utils\");\n\nvar pointerEvents = require(\"./pointer\");\n\nvar Emitter = require(\"./core/emitter\");\n\nvar registerEmitter = require(\"./core/emitter_registrator\");\n\nvar compareVersions = require(\"../core/utils/version\").compare;\n\nvar CLICK_EVENT_NAME = \"dxclick\";\nvar TOUCH_BOUNDARY = 10;\nvar abs = Math.abs;\n\nvar isInput = function (element) {\n  return $(element).is(\"input, textarea, select, button ,:focus, :focus *\");\n};\n\nvar misc = {\n  requestAnimationFrame: animationFrame.requestAnimationFrame,\n  cancelAnimationFrame: animationFrame.cancelAnimationFrame\n};\nvar ClickEmitter = Emitter.inherit({\n  ctor: function (element) {\n    this.callBase(element);\n\n    this._makeElementClickable($(element));\n  },\n  _makeElementClickable: function ($element) {\n    if (!$element.attr(\"onclick\")) {\n      $element.attr(\"onclick\", \"void(0)\");\n    }\n  },\n  start: function (e) {\n    this._blurPrevented = e.isDefaultPrevented();\n    this._startTarget = e.target;\n    this._startEventData = eventUtils.eventData(e);\n  },\n  end: function (e) {\n    if (this._eventOutOfElement(e, this.getElement().get(0)) || e.type === pointerEvents.cancel) {\n      this._cancel(e);\n\n      return;\n    }\n\n    if (!isInput(e.target) && !this._blurPrevented) {\n      domUtils.resetActiveElement();\n    }\n\n    this._accept(e);\n\n    this._clickAnimationFrame = misc.requestAnimationFrame(function () {\n      this._fireClickEvent(e);\n    }.bind(this));\n  },\n  _eventOutOfElement: function (e, element) {\n    var target = e.target;\n    var targetChanged = !domUtils.contains(element, target) && element !== target;\n    var gestureDelta = eventUtils.eventDelta(eventUtils.eventData(e), this._startEventData);\n    var boundsExceeded = abs(gestureDelta.x) > TOUCH_BOUNDARY || abs(gestureDelta.y) > TOUCH_BOUNDARY;\n    return targetChanged || boundsExceeded;\n  },\n  _fireClickEvent: function (e) {\n    this._fireEvent(CLICK_EVENT_NAME, e, {\n      target: domUtils.closestCommonParent(this._startTarget, e.target)\n    });\n  },\n  dispose: function () {\n    misc.cancelAnimationFrame(this._clickAnimationFrame);\n  }\n});\n!function () {\n  var NATIVE_CLICK_CLASS = \"dx-native-click\";\n  var realDevice = devices.real();\n  var useNativeClick = realDevice.generic || realDevice.ios && compareVersions(realDevice.version, [9, 3]) >= 0 || realDevice.android && compareVersions(realDevice.version, [5]) >= 0;\n\n  var isNativeClickEvent = function (target) {\n    return useNativeClick || $(target).closest(\".\" + NATIVE_CLICK_CLASS).length;\n  };\n\n  var prevented = null;\n  var lastFiredEvent = null;\n\n  var clickHandler = function (e) {\n    var originalEvent = e.originalEvent;\n    var eventAlreadyFired = lastFiredEvent === originalEvent || originalEvent && originalEvent.DXCLICK_FIRED;\n    var leftButton = !e.which || 1 === e.which;\n\n    if (leftButton && !prevented && isNativeClickEvent(e.target) && !eventAlreadyFired) {\n      if (originalEvent) {\n        originalEvent.DXCLICK_FIRED = true;\n      }\n\n      lastFiredEvent = originalEvent;\n      eventUtils.fireEvent({\n        type: CLICK_EVENT_NAME,\n        originalEvent: e\n      });\n    }\n  };\n\n  ClickEmitter = ClickEmitter.inherit({\n    _makeElementClickable: function ($element) {\n      if (!isNativeClickEvent($element)) {\n        this.callBase($element);\n      }\n\n      eventsEngine.on($element, \"click\", clickHandler);\n    },\n    configure: function (data) {\n      this.callBase(data);\n\n      if (data.useNative) {\n        this.getElement().addClass(NATIVE_CLICK_CLASS);\n      }\n    },\n    start: function (e) {\n      prevented = null;\n\n      if (!isNativeClickEvent(e.target)) {\n        this.callBase(e);\n      }\n    },\n    end: function (e) {\n      if (!isNativeClickEvent(e.target)) {\n        this.callBase(e);\n      }\n    },\n    cancel: function () {\n      prevented = true;\n    },\n    dispose: function () {\n      this.callBase();\n      eventsEngine.off(this.getElement(), \"click\", clickHandler);\n    }\n  });\n}();\n!function () {\n  var desktopDevice = devices.real().generic;\n\n  if (!desktopDevice) {\n    var startTarget = null;\n    var blurPrevented = false;\n\n    var pointerDownHandler = function (e) {\n      startTarget = e.target;\n      blurPrevented = e.isDefaultPrevented();\n    };\n\n    var clickHandler = function (e) {\n      var $target = $(e.target);\n\n      if (!blurPrevented && startTarget && !$target.is(startTarget) && !$(startTarget).is(\"label\") && isInput($target)) {\n        domUtils.resetActiveElement();\n      }\n\n      startTarget = null;\n      blurPrevented = false;\n    };\n\n    var NATIVE_CLICK_FIXER_NAMESPACE = \"NATIVE_CLICK_FIXER\";\n    var document = domAdapter.getDocument();\n    eventsEngine.subscribeGlobal(document, eventUtils.addNamespace(pointerEvents.down, NATIVE_CLICK_FIXER_NAMESPACE), pointerDownHandler);\n    eventsEngine.subscribeGlobal(document, eventUtils.addNamespace(\"click\", NATIVE_CLICK_FIXER_NAMESPACE), clickHandler);\n  }\n}();\nregisterEmitter({\n  emitter: ClickEmitter,\n  bubble: true,\n  events: [CLICK_EVENT_NAME]\n});\nexports.name = CLICK_EVENT_NAME;","map":null,"metadata":{},"sourceType":"script"}