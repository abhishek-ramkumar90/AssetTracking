{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/extend.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isPlainObject = require(\"./type\").isPlainObject;\n\nvar extendFromObject = function (target, source, overrideExistingValues) {\n  target = target || {};\n\n  for (var prop in source) {\n    if (Object.prototype.hasOwnProperty.call(source, prop)) {\n      var value = source[prop];\n\n      if (!(prop in target) || overrideExistingValues) {\n        target[prop] = value;\n      }\n    }\n  }\n\n  return target;\n};\n\nvar extend = function extend(target) {\n  target = target || {};\n  var i = 1;\n  var deep = false;\n\n  if (\"boolean\" === typeof target) {\n    deep = target;\n    target = arguments[1] || {};\n    i++;\n  }\n\n  for (; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    if (null == source) {\n      continue;\n    }\n\n    for (var key in source) {\n      var targetValue = target[key];\n      var sourceValue = source[key];\n      var sourceValueIsArray = false;\n      var clone;\n\n      if (\"__proto__\" === key || target === sourceValue) {\n        continue;\n      }\n\n      if (deep && sourceValue && (isPlainObject(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {\n        if (sourceValueIsArray) {\n          clone = targetValue && Array.isArray(targetValue) ? targetValue : [];\n        } else {\n          clone = targetValue && isPlainObject(targetValue) ? targetValue : {};\n        }\n\n        target[key] = extend(deep, clone, sourceValue);\n      } else {\n        if (void 0 !== sourceValue) {\n          target[key] = sourceValue;\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.extend = extend;\nexports.extendFromObject = extendFromObject;","map":null,"metadata":{},"sourceType":"script"}