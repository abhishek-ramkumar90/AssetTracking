{"ast":null,"code":"/**\r\n * DevExtreme (core/option_manager.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionManager = void 0;\n\nvar _data = require(\"./utils/data\");\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _comparator = require(\"./utils/comparator\");\n\nvar _type = require(\"./utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _common = require(\"./utils/common\");\n\nvar _extend = require(\"./utils/extend\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n\n    if (\"value\" in descriptor) {\n      descriptor.writable = true;\n    }\n\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) {\n    _defineProperties(Constructor.prototype, protoProps);\n  }\n\n  if (staticProps) {\n    _defineProperties(Constructor, staticProps);\n  }\n\n  return Constructor;\n}\n\nvar cachedDeprecateNames = [];\nvar cachedGetters = {};\nvar cachedSetters = {};\n\nvar OptionManager = exports.OptionManager = function () {\n  function OptionManager(options, optionsByReference, deprecatedOptions) {\n    _classCallCheck(this, OptionManager);\n\n    this._options = options;\n    this._optionsByReference = optionsByReference;\n    this._deprecatedOptions = deprecatedOptions;\n    this._changingCallback;\n    this._changedCallback;\n    this._deprecatedCallback;\n  }\n\n  _createClass(OptionManager, [{\n    key: \"_notifyDeprecated\",\n    value: function (option) {\n      var info = this._deprecatedOptions[option];\n\n      if (info) {\n        this._deprecatedCallback(option, info);\n      }\n    }\n  }, {\n    key: \"_clearField\",\n    value: function (options, name) {\n      delete options[name];\n\n      var previousFieldName = this._getParentName(name);\n\n      var fieldObject = previousFieldName ? this._getValue(options, previousFieldName, false) : options;\n\n      if (fieldObject) {\n        delete fieldObject[this._getFieldName(name)];\n      }\n    }\n  }, {\n    key: \"_getParentName\",\n    value: function (fullName) {\n      return fullName.substr(0, fullName.lastIndexOf(\".\"));\n    }\n  }, {\n    key: \"_getFieldName\",\n    value: function (fullName) {\n      return fullName.substr(fullName.lastIndexOf(\".\") + 1);\n    }\n  }, {\n    key: \"_setField\",\n    value: function (options, fullName, value) {\n      var fieldName = \"\";\n      var fieldObject;\n\n      do {\n        if (fieldName) {\n          fieldName = \".\" + fieldName;\n        }\n\n        fieldName = this._getFieldName(fullName) + fieldName;\n        fullName = this._getParentName(fullName);\n        fieldObject = fullName ? this._getValue(options, fullName, false) : options;\n      } while (!fieldObject);\n\n      fieldObject[fieldName] = value;\n    }\n  }, {\n    key: \"_setValue\",\n    value: function (name, value, merge) {\n      if (!cachedSetters[name]) {\n        cachedSetters[name] = _data2.default.compileSetter(name);\n      }\n\n      var path = name.split(/[.[]/);\n      merge = _type2.default.isDefined(merge) ? merge : !this._optionsByReference[name];\n      cachedSetters[name](this._options, value, {\n        functionsAsIs: true,\n        merge: merge,\n        unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]\n      });\n    }\n  }, {\n    key: \"_setPreparedValue\",\n    value: function (name, value, merge) {\n      var previousValue = this._getValue(this._options, name, false);\n\n      if ((0, _comparator.equals)(previousValue, value)) {\n        return;\n      }\n\n      this._changingCallback(name, previousValue, value);\n\n      this._setValue(name, value, merge);\n\n      this._changedCallback(name, value, previousValue);\n    }\n  }, {\n    key: \"_setRelevantNames\",\n    value: function (options, name, value) {\n      if (!name) {\n        return;\n      }\n\n      var normalizedName = this._normalizeName(name);\n\n      if (normalizedName && normalizedName !== name) {\n        this._setField(options, normalizedName, value);\n\n        this._clearField(options, name);\n      }\n    }\n  }, {\n    key: \"_normalizeName\",\n    value: function (name) {\n      if (!name) {\n        return;\n      }\n\n      var deprecate;\n\n      if (!cachedDeprecateNames.length) {\n        for (var optionName in this._deprecatedOptions) {\n          cachedDeprecateNames.push(optionName);\n        }\n      }\n\n      for (var i = 0; i < cachedDeprecateNames.length; i++) {\n        if (cachedDeprecateNames[i] === name) {\n          deprecate = this._deprecatedOptions[name];\n          break;\n        }\n      }\n\n      if (deprecate) {\n        this._notifyDeprecated(name);\n\n        if (deprecate.alias) {\n          name = deprecate.alias;\n        }\n      }\n\n      return name;\n    }\n  }, {\n    key: \"_prepareRelevantNames\",\n    value: function (options, name, value) {\n      if (_type2.default.isPlainObject(value)) {\n        for (var valueName in value) {\n          this._prepareRelevantNames(options, name + \".\" + valueName, value[valueName]);\n        }\n      }\n\n      this._setRelevantNames(options, name, value);\n    }\n  }, {\n    key: \"_getValue\",\n    value: function (options, name, unwrapObservables) {\n      var getter = cachedGetters[name];\n\n      if (!getter) {\n        getter = cachedGetters[name] = _data2.default.compileGetter(name);\n      }\n\n      return getter(options, {\n        functionsAsIs: true,\n        unwrapObservables: unwrapObservables\n      });\n    }\n  }, {\n    key: \"onChanging\",\n    value: function (callBack) {\n      this._changingCallback = callBack;\n    }\n  }, {\n    key: \"onChanged\",\n    value: function (callBack) {\n      this._changedCallback = callBack;\n    }\n  }, {\n    key: \"onDeprecated\",\n    value: function (callBack) {\n      this._deprecatedCallback = callBack;\n    }\n  }, {\n    key: \"setValueByReference\",\n    value: function (options, rulesOptions) {\n      (0, _extend.extend)(true, options, rulesOptions);\n\n      for (var fieldName in this._optionsByReference) {\n        if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {\n          options[fieldName] = rulesOptions[fieldName];\n        }\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function (name) {\n      return this._getValue(this._options, this._normalizeName(name));\n    }\n  }, {\n    key: \"setValue\",\n    value: function (options, merge) {\n      for (var optionName in options) {\n        this._prepareRelevantNames(options, optionName, options[optionName]);\n      }\n\n      for (var _optionName in options) {\n        this._setPreparedValue(_optionName, options[_optionName], merge);\n      }\n    }\n  }, {\n    key: \"getValueSilently\",\n    value: function (name) {\n      return this._options[name];\n    }\n  }, {\n    key: \"setValueSilently\",\n    value: function (options) {\n      this.setValueByReference(this._options, options);\n    }\n  }, {\n    key: \"dispose\",\n    value: function () {\n      this._changingCallback = _common.noop;\n      this._changedCallback = _common.noop;\n      this._deprecatedCallback = _common.noop;\n    }\n  }]);\n\n  return OptionManager;\n}();","map":null,"metadata":{},"sourceType":"script"}