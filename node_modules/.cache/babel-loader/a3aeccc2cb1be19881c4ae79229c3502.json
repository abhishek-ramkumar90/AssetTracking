{"ast":null,"code":"/**\r\n * DevExtreme (data_helper.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar DataSource = require(\"./data/data_source/data_source\").DataSource;\n\nvar extend = require(\"./core/utils/extend\").extend;\n\nvar normalizeDataSourceOptions = require(\"./data/data_source/data_source\").normalizeDataSourceOptions;\n\nvar DATA_SOURCE_OPTIONS_METHOD = \"_dataSourceOptions\";\nvar DATA_SOURCE_CHANGED_METHOD = \"_dataSourceChangedHandler\";\nvar DATA_SOURCE_LOAD_ERROR_METHOD = \"_dataSourceLoadErrorHandler\";\nvar DATA_SOURCE_LOADING_CHANGED_METHOD = \"_dataSourceLoadingChangedHandler\";\nvar DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD = \"_dataSourceFromUrlLoadMode\";\nvar SPECIFIC_DATA_SOURCE_OPTION = \"_getSpecificDataSourceOption\";\nvar DataHelperMixin = {\n  postCtor: function () {\n    this.on(\"disposing\", function () {\n      this._disposeDataSource();\n    }.bind(this));\n  },\n  _refreshDataSource: function () {\n    this._initDataSource();\n\n    this._loadDataSource();\n  },\n  _initDataSource: function () {\n    var dataSourceOptions = SPECIFIC_DATA_SOURCE_OPTION in this ? this[SPECIFIC_DATA_SOURCE_OPTION]() : this.option(\"dataSource\");\n    var widgetDataSourceOptions;\n    var dataSourceType;\n\n    this._disposeDataSource();\n\n    if (dataSourceOptions) {\n      if (dataSourceOptions instanceof DataSource) {\n        this._isSharedDataSource = true;\n        this._dataSource = dataSourceOptions;\n      } else {\n        widgetDataSourceOptions = DATA_SOURCE_OPTIONS_METHOD in this ? this[DATA_SOURCE_OPTIONS_METHOD]() : {};\n        dataSourceType = this._dataSourceType ? this._dataSourceType() : DataSource;\n        dataSourceOptions = normalizeDataSourceOptions(dataSourceOptions, {\n          fromUrlLoadMode: DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD in this && this[DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD]()\n        });\n        this._dataSource = new dataSourceType(extend(true, {}, widgetDataSourceOptions, dataSourceOptions));\n      }\n\n      this._addDataSourceHandlers();\n    }\n  },\n  _addDataSourceHandlers: function () {\n    if (DATA_SOURCE_CHANGED_METHOD in this) {\n      this._addDataSourceChangeHandler();\n    }\n\n    if (DATA_SOURCE_LOAD_ERROR_METHOD in this) {\n      this._addDataSourceLoadErrorHandler();\n    }\n\n    if (DATA_SOURCE_LOADING_CHANGED_METHOD in this) {\n      this._addDataSourceLoadingChangedHandler();\n    }\n\n    this._addReadyWatcher();\n  },\n  _addReadyWatcher: function () {\n    this._dataSource.on(\"loadingChanged\", function (isLoading) {\n      this._ready && this._ready(!isLoading);\n    }.bind(this));\n  },\n  _addDataSourceChangeHandler: function () {\n    var dataSource = this._dataSource;\n\n    this._proxiedDataSourceChangedHandler = function (e) {\n      this[DATA_SOURCE_CHANGED_METHOD](dataSource.items(), e);\n    }.bind(this);\n\n    dataSource.on(\"changed\", this._proxiedDataSourceChangedHandler);\n  },\n  _addDataSourceLoadErrorHandler: function () {\n    this._proxiedDataSourceLoadErrorHandler = this[DATA_SOURCE_LOAD_ERROR_METHOD].bind(this);\n\n    this._dataSource.on(\"loadError\", this._proxiedDataSourceLoadErrorHandler);\n  },\n  _addDataSourceLoadingChangedHandler: function () {\n    this._proxiedDataSourceLoadingChangedHandler = this[DATA_SOURCE_LOADING_CHANGED_METHOD].bind(this);\n\n    this._dataSource.on(\"loadingChanged\", this._proxiedDataSourceLoadingChangedHandler);\n  },\n  _loadDataSource: function () {\n    if (this._dataSource) {\n      var dataSource = this._dataSource;\n\n      if (dataSource.isLoaded()) {\n        this._proxiedDataSourceChangedHandler && this._proxiedDataSourceChangedHandler();\n      } else {\n        dataSource.load();\n      }\n    }\n  },\n  _loadSingle: function (key, value) {\n    key = \"this\" === key ? this._dataSource.key() || \"this\" : key;\n    return this._dataSource.loadSingle(key, value);\n  },\n  _isLastPage: function () {\n    return !this._dataSource || this._dataSource.isLastPage() || !this._dataSource._pageSize;\n  },\n  _isDataSourceLoading: function () {\n    return this._dataSource && this._dataSource.isLoading();\n  },\n  _disposeDataSource: function () {\n    if (this._dataSource) {\n      if (this._isSharedDataSource) {\n        delete this._isSharedDataSource;\n        this._proxiedDataSourceChangedHandler && this._dataSource.off(\"changed\", this._proxiedDataSourceChangedHandler);\n        this._proxiedDataSourceLoadErrorHandler && this._dataSource.off(\"loadError\", this._proxiedDataSourceLoadErrorHandler);\n        this._proxiedDataSourceLoadingChangedHandler && this._dataSource.off(\"loadingChanged\", this._proxiedDataSourceLoadingChangedHandler);\n      } else {\n        this._dataSource.dispose();\n      }\n\n      delete this._dataSource;\n      delete this._proxiedDataSourceChangedHandler;\n      delete this._proxiedDataSourceLoadErrorHandler;\n      delete this._proxiedDataSourceLoadingChangedHandler;\n    }\n  },\n  getDataSource: function () {\n    return this._dataSource || null;\n  }\n};\nmodule.exports = DataHelperMixin;","map":null,"metadata":{},"sourceType":"script"}