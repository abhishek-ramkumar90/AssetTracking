{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar NumericLabel = function NumericLabel(props) {\n  var nFormatter = function nFormatter(num, minValue) {\n    if (!num || !+num || typeof +num !== 'number') {\n      return {\n        number: num\n      };\n    }\n\n    var num = +num;\n    var minValue = minValue || 0;\n    var si = [{\n      value: 1E18,\n      symbol: \"E\"\n    }, {\n      value: 1E15,\n      symbol: \"P\"\n    }, {\n      value: 1E12,\n      symbol: \"T\"\n    }, {\n      value: 1E9,\n      symbol: \"G\"\n    }, {\n      value: 1E6,\n      symbol: \"M\"\n    }, {\n      value: 1E3,\n      symbol: \"k\"\n    }],\n        rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/,\n        i;\n\n    if (typeof num === 'number' && num >= minValue) {\n      for (i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n          // return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n          return {\n            number: num / si[i].value,\n            letter: si[i].symbol\n          };\n        }\n      }\n    } //return num.replace(rx, \"$1\");\n\n\n    return {\n      number: num\n    };\n  };\n\n  var option = {\n    minimumFractionDigits: 0\n  };\n\n  if (props.params) {\n    var locales = props.params.locales;\n\n    if (props.params.wholenumber == 'floor') {\n      var number = Math.floor(props.children);\n    } else if (props.params.wholenumber == 'ceil') {\n      var number = Math.ceil(props.children);\n    } else {\n      var number = +props.children;\n    }\n\n    var styles = 'right';\n\n    if (props.params.justification == 'L') {\n      styles = 'left';\n    } else if (props.params.justification == 'C') {\n      styles = 'center';\n    } else {\n      styles = 'right';\n    }\n\n    var mystyle = {\n      'textAlign': styles\n    };\n\n    if (props.params.currencyIndicator) {\n      var currencyIndicator = props.params.currencyIndicator;\n    } else {\n      var currencyIndicator = 'USD';\n    }\n\n    if (props.params.percentage) {\n      option = Object.assign(option, {\n        style: 'percent',\n        maximumFractionDigits: props.params.precision || 2,\n        minimumFractionDigits: props.params.precision || 0,\n        useGrouping: props.params.commafy\n      });\n    } else if (props.params.currency) {\n      option = Object.assign(option, {\n        style: 'currency',\n        currency: currencyIndicator,\n        maximumFractionDigits: props.params.precision || 2,\n        minimumFractionDigits: props.params.precision || 0,\n        useGrouping: props.params.commafy\n      });\n    } else {\n      option = Object.assign(option, {\n        style: 'decimal',\n        useGrouping: props.params.commafy\n      });\n\n      if (props.params.precision) {\n        option.maximumFractionDigits = props.params.precision;\n        option.minimumFractionDigits = props.params.precision || 0;\n      }\n    }\n\n    var css = '';\n\n    if (props.params.cssClass) {\n      props.params.cssClass.map(function (clas) {\n        css += clas + ' ';\n      });\n    }\n  } else {\n    var number = +props.children;\n    var locales = 'en-US';\n    var mystyle = {\n      'textAlign': 'left'\n    };\n  }\n\n  var shortenNumber = number;\n  var numberLetter = '';\n\n  if (props.params && props.params.shortFormat) {\n    var sn = nFormatter(number, props.params.shortFormatMinValue || 0);\n    shortenNumber = sn.number;\n    numberLetter = sn.letter || '';\n\n    if (props.params.shortFormatMinValue && +number >= props.params.shortFormatMinValue) {\n      option.maximumFractionDigits = props.params.shortFormatPrecision || props.params.precision || 0;\n    }\n  }\n\n  option.minimumFractionDigits = Math.min(~~option.minimumFractionDigits, ~~option.maximumFractionDigits);\n  var theFormattedNumber = shortenNumber;\n\n  if (typeof shortenNumber === 'number') {\n    theFormattedNumber = Intl.NumberFormat(locales, option).format(+shortenNumber);\n  }\n\n  if (numberLetter) {\n    if (props.params && props.params.percentage) {\n      theFormattedNumber = theFormattedNumber.replace('%', numberLetter + '%');\n    } else {\n      theFormattedNumber += numberLetter;\n    }\n  }\n\n  var title = false;\n\n  if (props.params && props.params.title) {\n    props.params.title === true ? title = number : title = props.params.title;\n  }\n\n  if (mystyle.textAlign && (mystyle.textAlign == 'right' || mystyle.textAlign == 'center')) {\n    // div\n    if (title) {\n      // with title\n      return _react2.default.createElement('div', {\n        className: css,\n        style: mystyle,\n        title: title\n      }, theFormattedNumber);\n    } else {\n      // without title\n      return _react2.default.createElement('div', {\n        className: css,\n        style: mystyle\n      }, theFormattedNumber);\n    }\n  } else {\n    // span\n    if (title) {\n      // with title\n      return _react2.default.createElement('span', {\n        className: css,\n        style: mystyle,\n        title: title\n      }, theFormattedNumber);\n    } else {\n      // without title\n      return _react2.default.createElement('span', {\n        className: css,\n        style: mystyle\n      }, theFormattedNumber);\n    }\n  }\n};\n\nexports.default = NumericLabel;","map":null,"metadata":{},"sourceType":"script"}