{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/range.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar _isDefined = typeUtils.isDefined;\nvar _isDate = typeUtils.isDate;\nvar _isFunction = typeUtils.isFunction;\n\nvar unique = require(\"../core/utils\").unique;\n\nvar minSelector = \"min\";\nvar maxSelector = \"max\";\nvar minVisibleSelector = \"minVisible\";\nvar maxVisibleSelector = \"maxVisible\";\nvar baseSelector = \"base\";\nvar axisTypeSelector = \"axisType\";\n\nvar _Range;\n\nfunction otherLessThan(thisValue, otherValue) {\n  return otherValue < thisValue;\n}\n\nfunction otherGreaterThan(thisValue, otherValue) {\n  return otherValue > thisValue;\n}\n\nfunction compareAndReplace(thisValue, otherValue, setValue, compare) {\n  var otherValueDefined = _isDefined(otherValue);\n\n  if (_isDefined(thisValue)) {\n    if (otherValueDefined && compare(thisValue, otherValue)) {\n      setValue(otherValue);\n    }\n  } else {\n    if (otherValueDefined) {\n      setValue(otherValue);\n    }\n  }\n}\n\n_Range = exports.Range = function (range) {\n  range && extend(this, range);\n};\n\n_Range.prototype = {\n  constructor: _Range,\n  addRange: function (otherRange) {\n    var that = this;\n    var categories = that.categories;\n    var otherCategories = otherRange.categories;\n\n    var compareAndReplaceByField = function (field, compare) {\n      compareAndReplace(that[field], otherRange[field], function (value) {\n        that[field] = value;\n      }, compare);\n    };\n\n    var controlValuesByVisibleBounds = function (valueField, visibleValueField, compare) {\n      compareAndReplace(that[valueField], that[visibleValueField], function (value) {\n        _isDefined(that[valueField]) && (that[valueField] = value);\n      }, compare);\n    };\n\n    var checkField = function (field) {\n      that[field] = that[field] || otherRange[field];\n    };\n\n    checkField(\"invert\");\n    checkField(axisTypeSelector);\n    checkField(\"dataType\");\n    checkField(\"isSpacedMargin\");\n\n    if (\"logarithmic\" === that[axisTypeSelector]) {\n      checkField(baseSelector);\n    } else {\n      that[baseSelector] = void 0;\n    }\n\n    compareAndReplaceByField(minSelector, otherLessThan);\n    compareAndReplaceByField(maxSelector, otherGreaterThan);\n\n    if (\"discrete\" === that[axisTypeSelector]) {\n      checkField(minVisibleSelector);\n      checkField(maxVisibleSelector);\n    } else {\n      compareAndReplaceByField(minVisibleSelector, otherLessThan);\n      compareAndReplaceByField(maxVisibleSelector, otherGreaterThan);\n    }\n\n    compareAndReplaceByField(\"interval\", otherLessThan);\n    controlValuesByVisibleBounds(minSelector, minVisibleSelector, otherLessThan);\n    controlValuesByVisibleBounds(minSelector, maxVisibleSelector, otherLessThan);\n    controlValuesByVisibleBounds(maxSelector, maxVisibleSelector, otherGreaterThan);\n    controlValuesByVisibleBounds(maxSelector, minVisibleSelector, otherGreaterThan);\n\n    if (void 0 === categories) {\n      that.categories = otherCategories;\n    } else {\n      that.categories = otherCategories ? unique(categories.concat(otherCategories)) : categories;\n    }\n\n    if (\"logarithmic\" === that[axisTypeSelector]) {\n      checkField(\"allowNegatives\");\n      compareAndReplaceByField(\"linearThreshold\", otherLessThan);\n    }\n\n    return that;\n  },\n  isEmpty: function () {\n    return (!_isDefined(this[minSelector]) || !_isDefined(this[maxSelector])) && (!this.categories || 0 === this.categories.length);\n  },\n  correctValueZeroLevel: function () {\n    var that = this;\n\n    if (\"logarithmic\" === that[axisTypeSelector] || _isDate(that[maxSelector]) || _isDate(that[minSelector])) {\n      return that;\n    }\n\n    function setZeroLevel(min, max) {\n      that[min] < 0 && that[max] < 0 && (that[max] = 0);\n      that[min] > 0 && that[max] > 0 && (that[min] = 0);\n    }\n\n    setZeroLevel(minSelector, maxSelector);\n    setZeroLevel(minVisibleSelector, maxVisibleSelector);\n    return that;\n  },\n  sortCategories: function (sort) {\n    if (false === sort || !this.categories) {\n      return;\n    }\n\n    if (Array.isArray(sort)) {\n      var sortValues = sort.map(function (item) {\n        return item.valueOf();\n      });\n      var filteredSeriesCategories = this.categories.filter(function (item) {\n        return sortValues.indexOf(item.valueOf()) === -1;\n      });\n      this.categories = sort.concat(filteredSeriesCategories);\n    } else {\n      var notAFunction = !_isFunction(sort);\n\n      if (notAFunction && \"string\" !== this.dataType) {\n        sort = function (a, b) {\n          return a.valueOf() - b.valueOf();\n        };\n      } else {\n        if (notAFunction) {\n          sort = false;\n        }\n      }\n\n      sort && this.categories.sort(sort);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}