{"ast":null,"code":"/**\r\n * DevExtreme (viz/series/points/symbol_point.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar extend = require(\"../../../core/utils/extend\").extend;\n\nvar each = require(\"../../../core/utils/iterator\").each;\n\nvar noop = require(\"../../../core/utils/common\").noop;\n\nvar windowUtils = require(\"../../../core/utils/window\");\n\nvar window = windowUtils.getWindow();\n\nvar labelModule = require(\"./label\");\n\nvar _extend = extend;\n\nvar _isDefined = require(\"../../../core/utils/type\").isDefined;\n\nvar _normalizeEnum = require(\"../../core/utils\").normalizeEnum;\n\nvar _math = Math;\nvar _round = _math.round;\nvar _floor = _math.floor;\nvar _ceil = _math.ceil;\nvar DEFAULT_IMAGE_WIDTH = 20;\nvar DEFAULT_IMAGE_HEIGHT = 20;\nvar LABEL_OFFSET = 10;\nvar CANVAS_POSITION_DEFAULT = \"canvas_position_default\";\n\nfunction getSquareMarkerCoords(radius) {\n  return [-radius, -radius, radius, -radius, radius, radius, -radius, radius, -radius, -radius];\n}\n\nfunction getPolygonMarkerCoords(radius) {\n  var r = _ceil(radius);\n\n  return [-r, 0, 0, -r, r, 0, 0, r, -r, 0];\n}\n\nfunction getCrossMarkerCoords(radius) {\n  var r = _ceil(radius);\n\n  var floorHalfRadius = _floor(r / 2);\n\n  var ceilHalfRadius = _ceil(r / 2);\n\n  return [-r, -floorHalfRadius, -floorHalfRadius, -r, 0, -ceilHalfRadius, floorHalfRadius, -r, r, -floorHalfRadius, ceilHalfRadius, 0, r, floorHalfRadius, floorHalfRadius, r, 0, ceilHalfRadius, -floorHalfRadius, r, -r, floorHalfRadius, -ceilHalfRadius, 0];\n}\n\nfunction getTriangleDownMarkerCoords(radius) {\n  return [-radius, -radius, radius, -radius, 0, radius, -radius, -radius];\n}\n\nfunction getTriangleUpMarkerCoords(radius) {\n  return [-radius, radius, radius, radius, 0, -radius, -radius, radius];\n}\n\nmodule.exports = {\n  deleteLabel: function () {\n    this._label.dispose();\n\n    this._label = null;\n  },\n  _hasGraphic: function () {\n    return this.graphic;\n  },\n  clearVisibility: function () {\n    var that = this;\n    var graphic = that.graphic;\n\n    if (graphic && graphic.attr(\"visibility\")) {\n      graphic.attr({\n        visibility: null\n      });\n    }\n  },\n  isVisible: function () {\n    return this.inVisibleArea && this.series.isVisible();\n  },\n  setInvisibility: function () {\n    var that = this;\n    var graphic = that.graphic;\n\n    if (graphic && \"hidden\" !== graphic.attr(\"visibility\")) {\n      graphic.attr({\n        visibility: \"hidden\"\n      });\n    }\n\n    that._errorBar && that._errorBar.attr({\n      visibility: \"hidden\"\n    });\n\n    that._label.draw(false);\n  },\n  clearMarker: function () {\n    var graphic = this.graphic;\n    graphic && graphic.attr(this._emptySettings);\n  },\n  _createLabel: function () {\n    this._label = new labelModule.Label({\n      renderer: this.series._renderer,\n      labelsGroup: this.series._labelsGroup,\n      point: this\n    });\n  },\n  _updateLabelData: function () {\n    this._label.setData(this._getLabelFormatObject());\n  },\n  _updateLabelOptions: function () {\n    !this._label && this._createLabel();\n\n    this._label.setOptions(this._options.label);\n  },\n  _checkImage: function (image) {\n    return _isDefined(image) && (\"string\" === typeof image || _isDefined(image.url));\n  },\n  _fillStyle: function () {\n    this._styles = this._options.styles;\n  },\n  _checkSymbol: function (oldOptions, newOptions) {\n    var oldSymbol = oldOptions.symbol;\n    var newSymbol = newOptions.symbol;\n    var symbolChanged = \"circle\" === oldSymbol && \"circle\" !== newSymbol || \"circle\" !== oldSymbol && \"circle\" === newSymbol;\n\n    var imageChanged = this._checkImage(oldOptions.image) !== this._checkImage(newOptions.image);\n\n    return !!(symbolChanged || imageChanged);\n  },\n  _populatePointShape: function (symbol, radius) {\n    switch (symbol) {\n      case \"square\":\n        return getSquareMarkerCoords(radius);\n\n      case \"polygon\":\n        return getPolygonMarkerCoords(radius);\n\n      case \"triangle\":\n      case \"triangleDown\":\n        return getTriangleDownMarkerCoords(radius);\n\n      case \"triangleUp\":\n        return getTriangleUpMarkerCoords(radius);\n\n      case \"cross\":\n        return getCrossMarkerCoords(radius);\n    }\n  },\n  hasCoords: function () {\n    return null !== this.x && null !== this.y;\n  },\n  correctValue: function (correction) {\n    var that = this;\n    var axis = that.series.getValueAxis();\n\n    if (that.hasValue()) {\n      that.value = that.properValue = axis.validateUnit(that.initialValue.valueOf() + correction.valueOf());\n      that.minValue = axis.validateUnit(correction);\n    }\n  },\n  resetCorrection: function () {\n    this.value = this.properValue = this.initialValue;\n    this.minValue = CANVAS_POSITION_DEFAULT;\n  },\n  resetValue: function () {\n    var that = this;\n\n    if (that.hasValue()) {\n      that.value = that.properValue = that.initialValue = 0;\n      that.minValue = 0;\n\n      that._label.setDataField(\"value\", that.value);\n    }\n  },\n  _getTranslates: function (animationEnabled) {\n    var translateX = this.x;\n    var translateY = this.y;\n\n    if (animationEnabled) {\n      if (this._options.rotated) {\n        translateX = this.defaultX;\n      } else {\n        translateY = this.defaultY;\n      }\n    }\n\n    return {\n      x: translateX,\n      y: translateY\n    };\n  },\n  _createImageMarker: function (renderer, settings, options) {\n    var width = options.width || DEFAULT_IMAGE_WIDTH;\n    var height = options.height || DEFAULT_IMAGE_HEIGHT;\n    return renderer.image(-_round(.5 * width), -_round(.5 * height), width, height, options.url ? options.url.toString() : options.toString(), \"center\").attr({\n      translateX: settings.translateX,\n      translateY: settings.translateY,\n      visibility: settings.visibility\n    });\n  },\n  _createSymbolMarker: function (renderer, pointSettings) {\n    var marker;\n    var symbol = this._options.symbol;\n\n    if (\"circle\" === symbol) {\n      delete pointSettings.points;\n      marker = renderer.circle().attr(pointSettings);\n    } else {\n      if (\"square\" === symbol || \"polygon\" === symbol || \"triangle\" === symbol || \"triangleDown\" === symbol || \"triangleUp\" === symbol || \"cross\" === symbol) {\n        marker = renderer.path([], \"area\").attr(pointSettings).sharp();\n      }\n    }\n\n    return marker;\n  },\n  _createMarker: function (renderer, group, image, settings) {\n    var that = this;\n    var marker = that._checkImage(image) ? that._createImageMarker(renderer, settings, image) : that._createSymbolMarker(renderer, settings);\n\n    if (marker) {\n      marker.data({\n        \"chart-data-point\": that\n      }).append(group);\n    }\n\n    return marker;\n  },\n  _getSymbolBBox: function (x, y, r) {\n    return {\n      x: x - r,\n      y: y - r,\n      width: 2 * r,\n      height: 2 * r\n    };\n  },\n  _getImageBBox: function (x, y) {\n    var image = this._options.image;\n    var width = image.width || DEFAULT_IMAGE_WIDTH;\n    var height = image.height || DEFAULT_IMAGE_HEIGHT;\n    return {\n      x: x - _round(width / 2),\n      y: y - _round(height / 2),\n      width: width,\n      height: height\n    };\n  },\n  _getGraphicBBox: function () {\n    var that = this;\n    var options = that._options;\n    var x = that.x;\n    var y = that.y;\n    var bBox;\n\n    if (options.visible) {\n      bBox = that._checkImage(options.image) ? that._getImageBBox(x, y) : that._getSymbolBBox(x, y, options.styles.normal.r);\n    } else {\n      bBox = {\n        x: x,\n        y: y,\n        width: 0,\n        height: 0\n      };\n    }\n\n    return bBox;\n  },\n  hideInsideLabel: noop,\n  _getShiftLabelCoords: function (label) {\n    var coord = this._addLabelAlignmentAndOffset(label, this._getLabelCoords(label));\n\n    return this._checkLabelPosition(label, coord);\n  },\n  _drawLabel: function () {\n    var that = this;\n\n    var customVisibility = that._getCustomLabelVisibility();\n\n    var label = that._label;\n    var isVisible = that._showForZeroValues() && that.hasValue() && false !== customVisibility && (that.series.getLabelVisibility() || customVisibility);\n    label.draw(!!isVisible);\n  },\n  correctLabelPosition: function (label) {\n    var that = this;\n\n    var coord = that._getShiftLabelCoords(label);\n\n    if (!that.hideInsideLabel(label, coord)) {\n      label.setFigureToDrawConnector(that._getLabelConnector(label.pointPosition));\n      label.shift(_round(coord.x), _round(coord.y));\n    }\n  },\n  _showForZeroValues: function () {\n    return true;\n  },\n  _getLabelConnector: function (pointPosition) {\n    var bBox = this._getGraphicBBox(pointPosition);\n\n    var w2 = bBox.width / 2;\n    var h2 = bBox.height / 2;\n    return {\n      x: bBox.x + w2,\n      y: bBox.y + h2,\n      r: this._options.visible ? Math.max(w2, h2) : 0\n    };\n  },\n  _getPositionFromLocation: function () {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  },\n  _isPointInVisibleArea: function (visibleArea, graphicBBox) {\n    return visibleArea.minX <= graphicBBox.x + graphicBBox.width && visibleArea.maxX >= graphicBBox.x && visibleArea.minY <= graphicBBox.y + graphicBBox.height && visibleArea.maxY >= graphicBBox.y;\n  },\n  _checkLabelPosition: function (label, coord) {\n    var that = this;\n\n    var visibleArea = that._getVisibleArea();\n\n    var labelBBox = label.getBoundingRect();\n\n    var graphicBBox = that._getGraphicBBox(label.pointPosition);\n\n    var fullGraphicBBox = that._getGraphicBBox();\n\n    var offset = LABEL_OFFSET;\n\n    if (that._isPointInVisibleArea(visibleArea, fullGraphicBBox)) {\n      if (!that._options.rotated) {\n        if (visibleArea.minX > coord.x) {\n          coord.x = visibleArea.minX;\n        }\n\n        if (visibleArea.maxX < coord.x + labelBBox.width) {\n          coord.x = visibleArea.maxX - labelBBox.width;\n        }\n\n        if (visibleArea.minY > coord.y) {\n          coord.y = graphicBBox.y + graphicBBox.height + offset;\n        }\n\n        if (visibleArea.maxY < coord.y + labelBBox.height) {\n          coord.y = graphicBBox.y - labelBBox.height - offset;\n        }\n      } else {\n        if (visibleArea.minX > coord.x) {\n          coord.x = graphicBBox.x + graphicBBox.width + offset;\n        }\n\n        if (visibleArea.maxX < coord.x + labelBBox.width) {\n          coord.x = graphicBBox.x - offset - labelBBox.width;\n        }\n\n        if (visibleArea.minY > coord.y) {\n          coord.y = visibleArea.minY;\n        }\n\n        if (visibleArea.maxY < coord.y + labelBBox.height) {\n          coord.y = visibleArea.maxY - labelBBox.height;\n        }\n      }\n    }\n\n    return coord;\n  },\n  _addLabelAlignmentAndOffset: function (label, coord) {\n    var labelBBox = label.getBoundingRect();\n    var labelOptions = label.getLayoutOptions();\n\n    if (!this._options.rotated) {\n      if (\"left\" === labelOptions.alignment) {\n        coord.x += labelBBox.width / 2;\n      } else {\n        if (\"right\" === labelOptions.alignment) {\n          coord.x -= labelBBox.width / 2;\n        }\n      }\n    }\n\n    coord.x += labelOptions.horizontalOffset;\n    coord.y += labelOptions.verticalOffset;\n    return coord;\n  },\n  _getLabelCoords: function (label) {\n    return this._getLabelCoordOfPosition(label, this._getLabelPosition(label.pointPosition));\n  },\n  _getLabelCoordOfPosition: function (label, position) {\n    var that = this;\n    var labelBBox = label.getBoundingRect();\n\n    var graphicBBox = that._getGraphicBBox(label.pointPosition);\n\n    var offset = LABEL_OFFSET;\n    var centerY = graphicBBox.height / 2 - labelBBox.height / 2;\n    var centerX = graphicBBox.width / 2 - labelBBox.width / 2;\n    var x = graphicBBox.x;\n    var y = graphicBBox.y;\n\n    switch (position) {\n      case \"left\":\n        x -= labelBBox.width + offset;\n        y += centerY;\n        break;\n\n      case \"right\":\n        x += graphicBBox.width + offset;\n        y += centerY;\n        break;\n\n      case \"top\":\n        x += centerX;\n        y -= labelBBox.height + offset;\n        break;\n\n      case \"bottom\":\n        x += centerX;\n        y += graphicBBox.height + offset;\n        break;\n\n      case \"inside\":\n        x += centerX;\n        y += centerY;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  },\n  _drawMarker: function (renderer, group, animationEnabled) {\n    var that = this;\n    var options = that._options;\n\n    var translates = that._getTranslates(animationEnabled);\n\n    var style = that._getStyle();\n\n    that.graphic = that._createMarker(renderer, group, options.image, _extend({\n      translateX: translates.x,\n      translateY: translates.y,\n      points: that._populatePointShape(options.symbol, style.r)\n    }, style));\n  },\n  _getErrorBarSettings: function () {\n    return {\n      visibility: \"visible\"\n    };\n  },\n  _getErrorBarBaseEdgeLength: function () {\n    return 2 * this.getPointRadius();\n  },\n  _drawErrorBar: function (renderer, group) {\n    if (!this._options.errorBars) {\n      return;\n    }\n\n    var that = this;\n    var options = that._options;\n    var errorBarOptions = options.errorBars;\n    var points = [];\n    var settings;\n    var pos = that._errorBarPos;\n    var high = that._highErrorCoord;\n    var low = that._lowErrorCoord;\n\n    var displayMode = _normalizeEnum(errorBarOptions.displayMode);\n\n    var isHighDisplayMode = \"high\" === displayMode;\n    var isLowDisplayMode = \"low\" === displayMode;\n    var highErrorOnly = (isHighDisplayMode || !_isDefined(low)) && _isDefined(high) && !isLowDisplayMode;\n    var lowErrorOnly = (isLowDisplayMode || !_isDefined(high)) && _isDefined(low) && !isHighDisplayMode;\n    var edgeLength = errorBarOptions.edgeLength;\n\n    if (edgeLength <= 1 && edgeLength > 0) {\n      edgeLength = this._getErrorBarBaseEdgeLength() * errorBarOptions.edgeLength;\n    }\n\n    edgeLength = _floor(parseInt(edgeLength) / 2);\n    highErrorOnly && (low = that._baseErrorBarPos);\n    lowErrorOnly && (high = that._baseErrorBarPos);\n\n    if (\"none\" !== displayMode && _isDefined(high) && _isDefined(low) && _isDefined(pos)) {\n      !lowErrorOnly && points.push([pos - edgeLength, high, pos + edgeLength, high]);\n      points.push([pos, high, pos, low]);\n      !highErrorOnly && points.push([pos + edgeLength, low, pos - edgeLength, low]);\n      options.rotated && each(points, function (_, p) {\n        p.reverse();\n      });\n      settings = that._getErrorBarSettings(errorBarOptions);\n\n      if (!that._errorBar) {\n        that._errorBar = renderer.path(points, \"line\").attr(settings).append(group);\n      } else {\n        settings.points = points;\n\n        that._errorBar.attr(settings);\n      }\n    } else {\n      that._errorBar && that._errorBar.attr({\n        visibility: \"hidden\"\n      });\n    }\n  },\n  getTooltipParams: function () {\n    var that = this;\n    var graphic = that.graphic;\n    return {\n      x: that.x,\n      y: that.y,\n      offset: graphic ? graphic.getBBox().height / 2 : 0\n    };\n  },\n  setPercentValue: function (absTotal, total, leftHoleTotal, rightHoleTotal) {\n    var that = this;\n    var valuePercent = that.value / absTotal || 0;\n    var minValuePercent = that.minValue / absTotal || 0;\n    var percent = valuePercent - minValuePercent;\n\n    that._label.setDataField(\"percent\", percent);\n\n    that._label.setDataField(\"total\", total);\n\n    if (that.series.isFullStackedSeries() && that.hasValue()) {\n      if (that.leftHole) {\n        that.leftHole /= absTotal - leftHoleTotal;\n        that.minLeftHole /= absTotal - leftHoleTotal;\n      }\n\n      if (that.rightHole) {\n        that.rightHole /= absTotal - rightHoleTotal;\n        that.minRightHole /= absTotal - rightHoleTotal;\n      }\n\n      that.value = that.properValue = valuePercent;\n      that.minValue = !minValuePercent ? that.minValue : minValuePercent;\n    }\n  },\n  _storeTrackerR: function () {\n    var that = this;\n    var navigator = window.navigator;\n    var r = that._options.styles.normal.r;\n    var minTrackerSize;\n    minTrackerSize = windowUtils.hasProperty(\"ontouchstart\") || navigator.msPointerEnabled && navigator.msMaxTouchPoints || navigator.pointerEnabled && navigator.maxTouchPoints ? 20 : 6;\n    that._options.trackerR = r < minTrackerSize ? minTrackerSize : r;\n    return that._options.trackerR;\n  },\n  _translateErrorBars: function () {\n    var that = this;\n    var options = that._options;\n    var rotated = options.rotated;\n    var errorBars = options.errorBars;\n\n    var translator = that._getValTranslator();\n\n    if (!errorBars) {\n      return;\n    }\n\n    _isDefined(that.lowError) && (that._lowErrorCoord = translator.translate(that.lowError));\n    _isDefined(that.highError) && (that._highErrorCoord = translator.translate(that.highError));\n    that._errorBarPos = _floor(rotated ? that.vy : that.vx);\n    that._baseErrorBarPos = \"stdDeviation\" === errorBars.type ? that._lowErrorCoord + (that._highErrorCoord - that._lowErrorCoord) / 2 : rotated ? that.vx : that.vy;\n  },\n  _translate: function () {\n    var that = this;\n\n    var valTranslator = that._getValTranslator();\n\n    var argTranslator = that._getArgTranslator();\n\n    if (that._options.rotated) {\n      that.vx = that.x = valTranslator.translate(that.value);\n      that.vy = that.y = argTranslator.translate(that.argument);\n      that.minX = valTranslator.translate(that.minValue);\n      that.defaultX = valTranslator.translate(CANVAS_POSITION_DEFAULT);\n    } else {\n      that.vy = that.y = valTranslator.translate(that.value);\n      that.vx = that.x = argTranslator.translate(that.argument);\n      that.minY = valTranslator.translate(that.minValue);\n      that.defaultY = valTranslator.translate(CANVAS_POSITION_DEFAULT);\n    }\n\n    that._translateErrorBars();\n\n    that._calculateVisibility(that.x, that.y);\n  },\n  _updateData: function (data) {\n    var that = this;\n    that.value = that.properValue = that.initialValue = that.originalValue = data.value;\n    that.minValue = that.initialMinValue = that.originalMinValue = _isDefined(data.minValue) ? data.minValue : CANVAS_POSITION_DEFAULT;\n  },\n  _getImageSettings: function (image) {\n    return {\n      href: image.url || image.toString(),\n      width: image.width || DEFAULT_IMAGE_WIDTH,\n      height: image.height || DEFAULT_IMAGE_HEIGHT\n    };\n  },\n  getCrosshairData: function () {\n    var that = this;\n    var r = that._options.rotated;\n    var value = that.properValue;\n    var argument = that.argument;\n    return {\n      x: that.vx,\n      y: that.vy,\n      xValue: r ? value : argument,\n      yValue: r ? argument : value,\n      axis: that.series.axis\n    };\n  },\n  getPointRadius: function () {\n    var style = this._getStyle();\n\n    var options = this._options;\n    var r = style.r;\n    var extraSpace;\n    var symbol = options.symbol;\n    var isSquare = \"square\" === symbol;\n    var isTriangle = \"triangle\" === symbol || \"triangleDown\" === symbol || \"triangleUp\" === symbol;\n\n    if (options.visible && !options.image && r) {\n      extraSpace = style[\"stroke-width\"] / 2;\n      return (isSquare || isTriangle ? 1.4 * r : r) + extraSpace;\n    }\n\n    return 0;\n  },\n  _updateMarker: function (animationEnabled, style) {\n    var that = this;\n    var options = that._options;\n    var settings;\n    var image = options.image;\n    var visibility = !that.isVisible() ? {\n      visibility: \"hidden\"\n    } : {};\n\n    if (that._checkImage(image)) {\n      settings = _extend({}, {\n        visibility: style.visibility\n      }, visibility, that._getImageSettings(image));\n    } else {\n      settings = _extend({}, style, visibility, {\n        points: that._populatePointShape(options.symbol, style.r)\n      });\n    }\n\n    if (!animationEnabled) {\n      settings.translateX = that.x;\n      settings.translateY = that.y;\n    }\n\n    that.graphic.attr(settings).sharp();\n  },\n  _getLabelFormatObject: function () {\n    var that = this;\n    return {\n      argument: that.initialArgument,\n      value: that.initialValue,\n      originalArgument: that.originalArgument,\n      originalValue: that.originalValue,\n      seriesName: that.series.name,\n      lowErrorValue: that.lowError,\n      highErrorValue: that.highError,\n      point: that\n    };\n  },\n  _getLabelPosition: function () {\n    var rotated = this._options.rotated;\n\n    if (this.initialValue > 0) {\n      return rotated ? \"right\" : \"top\";\n    } else {\n      return rotated ? \"left\" : \"bottom\";\n    }\n  },\n  _getFormatObject: function (tooltip) {\n    var that = this;\n\n    var labelFormatObject = that._label.getData();\n\n    return _extend({}, labelFormatObject, {\n      argumentText: tooltip.formatValue(that.initialArgument, \"argument\"),\n      valueText: tooltip.formatValue(that.initialValue)\n    }, _isDefined(labelFormatObject.percent) ? {\n      percentText: tooltip.formatValue(labelFormatObject.percent, \"percent\")\n    } : {}, _isDefined(labelFormatObject.total) ? {\n      totalText: tooltip.formatValue(labelFormatObject.total)\n    } : {});\n  },\n  getMarkerVisibility: function () {\n    return this._options.visible;\n  },\n  coordsIn: function (x, y) {\n    var trackerRadius = this._storeTrackerR();\n\n    return x >= this.x - trackerRadius && x <= this.x + trackerRadius && y >= this.y - trackerRadius && y <= this.y + trackerRadius;\n  },\n  getMinValue: function (noErrorBar) {\n    var errorBarOptions = this._options.errorBars;\n\n    if (errorBarOptions && !noErrorBar) {\n      var displayMode = errorBarOptions.displayMode;\n      var lowValue = \"high\" !== displayMode && _isDefined(this.lowError) ? this.lowError : this.value;\n      var highValue = \"low\" !== displayMode && _isDefined(this.highError) ? this.highError : this.value;\n      return lowValue < highValue ? lowValue : highValue;\n    } else {\n      return this.value;\n    }\n  },\n  getMaxValue: function (noErrorBar) {\n    var errorBarOptions = this._options.errorBars;\n\n    if (errorBarOptions && !noErrorBar) {\n      var displayMode = errorBarOptions.displayMode;\n      var lowValue = \"high\" !== displayMode && _isDefined(this.lowError) ? this.lowError : this.value;\n      var highValue = \"low\" !== displayMode && _isDefined(this.highError) ? this.highError : this.value;\n      return lowValue > highValue ? lowValue : highValue;\n    } else {\n      return this.value;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}