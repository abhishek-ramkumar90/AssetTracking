{"ast":null,"code":"/**\r\n * DevExtreme (viz/palette.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._DEBUG_palettes = void 0;\n\nvar _palettes;\n\nexports.currentPalette = currentPalette;\nexports.generateColors = generateColors;\nexports.getPalette = getPalette;\nexports.registerPalette = registerPalette;\nexports.getAccentColor = getAccentColor;\nexports.createPalette = createPalette;\nexports.getDiscretePalette = getDiscretePalette;\nexports.getGradientPalette = getGradientPalette;\n\nvar _utils = require(\"./core/utils\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _errors = require(\"../core/errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _floor = Math.floor;\nvar _ceil = Math.ceil;\n\nvar _Color = require(\"../color\");\n\nvar _isArray = Array.isArray;\n\nvar _isString = require(\"../core/utils/type\").isString;\n\nvar HIGHLIGHTING_STEP = 50;\nvar DEFAULT_PALETTE = \"material\";\nvar officePalette = {\n  simpleSet: [\"#5f8b95\", \"#ba4d51\", \"#af8a53\", \"#955f71\", \"#859666\", \"#7e688c\"],\n  indicatingSet: [\"#a3b97c\", \"#e1b676\", \"#ec7f83\"],\n  gradientSet: [\"#5f8b95\", \"#ba4d51\"],\n  accentColor: \"#ba4d51\"\n};\nvar palettes = (_palettes = {}, _defineProperty(_palettes, DEFAULT_PALETTE, {\n  simpleSet: [\"#1db2f5\", \"#f5564a\", \"#97c95c\", \"#ffc720\", \"#eb3573\", \"#a63db8\"],\n  indicatingSet: [\"#97c95c\", \"#ffc720\", \"#f5564a\"],\n  gradientSet: [\"#1db2f5\", \"#97c95c\"],\n  accentColor: \"#1db2f5\"\n}), _defineProperty(_palettes, \"default\", officePalette), _defineProperty(_palettes, \"office\", officePalette), _defineProperty(_palettes, \"harmony light\", {\n  simpleSet: [\"#fcb65e\", \"#679ec5\", \"#ad79ce\", \"#7abd5c\", \"#e18e92\", \"#b6d623\", \"#b7abea\", \"#85dbd5\"],\n  indicatingSet: [\"#b6d623\", \"#fcb65e\", \"#e18e92\"],\n  gradientSet: [\"#7abd5c\", \"#fcb65e\"],\n  accentColor: \"#679ec5\"\n}), _defineProperty(_palettes, \"soft pastel\", {\n  simpleSet: [\"#60a69f\", \"#78b6d9\", \"#6682bb\", \"#a37182\", \"#eeba69\", \"#90ba58\", \"#456c68\", \"#7565a4\"],\n  indicatingSet: [\"#90ba58\", \"#eeba69\", \"#a37182\"],\n  gradientSet: [\"#78b6d9\", \"#eeba69\"],\n  accentColor: \"#60a69f\"\n}), _defineProperty(_palettes, \"pastel\", {\n  simpleSet: [\"#bb7862\", \"#70b3a1\", \"#bb626a\", \"#057d85\", \"#ab394b\", \"#dac599\", \"#153459\", \"#b1d2c6\"],\n  indicatingSet: [\"#70b3a1\", \"#dac599\", \"#bb626a\"],\n  gradientSet: [\"#bb7862\", \"#70b3a1\"],\n  accentColor: \"#bb7862\"\n}), _defineProperty(_palettes, \"bright\", {\n  simpleSet: [\"#70c92f\", \"#f8ca00\", \"#bd1550\", \"#e97f02\", \"#9d419c\", \"#7e4452\", \"#9ab57e\", \"#36a3a6\"],\n  indicatingSet: [\"#70c92f\", \"#f8ca00\", \"#bd1550\"],\n  gradientSet: [\"#e97f02\", \"#f8ca00\"],\n  accentColor: \"#e97f02\"\n}), _defineProperty(_palettes, \"soft\", {\n  simpleSet: [\"#cbc87b\", \"#9ab57e\", \"#e55253\", \"#7e4452\", \"#e8c267\", \"#565077\", \"#6babac\", \"#ad6082\"],\n  indicatingSet: [\"#9ab57e\", \"#e8c267\", \"#e55253\"],\n  gradientSet: [\"#9ab57e\", \"#e8c267\"],\n  accentColor: \"#565077\"\n}), _defineProperty(_palettes, \"ocean\", {\n  simpleSet: [\"#75c099\", \"#acc371\", \"#378a8a\", \"#5fa26a\", \"#064970\", \"#38c5d2\", \"#00a7c6\", \"#6f84bb\"],\n  indicatingSet: [\"#c8e394\", \"#7bc59d\", \"#397c8b\"],\n  gradientSet: [\"#acc371\", \"#38c5d2\"],\n  accentColor: \"#378a8a\"\n}), _defineProperty(_palettes, \"vintage\", {\n  simpleSet: [\"#dea484\", \"#efc59c\", \"#cb715e\", \"#eb9692\", \"#a85c4c\", \"#f2c0b5\", \"#c96374\", \"#dd956c\"],\n  indicatingSet: [\"#ffe5c6\", \"#f4bb9d\", \"#e57660\"],\n  gradientSet: [\"#efc59c\", \"#cb715e\"],\n  accentColor: \"#cb715e\"\n}), _defineProperty(_palettes, \"violet\", {\n  simpleSet: [\"#d1a1d1\", \"#eeacc5\", \"#7b5685\", \"#7e7cad\", \"#a13d73\", \"#5b41ab\", \"#e287e2\", \"#689cc1\"],\n  indicatingSet: [\"#d8e2f6\", \"#d0b2da\", \"#d56a8a\"],\n  gradientSet: [\"#eeacc5\", \"#7b5685\"],\n  accentColor: \"#7b5685\"\n}), _defineProperty(_palettes, \"carmine\", {\n  simpleSet: [\"#fb7764\", \"#73d47f\", \"#fed85e\", \"#d47683\", \"#dde392\", \"#757ab2\"],\n  indicatingSet: [\"#5cb85c\", \"#f0ad4e\", \"#d9534f\"],\n  gradientSet: [\"#fb7764\", \"#73d47f\"],\n  accentColor: \"#f05b41\"\n}), _defineProperty(_palettes, \"dark moon\", {\n  simpleSet: [\"#4ddac1\", \"#f4c99a\", \"#80dd9b\", \"#f998b3\", \"#4aaaa0\", \"#a5aef1\"],\n  indicatingSet: [\"#59d8a4\", \"#f0ad4e\", \"#f9517e\"],\n  gradientSet: [\"#4ddac1\", \"#f4c99a\"],\n  accentColor: \"#3debd3\"\n}), _defineProperty(_palettes, \"soft blue\", {\n  simpleSet: [\"#7ab8eb\", \"#97da97\", \"#facb86\", \"#e78683\", \"#839bda\", \"#4db7be\"],\n  indicatingSet: [\"#5cb85c\", \"#f0ad4e\", \"#d9534f\"],\n  gradientSet: [\"#7ab8eb\", \"#97da97\"],\n  accentColor: \"#7ab8eb\"\n}), _defineProperty(_palettes, \"dark violet\", {\n  simpleSet: [\"#9c63ff\", \"#64c064\", \"#eead51\", \"#d2504b\", \"#4b6bbf\", \"#2da7b0\"],\n  indicatingSet: [\"#5cb85c\", \"#f0ad4e\", \"#d9534f\"],\n  gradientSet: [\"#9c63ff\", \"#64c064\"],\n  accentColor: \"#9c63ff\"\n}), _defineProperty(_palettes, \"green mist\", {\n  simpleSet: [\"#3cbab2\", \"#8ed962\", \"#5b9d95\", \"#efcc7c\", \"#f1929f\", \"#4d8dab\"],\n  indicatingSet: [\"#72d63c\", \"#ffc852\", \"#f74a5e\"],\n  gradientSet: [\"#3cbab2\", \"#8ed962\"],\n  accentColor: \"#3cbab2\"\n}), _palettes);\nvar currentPaletteName;\n\nfunction currentPalette(name) {\n  if (void 0 === name) {\n    return currentPaletteName || DEFAULT_PALETTE;\n  } else {\n    name = (0, _utils.normalizeEnum)(name);\n    currentPaletteName = name in palettes ? name : void 0;\n  }\n}\n\nfunction generateColors(palette, count) {\n  var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {\n    keepLastColorInEnd: false\n  };\n  options.type = options.baseColorSet;\n  options.extensionMode = options.paletteExtensionMode;\n  return createPalette(palette, options).generateColors(count);\n}\n\nfunction getPalette(palette, parameters) {\n  parameters = parameters || {};\n  palette = selectPaletteOnSeniority(palette, parameters.themeDefault);\n  var result;\n  var type = parameters.type;\n\n  if (_isArray(palette)) {\n    return palette.slice(0);\n  } else {\n    if (_isString(palette)) {\n      result = palettes[(0, _utils.normalizeEnum)(palette)];\n    }\n\n    if (!result) {\n      result = palettes[currentPalette()];\n    }\n  }\n\n  return type ? result[type].slice(0) : result;\n}\n\nfunction registerPalette(name, palette) {\n  var item = {};\n  var paletteName;\n\n  if (_isArray(palette)) {\n    item.simpleSet = palette.slice(0);\n  } else {\n    if (palette) {\n      item.simpleSet = _isArray(palette.simpleSet) ? palette.simpleSet.slice(0) : void 0;\n      item.indicatingSet = _isArray(palette.indicatingSet) ? palette.indicatingSet.slice(0) : void 0;\n      item.gradientSet = _isArray(palette.gradientSet) ? palette.gradientSet.slice(0) : void 0;\n      item.accentColor = palette.accentColor;\n    }\n  }\n\n  if (!item.accentColor) {\n    item.accentColor = item.simpleSet && item.simpleSet[0];\n  }\n\n  if (item.simpleSet || item.indicatingSet || item.gradientSet) {\n    paletteName = (0, _utils.normalizeEnum)(name);\n    (0, _extend.extend)(palettes[paletteName] = palettes[paletteName] || {}, item);\n  }\n}\n\nfunction getAccentColor(palette, themeDefault) {\n  palette = getPalette(palette, {\n    themeDefault: themeDefault\n  });\n  return palette.accentColor || palette[0];\n}\n\nfunction RingBuf(buf) {\n  var ind = 0;\n\n  this.next = function () {\n    var res = buf[ind++];\n\n    if (ind === buf.length) {\n      this.reset();\n    }\n\n    return res;\n  };\n\n  this.reset = function () {\n    ind = 0;\n  };\n}\n\nfunction getAlternateColorsStrategy(palette, parameters) {\n  var stepHighlight = parameters.useHighlight ? HIGHLIGHTING_STEP : 0;\n  var paletteSteps = new RingBuf([0, stepHighlight, -stepHighlight]);\n  var currentPalette = [];\n\n  function _reset() {\n    var step = paletteSteps.next();\n    currentPalette = step ? getAlteredPalette(palette, step) : palette.slice(0);\n  }\n\n  return {\n    getColor: function (index) {\n      var color = currentPalette[index % palette.length];\n\n      if (index % palette.length === palette.length - 1) {\n        _reset();\n      }\n\n      return color;\n    },\n    generateColors: function (count) {\n      var colors = [];\n      count = count || parameters.count;\n\n      for (var i = 0; i < count; i++) {\n        colors.push(this.getColor(i));\n      }\n\n      return colors;\n    },\n    reset: function () {\n      paletteSteps.reset();\n\n      _reset();\n    }\n  };\n}\n\nfunction getExtrapolateColorsStrategy(palette, parameters) {\n  function convertColor(color, cycleIndex, cycleCount) {\n    var hsl = new _Color(color).hsl;\n    var l = hsl.l / 100;\n    var diapason = cycleCount - 1 / cycleCount;\n    var minL = l - .5 * diapason;\n    var maxL = l + .5 * diapason;\n    var cycleMiddle = (cycleCount - 1) / 2;\n    var cycleDiff = cycleIndex - cycleMiddle;\n\n    if (minL < Math.min(.5, .9 * l)) {\n      minL = Math.min(.5, .9 * l);\n    }\n\n    if (maxL > Math.max(.8, l + .15 * (1 - l))) {\n      maxL = Math.max(.8, l + .15 * (1 - l));\n    }\n\n    if (cycleDiff < 0) {\n      l -= (minL - l) * cycleDiff / cycleMiddle;\n    } else {\n      l += (maxL - l) * (cycleDiff / cycleMiddle);\n    }\n\n    hsl.l = 100 * l;\n    return _Color.prototype.fromHSL(hsl).toHex();\n  }\n\n  return {\n    getColor: function (index, count) {\n      var paletteCount = palette.length;\n\n      var cycles = _floor((count - 1) / paletteCount + 1);\n\n      var color = palette[index % paletteCount];\n\n      if (cycles > 1) {\n        return convertColor(color, _floor(index / paletteCount), cycles);\n      }\n\n      return color;\n    },\n    generateColors: function (count) {\n      var colors = [];\n      count = count || parameters.count;\n\n      for (var i = 0; i < count; i++) {\n        colors.push(this.getColor(i, count));\n      }\n\n      return colors;\n    },\n    reset: function () {}\n  };\n}\n\nfunction getColorMixer(palette, parameters) {\n  var paletteCount = palette.length;\n  var extendedPalette = [];\n\n  function distributeColors(count, colorsCount, startIndex, distribution) {\n    var groupSize = Math.floor(count / colorsCount);\n    var extraItems = count - colorsCount * groupSize;\n    var i = startIndex;\n    var middleIndex;\n    var size;\n\n    while (i < startIndex + count) {\n      size = groupSize;\n\n      if (extraItems > 0) {\n        size += 1;\n        extraItems--;\n      }\n\n      middleIndex = size > 2 ? Math.floor(size / 2) : 0;\n      distribution.push(i + middleIndex);\n      i += size;\n    }\n\n    return distribution.sort(function (a, b) {\n      return a - b;\n    });\n  }\n\n  function getColorAndDistance(arr, startIndex, count) {\n    startIndex = (count + startIndex) % count;\n    var distance = 0;\n\n    for (var i = startIndex; i < 2 * count; i += 1) {\n      var index = (count + i) % count;\n\n      if (arr[index]) {\n        return [arr[index], distance];\n      }\n\n      distance++;\n    }\n  }\n\n  function blendColors(paletteWithEmptyColors, paletteLength) {\n    for (var i = 0; i < paletteLength; i++) {\n      var color = paletteWithEmptyColors[i];\n\n      if (!color) {\n        var color1 = paletteWithEmptyColors[i - 1];\n\n        if (!color1) {\n          continue;\n        } else {\n          var c2 = getColorAndDistance(paletteWithEmptyColors, i, paletteLength);\n          var color2 = new _Color(c2[0]);\n          color1 = new _Color(color1);\n\n          for (var j = 0; j < c2[1]; j++, i++) {\n            paletteWithEmptyColors[i] = color1.blend(color2, (j + 1) / (c2[1] + 1)).toHex();\n          }\n        }\n      }\n    }\n\n    return paletteWithEmptyColors;\n  }\n\n  function extendPalette(count) {\n    if (count <= paletteCount) {\n      return palette;\n    }\n\n    var result = [];\n    var colorInGroups = paletteCount - 2;\n    var currentColorIndex = 0;\n    var cleanColorIndices = [];\n\n    if (parameters.keepLastColorInEnd) {\n      cleanColorIndices = distributeColors(count - 2, colorInGroups, 1, [0, count - 1]);\n    } else {\n      cleanColorIndices = distributeColors(count - 1, paletteCount - 1, 1, [0]);\n    }\n\n    for (var i = 0; i < count; i++) {\n      if (cleanColorIndices.indexOf(i) > -1) {\n        result[i] = palette[currentColorIndex++];\n      }\n    }\n\n    result = blendColors(result, count);\n    return result;\n  }\n\n  return {\n    getColor: function (index, count) {\n      count = count || parameters.count || paletteCount;\n\n      if (extendedPalette.length !== count) {\n        extendedPalette = extendPalette(count);\n      }\n\n      return extendedPalette[index % count];\n    },\n    generateColors: function (count, repeat) {\n      count = count || parameters.count || paletteCount;\n\n      if (repeat && count > paletteCount) {\n        var colors = extendPalette(paletteCount);\n\n        for (var i = 0; i < count - paletteCount; i++) {\n          colors.push(colors[i]);\n        }\n\n        return colors;\n      } else {\n        return paletteCount > 0 ? extendPalette(count).slice(0, count) : [];\n      }\n    },\n    reset: function () {}\n  };\n}\n\nfunction createPalette(palette, parameters, themeDefaultPalette) {\n  var paletteObj = {\n    dispose: function () {\n      this._extensionStrategy = null;\n    },\n    getNextColor: function (count) {\n      return this._extensionStrategy.getColor(this._currentColor++, count);\n    },\n    generateColors: function (count, parameters) {\n      return this._extensionStrategy.generateColors(count, (parameters || {}).repeat);\n    },\n    reset: function () {\n      this._currentColor = 0;\n\n      this._extensionStrategy.reset();\n\n      return this;\n    }\n  };\n  parameters = parameters || {};\n  var extensionMode = (parameters.extensionMode || \"\").toLowerCase();\n  var colors = getPalette(palette, {\n    type: parameters.type || \"simpleSet\",\n    themeDefault: themeDefaultPalette\n  });\n\n  if (\"alternate\" === extensionMode) {\n    paletteObj._extensionStrategy = getAlternateColorsStrategy(colors, parameters);\n  } else {\n    if (\"extrapolate\" === extensionMode) {\n      paletteObj._extensionStrategy = getExtrapolateColorsStrategy(colors, parameters);\n    } else {\n      paletteObj._extensionStrategy = getColorMixer(colors, parameters);\n    }\n  }\n\n  paletteObj.reset();\n  return paletteObj;\n}\n\nfunction getAlteredPalette(originalPalette, step) {\n  var palette = [];\n  var i;\n  var ii = originalPalette.length;\n\n  for (i = 0; i < ii; ++i) {\n    palette.push(getNewColor(originalPalette[i], step));\n  }\n\n  return palette;\n}\n\nfunction getNewColor(currentColor, step) {\n  var newColor = new _Color(currentColor).alter(step);\n  var lightness = getLightness(newColor);\n\n  if (lightness > 200 || lightness < 55) {\n    newColor = new _Color(currentColor).alter(-step / 2);\n  }\n\n  return newColor.toHex();\n}\n\nfunction getLightness(color) {\n  return .3 * color.r + .59 * color.g + .11 * color.b;\n}\n\nfunction getDiscretePalette(source, size, themeDefaultPalette) {\n  var palette = size > 0 ? createDiscreteColors(getPalette(source, {\n    type: \"gradientSet\",\n    themeDefault: themeDefaultPalette\n  }), size) : [];\n  return {\n    getColor: function (index) {\n      return palette[index] || null;\n    }\n  };\n}\n\nfunction createDiscreteColors(source, count) {\n  var colorCount = count - 1;\n  var sourceCount = source.length - 1;\n  var colors = [];\n  var gradient = [];\n  var i;\n\n  function addColor(pos) {\n    var k = sourceCount * pos;\n\n    var kl = _floor(k);\n\n    var kr = _ceil(k);\n\n    gradient.push(colors[kl].blend(colors[kr], k - kl).toHex());\n  }\n\n  for (i = 0; i <= sourceCount; ++i) {\n    colors.push(new _Color(source[i]));\n  }\n\n  if (colorCount > 0) {\n    for (i = 0; i <= colorCount; ++i) {\n      addColor(i / colorCount);\n    }\n  } else {\n    addColor(.5);\n  }\n\n  return gradient;\n}\n\nfunction getGradientPalette(source, themeDefaultPalette) {\n  var palette = getPalette(source, {\n    type: \"gradientSet\",\n    themeDefault: themeDefaultPalette\n  });\n  var color1 = new _Color(palette[0]);\n  var color2 = new _Color(palette[1]);\n  return {\n    getColor: function (ratio) {\n      return 0 <= ratio && ratio <= 1 ? color1.blend(color2, ratio).toHex() : null;\n    }\n  };\n}\n\nfunction selectPaletteOnSeniority(source, themeDefaultPalette) {\n  var result = source || (void 0 === currentPaletteName ? themeDefaultPalette : currentPalette());\n\n  if (\"default\" === result) {\n    _errors2.default.log(\"W0016\", '\"palette\"', \"Default\", \"18.1\", 'Use the \"Office\" value instead.');\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}