{"ast":null,"code":"/**\r\n * DevExtreme (core/element_data.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar WeakMap = require(\"./polyfills/weak_map\");\n\nvar domAdapter = require(\"./dom_adapter\");\n\nvar eventsEngine = require(\"../events/core/events_engine\");\n\nvar MemorizedCallbacks = require(\"./memorized_callbacks\");\n\nvar dataMap = new WeakMap();\nvar strategy;\nvar strategyChanging = new MemorizedCallbacks();\n\nvar beforeCleanData = function () {};\n\nvar afterCleanData = function () {};\n\nvar setDataStrategy = exports.setDataStrategy = function (value) {\n  strategyChanging.fire(value);\n  strategy = value;\n  var cleanData = strategy.cleanData;\n\n  strategy.cleanData = function (nodes) {\n    beforeCleanData(nodes);\n    var result = cleanData.call(this, nodes);\n    afterCleanData(nodes);\n    return result;\n  };\n};\n\nsetDataStrategy({\n  data: function () {\n    var element = arguments[0];\n    var key = arguments[1];\n    var value = arguments[2];\n\n    if (!element) {\n      return;\n    }\n\n    var elementData = dataMap.get(element);\n\n    if (!elementData) {\n      elementData = {};\n      dataMap.set(element, elementData);\n    }\n\n    if (void 0 === key) {\n      return elementData;\n    }\n\n    if (2 === arguments.length) {\n      return elementData[key];\n    }\n\n    elementData[key] = value;\n    return value;\n  },\n  removeData: function (element, key) {\n    if (!element) {\n      return;\n    }\n\n    if (void 0 === key) {\n      dataMap.delete(element);\n    } else {\n      var elementData = dataMap.get(element);\n\n      if (elementData) {\n        delete elementData[key];\n      }\n    }\n  },\n  cleanData: function (elements) {\n    for (var i = 0; i < elements.length; i++) {\n      eventsEngine.off(elements[i]);\n      dataMap.delete(elements[i]);\n    }\n  }\n});\nexports.setDataStrategy = setDataStrategy;\n\nexports.getDataStrategy = function () {\n  return strategy;\n};\n\nexports.data = function () {\n  return strategy.data.apply(this, arguments);\n};\n\nexports.strategyChanging = strategyChanging;\n\nexports.beforeCleanData = function (callback) {\n  beforeCleanData = callback;\n};\n\nexports.afterCleanData = function (callback) {\n  afterCleanData = callback;\n};\n\nexports.cleanData = function (nodes) {\n  return strategy.cleanData.call(this, nodes);\n};\n\nexports.removeData = function (element, key) {\n  return strategy.removeData.call(this, element, key);\n};\n\nexports.cleanDataRecursive = function (element, cleanSelf) {\n  if (!domAdapter.isElementNode(element)) {\n    return;\n  }\n\n  var childElements = element.getElementsByTagName(\"*\");\n  strategy.cleanData(childElements);\n\n  if (cleanSelf) {\n    strategy.cleanData([element]);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}