{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 19.2.7\n * Build date: Thu Mar 26 2020\n *\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar comparer_1 = require(\"./configuration/comparer\");\n\nvar tree_1 = require(\"./configuration/tree\");\n\nvar utils_1 = require(\"./configuration/utils\");\n\nvar OptionsManager =\n/** @class */\nfunction () {\n  function OptionsManager(templatesManager) {\n    this._guards = {};\n    this._isUpdating = false;\n    this._templatesManager = templatesManager;\n    this.onOptionChanged = this.onOptionChanged.bind(this);\n    this._wrapOptionValue = this._wrapOptionValue.bind(this);\n  }\n\n  OptionsManager.prototype.setInstance = function (instance, config) {\n    this._instance = instance;\n    this._currentConfig = config;\n  };\n\n  OptionsManager.prototype.getInitialOptions = function (rootNode) {\n    var config = tree_1.buildConfig(rootNode, false);\n\n    for (var _i = 0, _a = Object.keys(config.templates); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      this._templatesManager.add(key, config.templates[key]);\n    }\n\n    var options = {};\n\n    for (var _b = 0, _c = Object.keys(config.options); _b < _c.length; _b++) {\n      var key = _c[_b];\n      options[key] = this._wrapOptionValue(key, config.options[key]);\n    }\n\n    if (this._templatesManager.templatesCount > 0) {\n      options.integrationOptions = {\n        templates: this._templatesManager.templates\n      };\n    }\n\n    return options;\n  };\n\n  OptionsManager.prototype.update = function (config) {\n    var _this = this;\n\n    var changes = comparer_1.getChanges(config, this._currentConfig);\n\n    if (!changes.options && !changes.templates && !changes.removedOptions.length) {\n      return;\n    }\n\n    this._instance.beginUpdate();\n\n    this._isUpdating = true;\n    changes.removedOptions.forEach(function (optionName) {\n      _this._resetOption(optionName);\n    });\n\n    for (var _i = 0, _a = Object.keys(changes.templates); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      this._templatesManager.add(key, changes.templates[key]);\n    }\n\n    if (this._templatesManager.templatesCount > 0) {\n      this._setValue(\"integrationOptions\", {\n        templates: this._templatesManager.templates\n      });\n    }\n\n    for (var _b = 0, _c = Object.keys(changes.options); _b < _c.length; _b++) {\n      var key = _c[_b];\n\n      this._setValue(key, changes.options[key]);\n    }\n\n    this._isUpdating = false;\n\n    this._instance.endUpdate();\n\n    this._currentConfig = config;\n  };\n\n  OptionsManager.prototype.onOptionChanged = function (e) {\n    if (this._isUpdating) {\n      return;\n    }\n\n    var valueDescriptor = tree_1.findValue(this._currentConfig, e.fullName.split(\".\"));\n\n    if (!valueDescriptor) {\n      return;\n    }\n\n    var value = valueDescriptor.value,\n        type = valueDescriptor.type;\n\n    if (type === tree_1.ValueType.Complex) {\n      for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (value[key] === null || value[key] === undefined || value[key] === e.value[key]) {\n          continue;\n        }\n\n        this._setGuard(utils_1.mergeNameParts(e.fullName, key), value[key]);\n      }\n    } else {\n      if (value === null || value === undefined || value === e.value) {\n        return;\n      }\n\n      this._setGuard(e.fullName, value);\n    }\n  };\n\n  OptionsManager.prototype.dispose = function () {\n    for (var _i = 0, _a = Object.keys(this._guards); _i < _a.length; _i++) {\n      var optionName = _a[_i];\n      window.clearTimeout(this._guards[optionName]);\n      delete this._guards[optionName];\n    }\n  };\n\n  OptionsManager.prototype._wrapOptionValue = function (name, value) {\n    var _this = this;\n\n    if (name.substr(0, 2) === \"on\" && typeof value === \"function\") {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (!_this._isUpdating) {\n          value.apply(void 0, args);\n        }\n      };\n    }\n\n    return value;\n  };\n\n  OptionsManager.prototype._setGuard = function (optionName, optionValue) {\n    var _this = this;\n\n    if (this._guards[optionName] !== undefined) {\n      return;\n    }\n\n    var guardId = window.setTimeout(function () {\n      _this._setValue(optionName, optionValue);\n\n      window.clearTimeout(guardId);\n      delete _this._guards[optionName];\n    });\n    this._guards[optionName] = guardId;\n  };\n\n  OptionsManager.prototype._resetOption = function (name) {\n    this._instance.resetOption(name);\n  };\n\n  OptionsManager.prototype._setValue = function (name, value) {\n    if (this._guards[name]) {\n      window.clearTimeout(this._guards[name]);\n      delete this._guards[name];\n    }\n\n    this._instance.option(name, this._wrapOptionValue(name, value));\n  };\n\n  return OptionsManager;\n}();\n\nexports.OptionsManager = OptionsManager;","map":null,"metadata":{},"sourceType":"script"}