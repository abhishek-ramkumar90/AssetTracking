{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/common.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _config = require(\"../config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _guid = require(\"../guid\");\n\nvar _guid2 = _interopRequireDefault(_guid);\n\nvar _deferred = require(\"../utils/deferred\");\n\nvar _data = require(\"./data\");\n\nvar _iterator = require(\"./iterator\");\n\nvar _type = require(\"./type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar ensureDefined = function (value, defaultValue) {\n  return (0, _type.isDefined)(value) ? value : defaultValue;\n};\n\nvar executeAsync = function (action, context) {\n  var deferred = new _deferred.Deferred();\n  var normalizedContext = context || this;\n  var timerId;\n  var task = {\n    promise: deferred.promise(),\n    abort: function () {\n      clearTimeout(timerId);\n      deferred.rejectWith(normalizedContext);\n    }\n  };\n\n  var callback = function () {\n    var result = action.call(normalizedContext);\n\n    if (result && result.done && (0, _type.isFunction)(result.done)) {\n      result.done(function () {\n        deferred.resolveWith(normalizedContext);\n      });\n    } else {\n      deferred.resolveWith(normalizedContext);\n    }\n  };\n\n  timerId = (arguments[2] || setTimeout)(callback, \"number\" === typeof context ? context : 0);\n  return task;\n};\n\nvar delayedFuncs = [];\nvar delayedNames = [];\nvar delayedDeferreds = [];\nvar executingName;\n\nvar deferExecute = function (name, func, deferred) {\n  if (executingName && executingName !== name) {\n    delayedFuncs.push(func);\n    delayedNames.push(name);\n    deferred = deferred || new _deferred.Deferred();\n    delayedDeferreds.push(deferred);\n    return deferred;\n  } else {\n    var oldExecutingName = executingName;\n    var currentDelayedCount = delayedDeferreds.length;\n    executingName = name;\n    var result = func();\n\n    if (!result) {\n      if (delayedDeferreds.length > currentDelayedCount) {\n        result = _deferred.when.apply(this, delayedDeferreds.slice(currentDelayedCount));\n      } else {\n        if (deferred) {\n          deferred.resolve();\n        }\n      }\n    }\n\n    executingName = oldExecutingName;\n\n    if (deferred && result && result.done) {\n      result.done(deferred.resolve).fail(deferred.reject);\n    }\n\n    if (!executingName && delayedFuncs.length) {\n      (\"render\" === delayedNames.shift() ? deferRender : deferUpdate)(delayedFuncs.shift(), delayedDeferreds.shift());\n    }\n\n    return result || (0, _deferred.when)();\n  }\n};\n\nvar deferRender = function (func, deferred) {\n  return deferExecute(\"render\", func, deferred);\n};\n\nvar deferUpdate = function (func, deferred) {\n  return deferExecute(\"update\", func, deferred);\n};\n\nvar deferRenderer = function (func) {\n  return function () {\n    var that = this;\n    return deferExecute(\"render\", function () {\n      return func.call(that);\n    });\n  };\n};\n\nvar deferUpdater = function (func) {\n  return function () {\n    var that = this;\n    return deferExecute(\"update\", function () {\n      return func.call(that);\n    });\n  };\n};\n\nvar findBestMatches = function (targetFilter, items, mapFn) {\n  var bestMatches = [];\n  var maxMatchCount = 0;\n  (0, _iterator.each)(items, function (index, itemSrc) {\n    var matchCount = 0;\n    var item = mapFn ? mapFn(itemSrc) : itemSrc;\n    (0, _iterator.each)(targetFilter, function (paramName, targetValue) {\n      var value = item[paramName];\n\n      if (void 0 === value) {\n        return;\n      }\n\n      if (match(value, targetValue)) {\n        matchCount++;\n        return;\n      }\n\n      matchCount = -1;\n      return false;\n    });\n\n    if (matchCount < maxMatchCount) {\n      return;\n    }\n\n    if (matchCount > maxMatchCount) {\n      bestMatches.length = 0;\n      maxMatchCount = matchCount;\n    }\n\n    bestMatches.push(itemSrc);\n  });\n  return bestMatches;\n};\n\nvar match = function (value, targetValue) {\n  if (Array.isArray(value) && Array.isArray(targetValue)) {\n    var mismatch = false;\n    (0, _iterator.each)(value, function (index, valueItem) {\n      if (valueItem !== targetValue[index]) {\n        mismatch = true;\n        return false;\n      }\n    });\n\n    if (mismatch) {\n      return false;\n    }\n\n    return true;\n  }\n\n  if (value === targetValue) {\n    return true;\n  }\n\n  return false;\n};\n\nvar splitPair = function (raw) {\n  switch (_typeof(raw)) {\n    case \"string\":\n      return raw.split(/\\s+/, 2);\n\n    case \"object\":\n      return [raw.x || raw.h, raw.y || raw.v];\n\n    case \"number\":\n      return [raw];\n\n    default:\n      return raw;\n  }\n};\n\nvar normalizeKey = function (id) {\n  var key = (0, _type.isString)(id) ? id : id.toString();\n  var arr = key.match(/[^a-zA-Z0-9_]/g);\n  arr && (0, _iterator.each)(arr, function (_, sign) {\n    key = key.replace(sign, \"__\" + sign.charCodeAt() + \"__\");\n  });\n  return key;\n};\n\nvar denormalizeKey = function (key) {\n  var arr = key.match(/__\\d+__/g);\n  arr && arr.forEach(function (char) {\n    var charCode = parseInt(char.replace(\"__\", \"\"));\n    key = key.replace(char, String.fromCharCode(charCode));\n  });\n  return key;\n};\n\nvar pairToObject = function (raw, preventRound) {\n  var pair = splitPair(raw);\n  var h = preventRound ? parseFloat(pair && pair[0]) : parseInt(pair && pair[0], 10);\n  var v = preventRound ? parseFloat(pair && pair[1]) : parseInt(pair && pair[1], 10);\n\n  if (!isFinite(h)) {\n    h = 0;\n  }\n\n  if (!isFinite(v)) {\n    v = h;\n  }\n\n  return {\n    h: h,\n    v: v\n  };\n};\n\nvar getKeyHash = function (key) {\n  if (key instanceof _guid2.default) {\n    return key.toString();\n  } else {\n    if ((0, _type.isObject)(key) || Array.isArray(key)) {\n      try {\n        var keyHash = JSON.stringify(key);\n        return \"{}\" === keyHash ? key : keyHash;\n      } catch (e) {\n        return key;\n      }\n    }\n  }\n\n  return key;\n};\n\nvar escapeRegExp = function (string) {\n  return string.replace(/[[\\]{}\\-()*+?.\\\\^$|\\s]/g, \"\\\\$&\");\n};\n\nvar applyServerDecimalSeparator = function (value) {\n  var separator = (0, _config2.default)().serverDecimalSeparator;\n\n  if ((0, _type.isDefined)(value)) {\n    value = value.toString().replace(\".\", separator);\n  }\n\n  return value;\n};\n\nvar noop = function () {};\n\nvar asyncNoop = function () {\n  return new _deferred.Deferred().resolve().promise();\n};\n\nvar grep = function (elements, checkFunction, invert) {\n  var result = [];\n  var check;\n  var expectedCheck = !invert;\n\n  for (var i = 0; i < elements.length; i++) {\n    check = !!checkFunction(elements[i], i);\n\n    if (check === expectedCheck) {\n      result.push(elements[i]);\n    }\n  }\n\n  return result;\n};\n\nvar arraysEqualByValue = function (array1, array2, depth) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < array1.length; i++) {\n    if (!equalByValue(array1[i], array2[i], depth + 1)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar objectsEqualByValue = function (object1, object2, depth, strict) {\n  for (var propertyName in object1) {\n    if (Object.prototype.hasOwnProperty.call(object1, propertyName) && !equalByValue(object1[propertyName], object2[propertyName], depth + 1, strict)) {\n      return false;\n    }\n  }\n\n  for (var _propertyName in object2) {\n    if (!(_propertyName in object1)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar maxEqualityDepth = 3;\n\nvar equalByValue = function (object1, object2) {\n  var depth = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;\n  var strict = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\n  object1 = (0, _data.toComparable)(object1, true);\n  object2 = (0, _data.toComparable)(object2, true);\n  var comparisonResult = strict ? object1 === object2 : object1 == object2;\n\n  if (comparisonResult || depth >= maxEqualityDepth) {\n    return true;\n  }\n\n  if ((0, _type.isObject)(object1) && (0, _type.isObject)(object2)) {\n    return objectsEqualByValue(object1, object2, depth, strict);\n  } else {\n    if (Array.isArray(object1) && Array.isArray(object2)) {\n      return arraysEqualByValue(object1, object2, depth);\n    }\n  }\n\n  return false;\n};\n\nexports.ensureDefined = ensureDefined;\nexports.executeAsync = executeAsync;\nexports.deferRender = deferRender;\nexports.deferRenderer = deferRenderer;\nexports.deferUpdate = deferUpdate;\nexports.deferUpdater = deferUpdater;\nexports.pairToObject = pairToObject;\nexports.splitPair = splitPair;\nexports.findBestMatches = findBestMatches;\nexports.normalizeKey = normalizeKey;\nexports.denormalizeKey = denormalizeKey;\nexports.getKeyHash = getKeyHash;\nexports.escapeRegExp = escapeRegExp;\nexports.applyServerDecimalSeparator = applyServerDecimalSeparator;\nexports.noop = noop;\nexports.asyncNoop = asyncNoop;\nexports.grep = grep;\nexports.equalByValue = equalByValue;","map":null,"metadata":{},"sourceType":"script"}