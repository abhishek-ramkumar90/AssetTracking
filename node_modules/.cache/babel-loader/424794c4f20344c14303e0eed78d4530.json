{"ast":null,"code":"/**\r\n * DevExtreme (core/events_strategy.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar Callbacks = require(\"./utils/callbacks\");\n\nvar isFunction = require(\"./utils/type\").isFunction;\n\nvar each = require(\"./utils/iterator\").each;\n\nvar Class = require(\"./class\");\n\nmodule.exports = Class.inherit({\n  ctor: function (owner) {\n    this._events = {};\n    this._owner = owner;\n  },\n  hasEvent: function (eventName) {\n    var callbacks = this._events[eventName];\n\n    if (callbacks) {\n      return callbacks.has();\n    }\n\n    return false;\n  },\n  fireEvent: function (eventName, eventArgs) {\n    var callbacks = this._events[eventName];\n\n    if (callbacks) {\n      callbacks.fireWith(this._owner, eventArgs);\n    }\n  },\n  on: function (eventName, eventHandler) {\n    var callbacks = this._events[eventName];\n    var addFn;\n\n    if (!callbacks) {\n      callbacks = Callbacks();\n      this._events[eventName] = callbacks;\n    }\n\n    addFn = callbacks.originalAdd || callbacks.add;\n    addFn.call(callbacks, eventHandler);\n  },\n  off: function (eventName, eventHandler) {\n    var callbacks = this._events[eventName];\n\n    if (callbacks) {\n      if (isFunction(eventHandler)) {\n        callbacks.remove(eventHandler);\n      } else {\n        callbacks.empty();\n      }\n    }\n  },\n  dispose: function () {\n    each(this._events, function () {\n      this.empty();\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}