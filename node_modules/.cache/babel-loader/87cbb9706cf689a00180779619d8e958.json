{"ast":null,"code":"const React = require('react');\n\nconst hoistStatics = require('hoist-non-react-statics');\n\nconst objectAssign = require('object-assign');\n\nconst Cookies = require('universal-cookie');\n\nconst subscribes = {};\nlet translations = {};\nlet defaultLanguage = 'en';\nlet language = 'en';\nlet count = 0;\nlet cookies;\nlet cookieName = 'language';\nlet cookieOption = {\n  path: '/',\n  maxAge: 157680000\n};\n\nfunction subscribe(cb) {\n  const newId = count;\n  subscribes[newId] = cb;\n  count += 1;\n  return newId;\n}\n\nfunction unsubscribe(id) {\n  delete subscribes[id];\n}\n\nfunction triggerSubscriptions() {\n  Object.keys(subscribes).forEach(id => {\n    new Promise(resolve => {\n      subscribes[id]();\n      resolve();\n    }).then();\n  });\n}\n\nfunction getLanguages() {\n  return Object.keys(translations);\n}\n\nfunction getDefaultLanguage() {\n  return defaultLanguage;\n}\n\nfunction getLanguage() {\n  return language;\n}\n\nfunction setDefaultLanguage(lang) {\n  defaultLanguage = lang;\n  language = lang;\n}\n\nfunction setLanguage(lang) {\n  if (getLanguages().indexOf(lang) === -1) {\n    return;\n  }\n\n  language = lang;\n  triggerSubscriptions();\n\n  if (cookies && process.browser) {\n    cookies.set(cookieName, language, cookieOption);\n  }\n}\n\nfunction setLanguageCookie(name, option, reqCookie) {\n  cookies = new Cookies(reqCookie);\n  cookieName = name || cookieName;\n  cookieOption = Object.assign({}, cookieOption, option);\n  const lang = cookies.get(name);\n\n  if (lang) {\n    setLanguage(lang);\n  }\n}\n\nfunction setTranslations(userTranslations) {\n  translations = userTranslations;\n  triggerSubscriptions();\n}\n\nfunction setDefaultTranslations(userTranslations) {\n  if (getLanguages().length !== 0) {\n    setTranslations(userTranslations);\n    return;\n  }\n\n  translations = userTranslations;\n}\n\nfunction getTranslation(lang) {\n  return translations[lang];\n}\n\nfunction t(path, params, lang) {\n  const selectLang = lang || language;\n\n  function fallback() {\n    if (selectLang !== defaultLanguage) {\n      return t(path, params, defaultLanguage);\n    }\n\n    return path;\n  }\n\n  let translationObj = getTranslation(selectLang);\n\n  if (!translationObj) {\n    return fallback();\n  }\n\n  const translationKeys = path.split('.');\n  let translation = '';\n  translationKeys.forEach(key => {\n    const temp = translationObj[key];\n\n    if (typeof translationObj[key] === 'object') {\n      translationObj = translationObj[key];\n    } else if (typeof temp === 'string') {\n      translation = temp;\n    }\n  });\n\n  if (!translation) {\n    return fallback();\n  }\n\n  if (params) {\n    Object.keys(params).forEach(key => {\n      const replace = \"{\".concat(key, \"}\");\n      translation = translation.replace(replace, params[key]);\n    });\n  }\n\n  return translation;\n}\n\nfunction translate(Component) {\n  class TranslatedComponet extends React.Component {\n    componentDidMount() {\n      this.id = subscribe(() => this.forceUpdate());\n    }\n\n    componentWillUnmount() {\n      unsubscribe(this.id);\n    }\n\n    render() {\n      return React.createElement(Component, objectAssign({}, this.props, {\n        t: (key, args, lang) => t(key, args, lang)\n      }));\n    }\n\n  }\n\n  return hoistStatics(TranslatedComponet, Component);\n}\n\nmodule.exports = {\n  getLanguages,\n  getDefaultLanguage,\n  getLanguage,\n  setDefaultLanguage,\n  setLanguage,\n  setLanguageCookie,\n  setDefaultTranslations,\n  setTranslations,\n  translate,\n  subscribe,\n  unsubscribe,\n  t\n};","map":null,"metadata":{},"sourceType":"script"}