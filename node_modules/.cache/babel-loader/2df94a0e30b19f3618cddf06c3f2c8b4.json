{"ast":null,"code":"/**\r\n * DevExtreme (core/renderer_base.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar dataUtils = require(\"./element_data\");\n\nvar domAdapter = require(\"./dom_adapter\");\n\nvar windowUtils = require(\"./utils/window\");\n\nvar window = windowUtils.getWindow();\n\nvar typeUtils = require(\"./utils/type\");\n\nvar styleUtils = require(\"./utils/style\");\n\nvar sizeUtils = require(\"./utils/size\");\n\nvar htmlParser = require(\"./utils/html_parser\");\n\nvar renderer = function (selector, context) {\n  return new initRender(selector, context);\n};\n\nvar initRender = function (selector, context) {\n  if (!selector) {\n    this.length = 0;\n    return this;\n  }\n\n  if (\"string\" === typeof selector) {\n    if (\"body\" === selector) {\n      this[0] = context ? context.body : domAdapter.getBody();\n      this.length = 1;\n      return this;\n    }\n\n    context = context || domAdapter.getDocument();\n\n    if (\"<\" === selector[0]) {\n      this[0] = domAdapter.createElement(selector.slice(1, -1), context);\n      this.length = 1;\n      return this;\n    }\n\n    [].push.apply(this, domAdapter.querySelectorAll(context, selector));\n    return this;\n  } else {\n    if (domAdapter.isNode(selector) || typeUtils.isWindow(selector)) {\n      this[0] = selector;\n      this.length = 1;\n      return this;\n    } else {\n      if (Array.isArray(selector)) {\n        [].push.apply(this, selector);\n        return this;\n      }\n    }\n  }\n\n  return renderer(selector.toArray ? selector.toArray() : [selector]);\n};\n\nrenderer.fn = {\n  dxRenderer: true\n};\ninitRender.prototype = renderer.fn;\n\nvar repeatMethod = function (methodName, args) {\n  for (var i = 0; i < this.length; i++) {\n    var item = renderer(this[i]);\n    item[methodName].apply(item, args);\n  }\n\n  return this;\n};\n\nvar setAttributeValue = function (element, attrName, value) {\n  if (void 0 !== value && null !== value) {\n    domAdapter.setAttribute(element, attrName, value);\n  } else {\n    domAdapter.removeAttribute(element, attrName);\n  }\n};\n\ninitRender.prototype.show = function () {\n  return this.toggle(true);\n};\n\ninitRender.prototype.hide = function () {\n  return this.toggle(false);\n};\n\ninitRender.prototype.toggle = function (value) {\n  if (this[0]) {\n    this.toggleClass(\"dx-state-invisible\", !value);\n  }\n\n  return this;\n};\n\ninitRender.prototype.attr = function (attrName, value) {\n  if (this.length > 1 && arguments.length > 1) {\n    return repeatMethod.call(this, \"attr\", arguments);\n  }\n\n  if (!this[0]) {\n    if (typeUtils.isObject(attrName) || void 0 !== value) {\n      return this;\n    } else {\n      return;\n    }\n  }\n\n  if (!this[0].getAttribute) {\n    return this.prop(attrName, value);\n  }\n\n  if (\"string\" === typeof attrName && 1 === arguments.length) {\n    var result = this[0].getAttribute(attrName);\n    return null == result ? void 0 : result;\n  } else {\n    if (typeUtils.isPlainObject(attrName)) {\n      for (var key in attrName) {\n        this.attr(key, attrName[key]);\n      }\n    } else {\n      setAttributeValue(this[0], attrName, value);\n    }\n  }\n\n  return this;\n};\n\ninitRender.prototype.removeAttr = function (attrName) {\n  this[0] && domAdapter.removeAttribute(this[0], attrName);\n  return this;\n};\n\ninitRender.prototype.prop = function (propName, value) {\n  if (!this[0]) {\n    return this;\n  }\n\n  if (\"string\" === typeof propName && 1 === arguments.length) {\n    return this[0][propName];\n  } else {\n    if (typeUtils.isPlainObject(propName)) {\n      for (var key in propName) {\n        this.prop(key, propName[key]);\n      }\n    } else {\n      domAdapter.setProperty(this[0], propName, value);\n    }\n  }\n\n  return this;\n};\n\ninitRender.prototype.addClass = function (className) {\n  return this.toggleClass(className, true);\n};\n\ninitRender.prototype.removeClass = function (className) {\n  return this.toggleClass(className, false);\n};\n\ninitRender.prototype.hasClass = function (className) {\n  if (!this[0] || void 0 === this[0].className) {\n    return false;\n  }\n\n  var classNames = className.split(\" \");\n\n  for (var i = 0; i < classNames.length; i++) {\n    if (this[0].classList) {\n      if (this[0].classList.contains(classNames[i])) {\n        return true;\n      }\n    } else {\n      var _className = typeUtils.isString(this[0].className) ? this[0].className : domAdapter.getAttribute(this[0], \"class\");\n\n      if ((_className || \"\").split(\" \").indexOf(classNames[i]) >= 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\ninitRender.prototype.toggleClass = function (className, value) {\n  if (this.length > 1) {\n    return repeatMethod.call(this, \"toggleClass\", arguments);\n  }\n\n  if (!this[0] || !className) {\n    return this;\n  }\n\n  value = void 0 === value ? !this.hasClass(className) : value;\n  var classNames = className.split(\" \");\n\n  for (var i = 0; i < classNames.length; i++) {\n    domAdapter.setClass(this[0], classNames[i], value);\n  }\n\n  return this;\n};\n\n[\"width\", \"height\", \"outerWidth\", \"outerHeight\", \"innerWidth\", \"innerHeight\"].forEach(function (methodName) {\n  var partialName = methodName.toLowerCase().indexOf(\"width\") >= 0 ? \"Width\" : \"Height\";\n  var propName = partialName.toLowerCase();\n  var isOuter = 0 === methodName.indexOf(\"outer\");\n  var isInner = 0 === methodName.indexOf(\"inner\");\n\n  initRender.prototype[methodName] = function (value) {\n    if (this.length > 1 && arguments.length > 0) {\n      return repeatMethod.call(this, methodName, arguments);\n    }\n\n    var element = this[0];\n\n    if (!element) {\n      return;\n    }\n\n    if (typeUtils.isWindow(element)) {\n      return isOuter ? element[\"inner\" + partialName] : domAdapter.getDocumentElement()[\"client\" + partialName];\n    }\n\n    if (domAdapter.isDocument(element)) {\n      var documentElement = domAdapter.getDocumentElement();\n      var body = domAdapter.getBody();\n      return Math.max(body[\"scroll\" + partialName], body[\"offset\" + partialName], documentElement[\"scroll\" + partialName], documentElement[\"offset\" + partialName], documentElement[\"client\" + partialName]);\n    }\n\n    if (0 === arguments.length || \"boolean\" === typeof value) {\n      var include = {\n        paddings: isInner || isOuter,\n        borders: isOuter,\n        margins: value\n      };\n      return sizeUtils.getSize(element, propName, include);\n    }\n\n    if (void 0 === value || null === value) {\n      return this;\n    }\n\n    if (typeUtils.isNumeric(value)) {\n      var elementStyles = window.getComputedStyle(element);\n      var sizeAdjustment = sizeUtils.getElementBoxParams(propName, elementStyles);\n      var isBorderBox = \"border-box\" === elementStyles.boxSizing;\n      value = Number(value);\n\n      if (isOuter) {\n        value -= isBorderBox ? 0 : sizeAdjustment.border + sizeAdjustment.padding;\n      } else {\n        if (isInner) {\n          value += isBorderBox ? sizeAdjustment.border : -sizeAdjustment.padding;\n        } else {\n          if (isBorderBox) {\n            value += sizeAdjustment.border + sizeAdjustment.padding;\n          }\n        }\n      }\n    }\n\n    value += typeUtils.isNumeric(value) ? \"px\" : \"\";\n    domAdapter.setStyle(element, propName, value);\n    return this;\n  };\n});\n\ninitRender.prototype.html = function (value) {\n  if (!arguments.length) {\n    return this[0].innerHTML;\n  }\n\n  this.empty();\n\n  if (\"string\" === typeof value && !htmlParser.isTablePart(value) || \"number\" === typeof value) {\n    this[0].innerHTML = value;\n    return this;\n  }\n\n  return this.append(htmlParser.parseHTML(value));\n};\n\nvar appendElements = function (element, nextSibling) {\n  if (!this[0] || !element) {\n    return;\n  }\n\n  if (\"string\" === typeof element) {\n    element = htmlParser.parseHTML(element);\n  } else {\n    if (element.nodeType) {\n      element = [element];\n    } else {\n      if (typeUtils.isNumeric(element)) {\n        element = [domAdapter.createTextNode(element)];\n      }\n    }\n  }\n\n  for (var i = 0; i < element.length; i++) {\n    var item = element[i];\n    var container = this[0];\n    var wrapTR = \"TABLE\" === container.tagName && \"TR\" === item.tagName;\n\n    if (wrapTR && container.tBodies && container.tBodies.length) {\n      container = container.tBodies[0];\n    }\n\n    domAdapter.insertElement(container, item.nodeType ? item : item[0], nextSibling);\n  }\n};\n\nvar setCss = function (name, value) {\n  if (!this[0] || !this[0].style) {\n    return;\n  }\n\n  if (null === value || \"number\" === typeof value && isNaN(value)) {\n    return;\n  }\n\n  name = styleUtils.styleProp(name);\n\n  for (var i = 0; i < this.length; i++) {\n    this[i].style[name] = styleUtils.normalizeStyleProp(name, value);\n  }\n};\n\ninitRender.prototype.css = function (name, value) {\n  if (typeUtils.isString(name)) {\n    if (2 === arguments.length) {\n      setCss.call(this, name, value);\n    } else {\n      if (!this[0]) {\n        return;\n      }\n\n      name = styleUtils.styleProp(name);\n      var result = window.getComputedStyle(this[0])[name] || this[0].style[name];\n      return typeUtils.isNumeric(result) ? result.toString() : result;\n    }\n  } else {\n    if (typeUtils.isPlainObject(name)) {\n      for (var key in name) {\n        setCss.call(this, key, name[key]);\n      }\n    }\n  }\n\n  return this;\n};\n\ninitRender.prototype.prepend = function (element) {\n  if (arguments.length > 1) {\n    for (var i = 0; i < arguments.length; i++) {\n      this.prepend(arguments[i]);\n    }\n\n    return this;\n  }\n\n  appendElements.apply(this, [element, this[0].firstChild]);\n  return this;\n};\n\ninitRender.prototype.append = function (element) {\n  if (arguments.length > 1) {\n    for (var i = 0; i < arguments.length; i++) {\n      this.append(arguments[i]);\n    }\n\n    return this;\n  }\n\n  appendElements.apply(this, [element]);\n  return this;\n};\n\ninitRender.prototype.prependTo = function (element) {\n  if (this.length > 1) {\n    for (var i = this.length - 1; i >= 0; i--) {\n      renderer(this[i]).prependTo(element);\n    }\n\n    return this;\n  }\n\n  element = renderer(element);\n\n  if (element[0]) {\n    domAdapter.insertElement(element[0], this[0], element[0].firstChild);\n  }\n\n  return this;\n};\n\ninitRender.prototype.appendTo = function (element) {\n  if (this.length > 1) {\n    return repeatMethod.call(this, \"appendTo\", arguments);\n  }\n\n  domAdapter.insertElement(renderer(element)[0], this[0]);\n  return this;\n};\n\ninitRender.prototype.insertBefore = function (element) {\n  if (element && element[0]) {\n    domAdapter.insertElement(element[0].parentNode, this[0], element[0]);\n  }\n\n  return this;\n};\n\ninitRender.prototype.insertAfter = function (element) {\n  if (element && element[0]) {\n    domAdapter.insertElement(element[0].parentNode, this[0], element[0].nextSibling);\n  }\n\n  return this;\n};\n\ninitRender.prototype.before = function (element) {\n  if (this[0]) {\n    domAdapter.insertElement(this[0].parentNode, element[0], this[0]);\n  }\n\n  return this;\n};\n\ninitRender.prototype.after = function (element) {\n  if (this[0]) {\n    domAdapter.insertElement(this[0].parentNode, element[0], this[0].nextSibling);\n  }\n\n  return this;\n};\n\ninitRender.prototype.wrap = function (wrapper) {\n  if (this[0]) {\n    var wrap = renderer(wrapper);\n    wrap.insertBefore(this);\n    wrap.append(this);\n  }\n\n  return this;\n};\n\ninitRender.prototype.wrapInner = function (wrapper) {\n  var contents = this.contents();\n\n  if (contents.length) {\n    contents.wrap(wrapper);\n  } else {\n    this.append(wrapper);\n  }\n\n  return this;\n};\n\ninitRender.prototype.replaceWith = function (element) {\n  if (!(element && element[0])) {\n    return;\n  }\n\n  if (element.is(this)) {\n    return this;\n  }\n\n  element.insertBefore(this);\n  this.remove();\n  return element;\n};\n\ninitRender.prototype.remove = function () {\n  if (this.length > 1) {\n    return repeatMethod.call(this, \"remove\", arguments);\n  }\n\n  dataUtils.cleanDataRecursive(this[0], true);\n  domAdapter.removeElement(this[0]);\n  return this;\n};\n\ninitRender.prototype.detach = function () {\n  if (this.length > 1) {\n    return repeatMethod.call(this, \"detach\", arguments);\n  }\n\n  domAdapter.removeElement(this[0]);\n  return this;\n};\n\ninitRender.prototype.empty = function () {\n  if (this.length > 1) {\n    return repeatMethod.call(this, \"empty\", arguments);\n  }\n\n  dataUtils.cleanDataRecursive(this[0]);\n  domAdapter.setText(this[0], \"\");\n  return this;\n};\n\ninitRender.prototype.clone = function () {\n  var result = [];\n\n  for (var i = 0; i < this.length; i++) {\n    result.push(this[i].cloneNode(true));\n  }\n\n  return renderer(result);\n};\n\ninitRender.prototype.text = function (value) {\n  if (!arguments.length) {\n    var result = \"\";\n\n    for (var i = 0; i < this.length; i++) {\n      result += this[i] && this[i].textContent || \"\";\n    }\n\n    return result;\n  }\n\n  var text = typeUtils.isFunction(value) ? value() : value;\n  dataUtils.cleanDataRecursive(this[0], false);\n  domAdapter.setText(this[0], typeUtils.isDefined(text) ? text : \"\");\n  return this;\n};\n\ninitRender.prototype.val = function (value) {\n  if (1 === arguments.length) {\n    return this.prop(\"value\", typeUtils.isDefined(value) ? value : \"\");\n  }\n\n  return this.prop(\"value\");\n};\n\ninitRender.prototype.contents = function () {\n  if (!this[0]) {\n    return renderer();\n  }\n\n  var result = [];\n  result.push.apply(result, this[0].childNodes);\n  return renderer(result);\n};\n\ninitRender.prototype.find = function (selector) {\n  var result = renderer();\n\n  if (!selector) {\n    return result;\n  }\n\n  var nodes = [];\n  var i;\n\n  if (\"string\" === typeof selector) {\n    selector = selector.trim();\n\n    for (i = 0; i < this.length; i++) {\n      var element = this[i];\n\n      if (domAdapter.isElementNode(element)) {\n        var elementId = element.getAttribute(\"id\");\n        var queryId = elementId || \"dx-query-children\";\n\n        if (!elementId) {\n          setAttributeValue(element, \"id\", queryId);\n        }\n\n        queryId = \"[id='\" + queryId + \"'] \";\n        var querySelector = queryId + selector.replace(/([^\\\\])(,)/g, \"$1, \" + queryId);\n        nodes.push.apply(nodes, domAdapter.querySelectorAll(element, querySelector));\n        setAttributeValue(element, \"id\", elementId);\n      } else {\n        if (domAdapter.isDocument(element)) {\n          nodes.push.apply(nodes, domAdapter.querySelectorAll(element, selector));\n        }\n      }\n    }\n  } else {\n    for (i = 0; i < this.length; i++) {\n      selector = domAdapter.isNode(selector) ? selector : selector[0];\n\n      if (this[i] !== selector && this[i].contains(selector)) {\n        nodes.push(selector);\n      }\n    }\n  }\n\n  return result.add(nodes);\n};\n\nvar isVisible = function (_, element) {\n  if (!element.nodeType) {\n    return true;\n  }\n\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n};\n\ninitRender.prototype.filter = function (selector) {\n  if (!selector) {\n    return renderer();\n  }\n\n  if (\":visible\" === selector) {\n    return this.filter(isVisible);\n  } else {\n    if (\":hidden\" === selector) {\n      return this.filter(function (_, element) {\n        return !isVisible(_, element);\n      });\n    }\n  }\n\n  var result = [];\n\n  for (var i = 0; i < this.length; i++) {\n    var item = this[i];\n\n    if (domAdapter.isElementNode(item) && \"string\" === typeUtils.type(selector)) {\n      domAdapter.elementMatches(item, selector) && result.push(item);\n    } else {\n      if (domAdapter.isNode(selector) || typeUtils.isWindow(selector)) {\n        selector === item && result.push(item);\n      } else {\n        if (typeUtils.isFunction(selector)) {\n          selector.call(item, i, item) && result.push(item);\n        } else {\n          for (var j = 0; j < selector.length; j++) {\n            selector[j] === item && result.push(item);\n          }\n        }\n      }\n    }\n  }\n\n  return renderer(result);\n};\n\ninitRender.prototype.not = function (selector) {\n  var result = [];\n  var nodes = this.filter(selector).toArray();\n\n  for (var i = 0; i < this.length; i++) {\n    if (nodes.indexOf(this[i]) === -1) {\n      result.push(this[i]);\n    }\n  }\n\n  return renderer(result);\n};\n\ninitRender.prototype.is = function (selector) {\n  return !!this.filter(selector).length;\n};\n\ninitRender.prototype.children = function (selector) {\n  var result = [];\n\n  for (var i = 0; i < this.length; i++) {\n    var nodes = this[i] ? this[i].childNodes : [];\n\n    for (var j = 0; j < nodes.length; j++) {\n      if (domAdapter.isElementNode(nodes[j])) {\n        result.push(nodes[j]);\n      }\n    }\n  }\n\n  result = renderer(result);\n  return selector ? result.filter(selector) : result;\n};\n\ninitRender.prototype.siblings = function () {\n  var element = this[0];\n\n  if (!element || !element.parentNode) {\n    return renderer();\n  }\n\n  var result = [];\n  var parentChildNodes = element.parentNode.childNodes || [];\n\n  for (var i = 0; i < parentChildNodes.length; i++) {\n    var node = parentChildNodes[i];\n\n    if (domAdapter.isElementNode(node) && node !== element) {\n      result.push(node);\n    }\n  }\n\n  return renderer(result);\n};\n\ninitRender.prototype.each = function (callback) {\n  for (var i = 0; i < this.length; i++) {\n    if (false === callback.call(this[i], i, this[i])) {\n      break;\n    }\n  }\n};\n\ninitRender.prototype.index = function (element) {\n  if (!element) {\n    return this.parent().children().index(this);\n  }\n\n  element = renderer(element);\n  return this.toArray().indexOf(element[0]);\n};\n\ninitRender.prototype.get = function (index) {\n  return this[index < 0 ? this.length + index : index];\n};\n\ninitRender.prototype.eq = function (index) {\n  index = index < 0 ? this.length + index : index;\n  return renderer(this[index]);\n};\n\ninitRender.prototype.first = function () {\n  return this.eq(0);\n};\n\ninitRender.prototype.last = function () {\n  return this.eq(-1);\n};\n\ninitRender.prototype.parent = function (selector) {\n  if (!this[0]) {\n    return renderer();\n  }\n\n  var result = renderer(this[0].parentNode);\n  return !selector || result.is(selector) ? result : renderer();\n};\n\ninitRender.prototype.parents = function (selector) {\n  var result = [];\n  var parent = this.parent();\n\n  while (parent && parent[0] && !domAdapter.isDocument(parent[0])) {\n    if (domAdapter.isElementNode(parent[0])) {\n      if (!selector || selector && parent.is(selector)) {\n        result.push(parent.get(0));\n      }\n    }\n\n    parent = parent.parent();\n  }\n\n  return renderer(result);\n};\n\ninitRender.prototype.closest = function (selector) {\n  if (this.is(selector)) {\n    return this;\n  }\n\n  var parent = this.parent();\n\n  while (parent && parent.length) {\n    if (parent.is(selector)) {\n      return parent;\n    }\n\n    parent = parent.parent();\n  }\n\n  return renderer();\n};\n\ninitRender.prototype.next = function (selector) {\n  if (!this[0]) {\n    return renderer();\n  }\n\n  var next = renderer(this[0].nextSibling);\n\n  if (!arguments.length) {\n    return next;\n  }\n\n  while (next && next.length) {\n    if (next.is(selector)) {\n      return next;\n    }\n\n    next = next.next();\n  }\n\n  return renderer();\n};\n\ninitRender.prototype.prev = function () {\n  if (!this[0]) {\n    return renderer();\n  }\n\n  return renderer(this[0].previousSibling);\n};\n\ninitRender.prototype.add = function (selector) {\n  var targets = renderer(selector);\n  var result = this.toArray();\n\n  for (var i = 0; i < targets.length; i++) {\n    var target = targets[i];\n\n    if (result.indexOf(target) === -1) {\n      result.push(target);\n    }\n  }\n\n  return renderer(result);\n};\n\nvar emptyArray = [];\n\ninitRender.prototype.splice = function () {\n  return renderer(emptyArray.splice.apply(this, arguments));\n};\n\ninitRender.prototype.slice = function () {\n  return renderer(emptyArray.slice.apply(this, arguments));\n};\n\ninitRender.prototype.toArray = function () {\n  return emptyArray.slice.call(this);\n};\n\nvar getWindowByElement = function (element) {\n  return typeUtils.isWindow(element) ? element : element.defaultView;\n};\n\ninitRender.prototype.offset = function () {\n  if (!this[0]) {\n    return;\n  }\n\n  if (!this[0].getClientRects().length) {\n    return {\n      top: 0,\n      left: 0\n    };\n  }\n\n  var rect = this[0].getBoundingClientRect();\n  var win = getWindowByElement(this[0].ownerDocument);\n  var docElem = this[0].ownerDocument.documentElement;\n  return {\n    top: rect.top + win.pageYOffset - docElem.clientTop,\n    left: rect.left + win.pageXOffset - docElem.clientLeft\n  };\n};\n\ninitRender.prototype.offsetParent = function () {\n  if (!this[0]) {\n    return renderer();\n  }\n\n  var offsetParent = renderer(this[0].offsetParent);\n\n  while (offsetParent[0] && \"static\" === offsetParent.css(\"position\")) {\n    offsetParent = renderer(offsetParent[0].offsetParent);\n  }\n\n  offsetParent = offsetParent[0] ? offsetParent : renderer(domAdapter.getDocumentElement());\n  return offsetParent;\n};\n\ninitRender.prototype.position = function () {\n  if (!this[0]) {\n    return;\n  }\n\n  var offset;\n  var marginTop = parseFloat(this.css(\"marginTop\"));\n  var marginLeft = parseFloat(this.css(\"marginLeft\"));\n\n  if (\"fixed\" === this.css(\"position\")) {\n    offset = this[0].getBoundingClientRect();\n    return {\n      top: offset.top - marginTop,\n      left: offset.left - marginLeft\n    };\n  }\n\n  offset = this.offset();\n  var offsetParent = this.offsetParent();\n  var parentOffset = {\n    top: 0,\n    left: 0\n  };\n\n  if (\"HTML\" !== offsetParent[0].nodeName) {\n    parentOffset = offsetParent.offset();\n  }\n\n  parentOffset = {\n    top: parentOffset.top + parseFloat(offsetParent.css(\"borderTopWidth\")),\n    left: parentOffset.left + parseFloat(offsetParent.css(\"borderLeftWidth\"))\n  };\n  return {\n    top: offset.top - parentOffset.top - marginTop,\n    left: offset.left - parentOffset.left - marginLeft\n  };\n};\n\n[{\n  name: \"scrollLeft\",\n  offsetProp: \"pageXOffset\",\n  scrollWindow: function (win, value) {\n    win.scrollTo(value, win.pageYOffset);\n  }\n}, {\n  name: \"scrollTop\",\n  offsetProp: \"pageYOffset\",\n  scrollWindow: function (win, value) {\n    win.scrollTo(win.pageXOffset, value);\n  }\n}].forEach(function (directionStrategy) {\n  var propName = directionStrategy.name;\n\n  initRender.prototype[propName] = function (value) {\n    if (!this[0]) {\n      return;\n    }\n\n    var window = getWindowByElement(this[0]);\n\n    if (void 0 === value) {\n      return window ? window[directionStrategy.offsetProp] : this[0][propName];\n    }\n\n    if (window) {\n      directionStrategy.scrollWindow(window, value);\n    } else {\n      this[0][propName] = value;\n    }\n\n    return this;\n  };\n});\n\ninitRender.prototype.data = function (key, value) {\n  if (!this[0]) {\n    return;\n  }\n\n  if (arguments.length < 2) {\n    return dataUtils.data.call(renderer, this[0], key);\n  }\n\n  dataUtils.data.call(renderer, this[0], key, value);\n  return this;\n};\n\ninitRender.prototype.removeData = function (key) {\n  this[0] && dataUtils.removeData(this[0], key);\n  return this;\n};\n\nvar rendererWrapper = function () {\n  return renderer.apply(this, arguments);\n};\n\nObject.defineProperty(rendererWrapper, \"fn\", {\n  enumerable: true,\n  configurable: true,\n  get: function () {\n    return renderer.fn;\n  },\n  set: function (value) {\n    renderer.fn = value;\n  }\n});\nmodule.exports = {\n  set: function (strategy) {\n    renderer = strategy;\n  },\n  get: function () {\n    return rendererWrapper;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}