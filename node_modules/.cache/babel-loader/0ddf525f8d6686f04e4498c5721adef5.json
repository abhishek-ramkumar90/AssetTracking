{"ast":null,"code":"/**\r\n * DevExtreme (events/core/emitter_registrator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar readyCallbacks = require(\"../../core/utils/ready_callbacks\");\n\nvar domAdapter = require(\"../../core/dom_adapter\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar dataUtils = require(\"../../core/element_data\");\n\nvar Class = require(\"../../core/class\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar registerEvent = require(\"./event_registrator\");\n\nvar eventUtils = require(\"../utils\");\n\nvar pointerEvents = require(\"../pointer\");\n\nvar wheelEvent = require(\"./wheel\");\n\nvar MANAGER_EVENT = \"dxEventManager\";\nvar EMITTER_DATA = \"dxEmitter\";\nvar EventManager = Class.inherit({\n  ctor: function () {\n    this._attachHandlers();\n\n    this.reset();\n    this._proxiedCancelHandler = this._cancelHandler.bind(this);\n    this._proxiedAcceptHandler = this._acceptHandler.bind(this);\n  },\n  _attachHandlers: function () {\n    readyCallbacks.add(function () {\n      var document = domAdapter.getDocument();\n      eventsEngine.subscribeGlobal(document, eventUtils.addNamespace(pointerEvents.down, MANAGER_EVENT), this._pointerDownHandler.bind(this));\n      eventsEngine.subscribeGlobal(document, eventUtils.addNamespace(pointerEvents.move, MANAGER_EVENT), this._pointerMoveHandler.bind(this));\n      eventsEngine.subscribeGlobal(document, eventUtils.addNamespace([pointerEvents.up, pointerEvents.cancel].join(\" \"), MANAGER_EVENT), this._pointerUpHandler.bind(this));\n      eventsEngine.subscribeGlobal(document, eventUtils.addNamespace(wheelEvent.name, MANAGER_EVENT), this._mouseWheelHandler.bind(this));\n    }.bind(this));\n  },\n  _eachEmitter: function (callback) {\n    var activeEmitters = this._activeEmitters || [];\n    var i = 0;\n\n    while (activeEmitters.length > i) {\n      var emitter = activeEmitters[i];\n\n      if (false === callback(emitter)) {\n        break;\n      }\n\n      if (activeEmitters[i] === emitter) {\n        i++;\n      }\n    }\n  },\n  _applyToEmitters: function (method, arg) {\n    this._eachEmitter(function (emitter) {\n      emitter[method].call(emitter, arg);\n    });\n  },\n  reset: function () {\n    this._eachEmitter(this._proxiedCancelHandler);\n\n    this._activeEmitters = [];\n  },\n  resetEmitter: function (emitter) {\n    this._proxiedCancelHandler(emitter);\n  },\n  _pointerDownHandler: function (e) {\n    if (eventUtils.isMouseEvent(e) && e.which > 1) {\n      return;\n    }\n\n    this._updateEmitters(e);\n  },\n  _updateEmitters: function (e) {\n    if (!this._isSetChanged(e)) {\n      return;\n    }\n\n    this._cleanEmitters(e);\n\n    this._fetchEmitters(e);\n  },\n  _isSetChanged: function (e) {\n    var currentSet = this._closestEmitter(e);\n\n    var previousSet = this._emittersSet || [];\n    var setChanged = currentSet.length !== previousSet.length;\n    each(currentSet, function (index, emitter) {\n      setChanged = setChanged || previousSet[index] !== emitter;\n      return !setChanged;\n    });\n    this._emittersSet = currentSet;\n    return setChanged;\n  },\n  _closestEmitter: function (e) {\n    var that = this;\n    var result = [];\n    var $element = $(e.target);\n\n    function handleEmitter(_, emitter) {\n      if (!!emitter && emitter.validatePointers(e) && emitter.validate(e)) {\n        emitter.addCancelCallback(that._proxiedCancelHandler);\n        emitter.addAcceptCallback(that._proxiedAcceptHandler);\n        result.push(emitter);\n      }\n    }\n\n    while ($element.length) {\n      var emitters = dataUtils.data($element.get(0), EMITTER_DATA) || [];\n      each(emitters, handleEmitter);\n      $element = $element.parent();\n    }\n\n    return result;\n  },\n  _acceptHandler: function (acceptedEmitter, e) {\n    var that = this;\n\n    this._eachEmitter(function (emitter) {\n      if (emitter !== acceptedEmitter) {\n        that._cancelEmitter(emitter, e);\n      }\n    });\n  },\n  _cancelHandler: function (canceledEmitter, e) {\n    this._cancelEmitter(canceledEmitter, e);\n  },\n  _cancelEmitter: function (emitter, e) {\n    var activeEmitters = this._activeEmitters;\n\n    if (e) {\n      emitter.cancel(e);\n    } else {\n      emitter.reset();\n    }\n\n    emitter.removeCancelCallback();\n    emitter.removeAcceptCallback();\n    var emitterIndex = inArray(emitter, activeEmitters);\n\n    if (emitterIndex > -1) {\n      activeEmitters.splice(emitterIndex, 1);\n    }\n  },\n  _cleanEmitters: function (e) {\n    this._applyToEmitters(\"end\", e);\n\n    this.reset(e);\n  },\n  _fetchEmitters: function (e) {\n    this._activeEmitters = this._emittersSet.slice();\n\n    this._applyToEmitters(\"start\", e);\n  },\n  _pointerMoveHandler: function (e) {\n    this._applyToEmitters(\"move\", e);\n  },\n  _pointerUpHandler: function (e) {\n    this._updateEmitters(e);\n  },\n  _mouseWheelHandler: function (e) {\n    if (!this._allowInterruptionByMouseWheel()) {\n      return;\n    }\n\n    e.pointers = [null];\n\n    this._pointerDownHandler(e);\n\n    this._adjustWheelEvent(e);\n\n    this._pointerMoveHandler(e);\n\n    e.pointers = [];\n\n    this._pointerUpHandler(e);\n  },\n  _allowInterruptionByMouseWheel: function () {\n    var allowInterruption = true;\n\n    this._eachEmitter(function (emitter) {\n      allowInterruption = emitter.allowInterruptionByMouseWheel() && allowInterruption;\n      return allowInterruption;\n    });\n\n    return allowInterruption;\n  },\n  _adjustWheelEvent: function (e) {\n    var closestGestureEmitter = null;\n\n    this._eachEmitter(function (emitter) {\n      if (!emitter.gesture) {\n        return;\n      }\n\n      var direction = emitter.getDirection(e);\n\n      if (\"horizontal\" !== direction && !e.shiftKey || \"vertical\" !== direction && e.shiftKey) {\n        closestGestureEmitter = emitter;\n        return false;\n      }\n    });\n\n    if (!closestGestureEmitter) {\n      return;\n    }\n\n    var direction = closestGestureEmitter.getDirection(e);\n    var verticalGestureDirection = \"both\" === direction && !e.shiftKey || \"vertical\" === direction;\n    var prop = verticalGestureDirection ? \"pageY\" : \"pageX\";\n    e[prop] += e.delta;\n  },\n  isActive: function (element) {\n    var result = false;\n\n    this._eachEmitter(function (emitter) {\n      result = result || emitter.getElement().is(element);\n    });\n\n    return result;\n  }\n});\nvar eventManager = new EventManager();\nvar EMITTER_SUBSCRIPTION_DATA = \"dxEmitterSubscription\";\n\nvar registerEmitter = function (emitterConfig) {\n  var emitterClass = emitterConfig.emitter;\n  var emitterName = emitterConfig.events[0];\n  var emitterEvents = emitterConfig.events;\n  each(emitterEvents, function (_, eventName) {\n    registerEvent(eventName, {\n      noBubble: !emitterConfig.bubble,\n      setup: function (element) {\n        var subscriptions = dataUtils.data(element, EMITTER_SUBSCRIPTION_DATA) || {};\n        var emitters = dataUtils.data(element, EMITTER_DATA) || {};\n        var emitter = emitters[emitterName] || new emitterClass(element);\n        subscriptions[eventName] = true;\n        emitters[emitterName] = emitter;\n        dataUtils.data(element, EMITTER_DATA, emitters);\n        dataUtils.data(element, EMITTER_SUBSCRIPTION_DATA, subscriptions);\n      },\n      add: function (element, handleObj) {\n        var emitters = dataUtils.data(element, EMITTER_DATA);\n        var emitter = emitters[emitterName];\n        emitter.configure(extend({\n          delegateSelector: handleObj.selector\n        }, handleObj.data), handleObj.type);\n      },\n      teardown: function (element) {\n        var subscriptions = dataUtils.data(element, EMITTER_SUBSCRIPTION_DATA);\n        var emitters = dataUtils.data(element, EMITTER_DATA);\n        var emitter = emitters[emitterName];\n        delete subscriptions[eventName];\n        var disposeEmitter = true;\n        each(emitterEvents, function (_, eventName) {\n          disposeEmitter = disposeEmitter && !subscriptions[eventName];\n          return disposeEmitter;\n        });\n\n        if (disposeEmitter) {\n          if (eventManager.isActive(element)) {\n            eventManager.resetEmitter(emitter);\n          }\n\n          emitter && emitter.dispose();\n          delete emitters[emitterName];\n        }\n      }\n    });\n  });\n};\n\nmodule.exports = registerEmitter;","map":null,"metadata":{},"sourceType":"script"}