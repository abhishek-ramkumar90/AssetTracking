{"ast":null,"code":"/**\r\n * DevExtreme (viz/pie_chart.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _consts = require(\"./components/consts\");\n\nvar _utils = require(\"./core/utils\");\n\nvar _extend2 = require(\"../core/utils/extend\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _range = require(\"./translators/range\");\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _component_registrator = require(\"../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _base_chart = require(\"./chart_components/base_chart\");\n\nvar _common = require(\"../core/utils/common\");\n\nvar _translator1d = require(\"./translators/translator1d\");\n\nvar _translator1d2 = _interopRequireDefault(_translator1d);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar OPTIONS_FOR_REFRESH_SERIES = [\"startAngle\", \"innerRadius\", \"segmentsDirection\", \"type\"];\nvar NORMAL_STATE = _consts.states.normalMark;\nvar HOVER_STATE = _consts.states.hoverMark;\nvar SELECTED_STATE = _consts.states.selectedMark;\nvar MAX_RESOLVE_ITERATION_COUNT = 5;\nvar LEGEND_ACTIONS = [_consts.states.resetItem, _consts.states.applyHover, _consts.states.applySelected, _consts.states.applySelected];\n\nfunction getLegendItemAction(points) {\n  var state = NORMAL_STATE;\n  points.forEach(function (point) {\n    var _point$series;\n\n    var seriesOptions = null === (_point$series = point.series) || void 0 === _point$series ? void 0 : _point$series.getOptions();\n    var pointState = point.fullState;\n\n    if (\"none\" === (null === seriesOptions || void 0 === seriesOptions ? void 0 : seriesOptions.hoverMode)) {\n      pointState &= ~HOVER_STATE;\n    }\n\n    if (\"none\" === (null === seriesOptions || void 0 === seriesOptions ? void 0 : seriesOptions.selectionMode)) {\n      pointState &= ~SELECTED_STATE;\n    }\n\n    state |= pointState;\n  });\n  return LEGEND_ACTIONS[state];\n}\n\nfunction correctPercentValue(value) {\n  if ((0, _type.isNumeric)(value)) {\n    if (value > 1) {\n      value = 1;\n    } else {\n      if (value < 0) {\n        value = 0;\n      }\n    }\n  } else {\n    value = void 0;\n  }\n\n  return value;\n}\n\nvar dxPieChart = _base_chart.BaseChart.inherit({\n  _themeSection: \"pie\",\n  _layoutManagerOptions: function () {\n    return (0, _extend2.extend)(true, {}, this.callBase(), {\n      piePercentage: correctPercentValue(this._themeManager.getOptions(\"diameter\")),\n      minPiePercentage: correctPercentValue(this._themeManager.getOptions(\"minDiameter\"))\n    });\n  },\n  _optionChangesMap: {\n    diameter: \"REINIT\",\n    minDiameter: \"REINIT\",\n    sizeGroup: \"REINIT\"\n  },\n  _disposeCore: function () {\n    pieSizeEqualizer.remove(this);\n    this.callBase();\n  },\n  _groupSeries: function () {\n    var series = this.series;\n    this._groupsData = {\n      groups: [{\n        series: series,\n        valueOptions: {\n          valueType: \"numeric\"\n        }\n      }],\n      argumentOptions: series[0] && series[0].getOptions()\n    };\n  },\n  getArgumentAxis: function () {\n    return null;\n  },\n  _getValueAxis: function () {\n    var translator = new _translator1d2.default.Translator1D().setCodomain(360, 0);\n    return {\n      getTranslator: function () {\n        return translator;\n      },\n      setBusinessRange: function (range) {\n        translator.setDomain(range.min, range.max);\n      }\n    };\n  },\n  _populateBusinessRange: function () {\n    this.series.map(function (series) {\n      var range = new _range2.default.Range();\n      range.addRange(series.getRangeData().val);\n      series.getValueAxis().setBusinessRange(range);\n      return range;\n    });\n  },\n  _specialProcessSeries: function () {\n    (0, _iterator.each)(this.series, function (_, singleSeries) {\n      singleSeries.arrangePoints();\n    });\n  },\n  _checkPaneName: function () {\n    return true;\n  },\n  _processSingleSeries: function (singleSeries) {\n    this.callBase(singleSeries);\n    singleSeries.arrangePoints();\n  },\n  _handleSeriesDataUpdated: function () {\n    var maxPointCount = 0;\n    this.series.forEach(function (s) {\n      maxPointCount = Math.max(s.getPointsCount(), maxPointCount);\n    });\n    this.series.forEach(function (s) {\n      s.setMaxPointsCount(maxPointCount);\n    });\n    this.callBase();\n  },\n  _getLegendOptions: function (item) {\n    var legendItem = this.callBase(item);\n    var legendData = legendItem.legendData;\n    legendData.argument = item.argument;\n    legendData.argumentIndex = item.argumentIndex;\n    legendData.points = [item];\n    return legendItem;\n  },\n  _getLegendTargets: function () {\n    var that = this;\n    var itemsByArgument = {};\n    (that.series || []).forEach(function (series) {\n      series.getPoints().forEach(function (point) {\n        var argument = point.argument.valueOf();\n        var index = series.getPointsByArg(argument).indexOf(point);\n        var key = argument.valueOf().toString() + index;\n        itemsByArgument[key] = itemsByArgument[key] || [];\n        var argumentCount = itemsByArgument[key].push(point);\n        point.index = itemsByArgument[key][argumentCount - 2] ? itemsByArgument[key][argumentCount - 2].index : Object.keys(itemsByArgument).length - 1;\n        point.argumentIndex = index;\n      });\n    });\n    var items = [];\n    (0, _iterator.each)(itemsByArgument, function (_, points) {\n      points.forEach(function (point, index) {\n        if (0 === index) {\n          items.push(that._getLegendOptions(point));\n          return;\n        }\n\n        var item = items[items.length - 1];\n        item.legendData.points.push(point);\n\n        if (!item.visible) {\n          item.visible = point.isVisible();\n        }\n      });\n    });\n    return items;\n  },\n  _getLayoutTargets: function () {\n    return [{\n      canvas: this._canvas\n    }];\n  },\n  _getLayoutSeries: function (series, drawOptions) {\n    var that = this;\n    var layout;\n    var canvas = that._canvas;\n    var drawnLabels = false;\n    layout = that.layoutManager.applyPieChartSeriesLayout(canvas, series, true);\n    series.forEach(function (singleSeries) {\n      singleSeries.correctPosition(layout, canvas);\n      drawnLabels = singleSeries.drawLabelsWOPoints() || drawnLabels;\n    });\n\n    if (drawnLabels) {\n      layout = that.layoutManager.applyPieChartSeriesLayout(canvas, series, drawOptions.hideLayoutLabels);\n    }\n\n    series.forEach(function (singleSeries) {\n      singleSeries.hideLabels();\n    });\n    that._sizeGroupLayout = {\n      x: layout.centerX,\n      y: layout.centerY,\n      radius: layout.radiusOuter,\n      drawOptions: drawOptions\n    };\n    return layout;\n  },\n  _getLayoutSeriesForEqualPies: function (series, sizeGroupLayout) {\n    var canvas = this._canvas;\n    var layout = this.layoutManager.applyEqualPieChartLayout(series, sizeGroupLayout);\n    series.forEach(function (s) {\n      s.correctPosition(layout, canvas);\n      s.drawLabelsWOPoints();\n    });\n    this.layoutManager.correctPieLabelRadius(series, layout, canvas);\n    return layout;\n  },\n  _updateSeriesDimensions: function (drawOptions) {\n    var that = this;\n\n    var visibleSeries = that._getVisibleSeries();\n\n    var lengthVisibleSeries = visibleSeries.length;\n    var innerRad;\n    var delta;\n    var layout;\n    var sizeGroupLayout = drawOptions.sizeGroupLayout;\n\n    if (lengthVisibleSeries) {\n      layout = sizeGroupLayout ? that._getLayoutSeriesForEqualPies(visibleSeries, sizeGroupLayout) : that._getLayoutSeries(visibleSeries, drawOptions);\n      delta = (layout.radiusOuter - layout.radiusInner - _consts.pieSeriesSpacing * (lengthVisibleSeries - 1)) / lengthVisibleSeries;\n      innerRad = layout.radiusInner;\n\n      that._setGeometry(layout);\n\n      visibleSeries.forEach(function (singleSeries) {\n        singleSeries.correctRadius({\n          radiusInner: innerRad,\n          radiusOuter: innerRad + delta\n        });\n        innerRad += delta + _consts.pieSeriesSpacing;\n      });\n    }\n  },\n  _renderSeries: function (drawOptions, isRotated, isLegendInside) {\n    this._calculateSeriesLayout(drawOptions, isRotated);\n\n    if (!drawOptions.sizeGroupLayout && this.getSizeGroup()) {\n      pieSizeEqualizer.queue(this);\n\n      this._clearCanvas();\n\n      return;\n    }\n\n    this._renderSeriesElements(drawOptions, isRotated, isLegendInside);\n  },\n  _renderExtraElements: function () {\n    var template = this.option(\"centerTemplate\");\n\n    if (this._centerTemplateGroup) {\n      this._centerTemplateGroup.clear();\n    }\n\n    if (!template) {\n      return;\n    }\n\n    if (!this._centerTemplateGroup) {\n      this._centerTemplateGroup = this._renderer.g().attr({\n        \"class\": \"dxc-hole-template\"\n      }).css((0, _utils.patchFontOptions)(this._themeManager._font));\n    }\n\n    this._centerTemplateGroup.append(this._renderer.root);\n\n    template = this._getTemplate(template);\n    template.render({\n      model: this,\n      container: this._centerTemplateGroup.element\n    });\n\n    var bBox = this._centerTemplateGroup.getBBox();\n\n    this._centerTemplateGroup.move(this._center.x - (bBox.x + bBox.width / 2), this._center.y - (bBox.y + bBox.height / 2));\n  },\n  getInnerRadius: function () {\n    return this._innerRadius;\n  },\n  _getLegendCallBack: function () {\n    var that = this;\n    var legend = this._legend;\n\n    var items = this._getLegendTargets().map(function (i) {\n      return i.legendData;\n    });\n\n    return function (target) {\n      items.forEach(function (data) {\n        var points = [];\n        var callback = legend.getActionCallback({\n          index: data.id\n        });\n        that.series.forEach(function (series) {\n          var seriesPoints = series.getPointsByKeys(data.argument, data.argumentIndex);\n          points.push.apply(points, seriesPoints);\n        });\n\n        if (target && target.argument === data.argument && target.argumentIndex === data.argumentIndex) {\n          points.push(target);\n        }\n\n        callback(getLegendItemAction(points));\n      });\n    };\n  },\n  _locateLabels: function (resolveLabelOverlapping) {\n    var iterationCount = 0;\n    var labelsWereOverlapped;\n    var wordWrapApplied;\n\n    do {\n      labelsWereOverlapped = this._resolveLabelOverlapping(resolveLabelOverlapping);\n      wordWrapApplied = this._adjustSeriesLabels(\"shift\" === resolveLabelOverlapping);\n    } while ((labelsWereOverlapped || wordWrapApplied) && ++iterationCount < MAX_RESOLVE_ITERATION_COUNT);\n  },\n  _adjustSeriesLabels: function (moveLabelsFromCenter) {\n    return this.series.reduce(function (r, s) {\n      return s.adjustLabels(moveLabelsFromCenter) || r;\n    }, false);\n  },\n  _applyExtraSettings: _common.noop,\n  _resolveLabelOverlappingShift: function () {\n    var that = this;\n    var inverseDirection = \"anticlockwise\" === that.option(\"segmentsDirection\");\n    var seriesByPosition = that.series.reduce(function (r, s) {\n      (r[s.getOptions().label.position] || r.outside).push(s);\n      return r;\n    }, {\n      inside: [],\n      columns: [],\n      outside: []\n    });\n    var labelsOverlapped = false;\n\n    if (seriesByPosition.inside.length > 0) {\n      labelsOverlapped = resolve(seriesByPosition.inside.reduce(function (r, singleSeries) {\n        return singleSeries.getVisiblePoints().reduce(function (r, point) {\n          r.left.push(point);\n          return r;\n        }, r);\n      }, {\n        left: [],\n        right: []\n      }), shiftInColumnFunction) || labelsOverlapped;\n    }\n\n    labelsOverlapped = seriesByPosition.columns.reduce(function (r, singleSeries) {\n      return resolve(dividePoints(singleSeries), shiftInColumnFunction) || r;\n    }, labelsOverlapped);\n\n    if (seriesByPosition.outside.length > 0) {\n      labelsOverlapped = resolve(seriesByPosition.outside.reduce(function (r, singleSeries) {\n        return dividePoints(singleSeries, r);\n      }, null), shiftFunction) || labelsOverlapped;\n    }\n\n    return labelsOverlapped;\n\n    function dividePoints(series, points) {\n      return series.getVisiblePoints().reduce(function (r, point) {\n        var angle = (0, _utils.normalizeAngle)(point.middleAngle);\n        (angle <= 90 || angle >= 270 ? r.right : r.left).push(point);\n        return r;\n      }, points || {\n        left: [],\n        right: []\n      });\n    }\n\n    function resolve(points, shiftCallback) {\n      var overlapped = false;\n\n      if (inverseDirection) {\n        points.left.reverse();\n        points.right.reverse();\n      }\n\n      overlapped = _base_chart.overlapping.resolveLabelOverlappingInOneDirection(points.left, that._canvas, false, shiftCallback);\n      return _base_chart.overlapping.resolveLabelOverlappingInOneDirection(points.right, that._canvas, false, shiftCallback) || overlapped;\n    }\n\n    function shiftFunction(box, length) {\n      return (0, _utils.getVerticallyShiftedAngularCoords)(box, -length, that._center);\n    }\n\n    function shiftInColumnFunction(box, length) {\n      return {\n        x: box.x,\n        y: box.y - length\n      };\n    }\n  },\n  _setGeometry: function (_ref) {\n    var x = _ref.centerX,\n        y = _ref.centerY,\n        radiusInner = _ref.radiusInner;\n    this._center = {\n      x: x,\n      y: y\n    };\n    this._innerRadius = radiusInner;\n  },\n  _disposeSeries: function (seriesIndex) {\n    this.callBase.apply(this, arguments);\n    this._abstractSeries = null;\n  },\n  _legendDataField: \"point\",\n  _legendItemTextField: \"argument\",\n  _applyPointMarkersAutoHiding: _common.noop,\n  _renderTrackers: _common.noop,\n  _trackerType: \"PieTracker\",\n  _createScrollBar: _common.noop,\n  _updateAxesLayout: _common.noop,\n  _applyClipRects: _common.noop,\n  _appendAdditionalSeriesGroups: _common.noop,\n  _prepareToRender: _common.noop,\n  _isLegendInside: _common.noop,\n  _renderAxes: _common.noop,\n  _shrinkAxes: _common.noop,\n  _isRotated: _common.noop,\n  _seriesPopulatedHandlerCore: _common.noop,\n  _reinitAxes: _common.noop,\n  _correctAxes: _common.noop,\n  _getExtraOptions: function () {\n    var that = this;\n    return {\n      startAngle: that.option(\"startAngle\"),\n      innerRadius: that.option(\"innerRadius\"),\n      segmentsDirection: that.option(\"segmentsDirection\"),\n      type: that.option(\"type\")\n    };\n  },\n  getSizeGroup: function () {\n    return this._themeManager.getOptions(\"sizeGroup\");\n  },\n  getSizeGroupLayout: function () {\n    return this._sizeGroupLayout || {};\n  }\n});\n\n(0, _iterator.each)(OPTIONS_FOR_REFRESH_SERIES, function (_, name) {\n  dxPieChart.prototype._optionChangesMap[name] = \"REFRESH_SERIES_DATA_INIT\";\n});\n(0, _component_registrator2.default)(\"dxPieChart\", dxPieChart);\nmodule.exports = dxPieChart;\n\nvar pieSizeEqualizer = function () {\n  function equalize(group, allPies) {\n    var pies = allPies.filter(function (p) {\n      return p._isVisible() && p.getSizeGroup() === group;\n    });\n    var minRadius = Math.min.apply(null, pies.map(function (p) {\n      return p.getSizeGroupLayout().radius;\n    }));\n    var minPie = pies.filter(function (p) {\n      return p.getSizeGroupLayout().radius === minRadius;\n    });\n    pies.forEach(function (p) {\n      return p.render({\n        force: true,\n        sizeGroupLayout: minPie.length ? minPie[0].getSizeGroupLayout() : {}\n      });\n    });\n  }\n\n  function removeFromList(list, item) {\n    return list.filter(function (li) {\n      return li !== item;\n    });\n  }\n\n  function addToList(list, item) {\n    return removeFromList(list, item).concat(item);\n  }\n\n  var pies = [];\n  var timers = {};\n  return {\n    queue: function (pie) {\n      var group = pie.getSizeGroup();\n      pies = addToList(pies, pie);\n      clearTimeout(timers[group]);\n      timers[group] = setTimeout(function () {\n        equalize(group, pies);\n      });\n    },\n    remove: function (pie) {\n      pies = removeFromList(pies, pie);\n\n      if (!pies.length) {\n        timers = {};\n      }\n    }\n  };\n}();\n\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}