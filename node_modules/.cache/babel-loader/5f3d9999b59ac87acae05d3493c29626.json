{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types'], factory) : (global = global || self, factory(global.ReactMinimalPieChart = {}, global.React, global.PropTypes));\n})(this, function (exports, React, PropTypes) {\n  'use strict';\n\n  var React__default = 'default' in React ? React['default'] : React;\n  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  var stylePropType = PropTypes.objectOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]));\n  var dataPropType = PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    value: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    style: stylePropType\n  }));\n\n  function degreesToRadians(degrees) {\n    return degrees * Math.PI / 180;\n  }\n\n  function evaluateLabelTextAnchor(_ref) {\n    var labelPosition = _ref.labelPosition,\n        lineWidth = _ref.lineWidth,\n        labelHorizontalShift = _ref.labelHorizontalShift; // Label in the vertical center\n\n    if (labelHorizontalShift === 0) {\n      return 'middle';\n    } // Outward label\n\n\n    if (labelPosition > 100) {\n      return labelHorizontalShift > 0 ? 'start' : 'end';\n    } // Inward label\n\n\n    var innerRadius = 100 - lineWidth;\n\n    if (labelPosition < innerRadius) {\n      return labelHorizontalShift > 0 ? 'end' : 'start';\n    } // Overlying label\n\n\n    return 'middle';\n  }\n\n  function valueBetween(value, min, max) {\n    if (value > max) return max;\n    if (value < min) return min;\n    return value;\n  }\n\n  function extractPercentage(value, percentage) {\n    return value * percentage / 100;\n  }\n\n  function extractAbsoluteCoordinates(props) {\n    var _props$viewBoxSize = props.viewBoxSize,\n        viewBoxWidth = _props$viewBoxSize[0],\n        viewBoxHeight = _props$viewBoxSize[1];\n    return {\n      cx: extractPercentage(props.cx, viewBoxWidth),\n      cy: extractPercentage(props.cy, viewBoxHeight),\n      radius: extractPercentage(props.radius, viewBoxWidth)\n    };\n  }\n\n  function sumValues(data) {\n    return data.reduce(function (acc, dataEntry) {\n      return acc + dataEntry.value;\n    }, 0);\n  } // Append \"percentage\", \"degrees\" and \"startOffset\" into each data entry\n\n\n  function extendData(_ref) {\n    var data = _ref.data,\n        totalAngle = _ref.lengthAngle,\n        totalValue = _ref.totalValue,\n        paddingAngle = _ref.paddingAngle;\n    var total = totalValue || sumValues(data);\n    var normalizedTotalAngle = valueBetween(totalAngle, -360, 360);\n    var numberOfPaddings = Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;\n    var singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);\n    var degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;\n    var degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;\n    var lastSegmentEnd = 0; // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?\n\n    return data.map(function (dataEntry) {\n      var valueInPercentage = total === 0 ? 0 : dataEntry.value / total * 100;\n      var degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);\n      var startOffset = lastSegmentEnd;\n      lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;\n      return _extends({\n        percentage: valueInPercentage,\n        degrees: degrees,\n        startOffset: startOffset\n      }, dataEntry);\n    });\n  }\n\n  function ReactMinimalPieChartLabel(_ref) {\n    var data = _ref.data,\n        dataIndex = _ref.dataIndex,\n        color = _ref.color,\n        props = _objectWithoutPropertiesLoose(_ref, [\"data\", \"dataIndex\", \"color\"]);\n\n    return React__default.createElement(\"text\", _extends({\n      textAnchor: \"middle\",\n      dominantBaseline: \"middle\",\n      fill: color\n    }, props));\n  }\n\n  ReactMinimalPieChartLabel.displayName = 'ReactMinimalPieChartLabel';\n\n  function renderLabelItem(option, labelProps, value) {\n    if (React__default.isValidElement(option)) {\n      return React__default.cloneElement(option, labelProps);\n    }\n\n    var label = value;\n\n    if (typeof option === 'function') {\n      label = option(labelProps);\n\n      if (React__default.isValidElement(label)) {\n        return label;\n      }\n    }\n\n    return React__default.createElement(ReactMinimalPieChartLabel, labelProps, label);\n  }\n\n  function renderLabels(data, props) {\n    var _extractAbsoluteCoord = extractAbsoluteCoordinates(props),\n        cx = _extractAbsoluteCoord.cx,\n        cy = _extractAbsoluteCoord.cy,\n        radius = _extractAbsoluteCoord.radius;\n\n    var labelPosition = extractPercentage(radius, props.labelPosition);\n    return data.map(function (dataEntry, index) {\n      var startAngle = props.startAngle + dataEntry.startOffset;\n      var halfAngle = startAngle + dataEntry.degrees / 2;\n      var halfAngleRadians = degreesToRadians(halfAngle);\n      var dx = Math.cos(halfAngleRadians) * labelPosition;\n      var dy = Math.sin(halfAngleRadians) * labelPosition; // This object is passed as props to the \"label\" component\n\n      var labelProps = {\n        key: \"label-\" + (dataEntry.key || index),\n        x: cx,\n        y: cy,\n        dx: dx,\n        dy: dy,\n        textAnchor: evaluateLabelTextAnchor({\n          lineWidth: props.lineWidth,\n          labelPosition: props.labelPosition,\n          labelHorizontalShift: dx\n        }),\n        data: data,\n        dataIndex: index,\n        color: dataEntry.color,\n        style: props.labelStyle\n      };\n      return renderLabelItem(props.label, labelProps, dataEntry.value);\n    });\n  }\n\n  var partialCircle = function partialCircle(cx, cy, r, start, end) {\n    var length = end - start;\n    if (length === 0) return [];\n    var fromX = r * Math.cos(start) + cx;\n    var fromY = r * Math.sin(start) + cy;\n    var toX = r * Math.cos(end) + cx;\n    var toY = r * Math.sin(end) + cy;\n    var large = Math.abs(length) <= Math.PI ? '0' : '1';\n    var sweep = length < 0 ? '0' : '1';\n    return [['M', fromX, fromY], ['A', r, r, 0, large, sweep, toX, toY]];\n  };\n\n  var svgPartialCircle = partialCircle;\n\n  function makePathCommands(cx, cy, startAngle, lengthAngle, radius) {\n    var patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);\n    return svgPartialCircle(cx, cy, // center X and Y\n    radius, degreesToRadians(startAngle), degreesToRadians(startAngle + patchedLengthAngle)).map(function (command) {\n      return command.join(' ');\n    }).join(' ');\n  }\n\n  function ReactMinimalPieChartPath(_ref) {\n    var cx = _ref.cx,\n        cy = _ref.cy,\n        startAngle = _ref.startAngle,\n        lengthAngle = _ref.lengthAngle,\n        radius = _ref.radius,\n        lineWidth = _ref.lineWidth,\n        reveal = _ref.reveal,\n        title = _ref.title,\n        props = _objectWithoutPropertiesLoose(_ref, [\"cx\", \"cy\", \"startAngle\", \"lengthAngle\", \"radius\", \"lineWidth\", \"reveal\", \"title\"]);\n\n    var actualRadio = radius - lineWidth / 2;\n    var pathCommands = makePathCommands(cx, cy, startAngle, lengthAngle, actualRadio);\n    var strokeDasharray;\n    var strokeDashoffset; // Animate/hide paths with \"stroke-dasharray\" + \"stroke-dashoffset\"\n    // https://css-tricks.com/svg-line-animation-works/\n\n    if (typeof reveal === 'number') {\n      var pathLength = degreesToRadians(actualRadio) * lengthAngle;\n      strokeDasharray = Math.abs(pathLength);\n      strokeDashoffset = strokeDasharray - extractPercentage(strokeDasharray, reveal);\n    }\n\n    return React__default.createElement(\"path\", _extends({\n      d: pathCommands,\n      strokeWidth: lineWidth,\n      strokeDasharray: strokeDasharray,\n      strokeDashoffset: strokeDashoffset\n    }, props), title && React__default.createElement(\"title\", null, title));\n  }\n\n  ReactMinimalPieChartPath.displayName = 'ReactMinimalPieChartPath';\n\n  function makeSegmentTransitionStyle(duration, easing, furtherStyles) {\n    if (furtherStyles === void 0) {\n      furtherStyles = {};\n    } // Merge CSS transition necessary for chart animation with the ones provided by \"segmentsStyle\"\n\n\n    var transition = [\"stroke-dashoffset \" + duration + \"ms \" + easing, furtherStyles.transition].filter(Boolean).join(',');\n    return {\n      transition: transition\n    };\n  }\n\n  function renderSegments(data, props, hide) {\n    if (hide === void 0) {\n      hide = false;\n    }\n\n    var style = props.segmentsStyle;\n\n    if (props.animate) {\n      var transitionStyle = makeSegmentTransitionStyle(props.animationDuration, props.animationEasing, style);\n      style = Object.assign({}, style, transitionStyle);\n    } // Hide/reveal the segment?\n\n\n    var reveal;\n\n    if (hide === true) {\n      reveal = 0;\n    } else if (typeof props.reveal === 'number') {\n      reveal = props.reveal;\n    } else if (hide === false) {\n      reveal = 100;\n    }\n\n    var _extractAbsoluteCoord = extractAbsoluteCoordinates(props),\n        cx = _extractAbsoluteCoord.cx,\n        cy = _extractAbsoluteCoord.cy,\n        radius = _extractAbsoluteCoord.radius;\n\n    var lineWidth = extractPercentage(radius, props.lineWidth);\n    var paths = data.map(function (dataEntry, index) {\n      var startAngle = props.startAngle + dataEntry.startOffset;\n      return React__default.createElement(ReactMinimalPieChartPath, {\n        key: dataEntry.key || index,\n        cx: cx,\n        cy: cy,\n        startAngle: startAngle,\n        lengthAngle: dataEntry.degrees,\n        radius: radius,\n        lineWidth: lineWidth,\n        reveal: reveal,\n        title: dataEntry.title,\n        style: Object.assign({}, style, dataEntry.style),\n        stroke: dataEntry.color,\n        strokeLinecap: props.rounded ? 'round' : undefined,\n        fill: \"none\",\n        onMouseOver: props.onMouseOver && // @ts-ignore\n        function (e) {\n          return props.onMouseOver(e, props.data, index);\n        },\n        onMouseOut: props.onMouseOut && // @ts-ignore\n        function (e) {\n          return props.onMouseOut(e, props.data, index);\n        },\n        onClick: props.onClick && // @ts-ignore\n        function (e) {\n          return props.onClick(e, props.data, index);\n        }\n      });\n    });\n\n    if (props.background) {\n      paths.unshift(React__default.createElement(ReactMinimalPieChartPath, {\n        key: \"bg\",\n        cx: cx,\n        cy: cy,\n        startAngle: props.startAngle,\n        lengthAngle: props.lengthAngle,\n        radius: radius,\n        lineWidth: lineWidth,\n        stroke: props.background,\n        strokeLinecap: props.rounded ? 'round' : undefined,\n        fill: \"none\"\n      }));\n    }\n\n    return paths;\n  }\n\n  var ReactMinimalPieChart =\n  /*#__PURE__*/\n  function (_Component) {\n    _inheritsLoose(ReactMinimalPieChart, _Component);\n\n    function ReactMinimalPieChart(props) {\n      var _this;\n\n      _this = _Component.call(this, props) || this;\n      _this.hideSegments = false;\n      _this.initialAnimationTimerId = void 0;\n      _this.initialAnimationRAFId = void 0;\n\n      if (props.animate === true) {\n        _this.hideSegments = true;\n      }\n\n      return _this;\n    }\n\n    var _proto = ReactMinimalPieChart.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.animate === true && requestAnimationFrame) {\n        this.initialAnimationTimerId = setTimeout(function () {\n          _this2.initialAnimationTimerId = null;\n          _this2.initialAnimationRAFId = requestAnimationFrame(function () {\n            _this2.initialAnimationRAFId = null;\n\n            _this2.startAnimation();\n          });\n        });\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this.initialAnimationTimerId) {\n        clearTimeout(this.initialAnimationTimerId);\n      }\n\n      if (this.initialAnimationRAFId) {\n        cancelAnimationFrame(this.initialAnimationRAFId);\n      }\n    };\n\n    _proto.startAnimation = function startAnimation() {\n      this.hideSegments = false;\n      this.forceUpdate();\n    };\n\n    _proto.render = function render() {\n      var props = this.props;\n\n      if (props.data === undefined) {\n        return null;\n      }\n\n      var extendedData = extendData(props);\n      return React__default.createElement(\"div\", {\n        className: props.className,\n        style: props.style\n      }, React__default.createElement(\"svg\", {\n        viewBox: \"0 0 \" + props.viewBoxSize[0] + \" \" + props.viewBoxSize[1],\n        width: \"100%\",\n        height: \"100%\",\n        style: {\n          display: 'block'\n        }\n      }, renderSegments(extendedData, props, this.hideSegments), props.label && renderLabels(extendedData, props), props.injectSvg && props.injectSvg()), props.children);\n    };\n\n    return ReactMinimalPieChart;\n  }(React.Component);\n\n  ReactMinimalPieChart.displayName = 'ReactMinimalPieChart';\n  ReactMinimalPieChart.defaultProps = {\n    animate: false,\n    animationDuration: 500,\n    animationEasing: 'ease-out',\n    cx: 50,\n    cy: 50,\n    label: false,\n    labelPosition: 50,\n    lengthAngle: 360,\n    lineWidth: 100,\n    paddingAngle: 0,\n    radius: 50,\n    rounded: false,\n    startAngle: 0,\n    viewBoxSize: [100, 100]\n  };\n  ReactMinimalPieChart.propTypes = {\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    animationEasing: PropTypes.string,\n    background: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cx: PropTypes.number,\n    cy: PropTypes.number,\n    data: dataPropType,\n    injectSvg: PropTypes.func,\n    label: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.bool]),\n    labelPosition: PropTypes.number,\n    labelStyle: stylePropType,\n    lengthAngle: PropTypes.number,\n    lineWidth: PropTypes.number,\n    onClick: PropTypes.func,\n    onMouseOut: PropTypes.func,\n    onMouseOver: PropTypes.func,\n    paddingAngle: PropTypes.number,\n    radius: PropTypes.number,\n    reveal: PropTypes.number,\n    rounded: PropTypes.bool,\n    segmentsStyle: stylePropType,\n    startAngle: PropTypes.number,\n    style: stylePropType,\n    totalValue: PropTypes.number,\n    viewBoxSize: PropTypes.arrayOf(PropTypes.number)\n  };\n  exports.default = ReactMinimalPieChart;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}