{"ast":null,"code":"/**\r\n * DevExtreme (viz/core/export.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.plugin = exports.ExportMenu = exports.combineMarkups = exports.exportWidgets = exports.getMarkup = exports.exportFromMarkup = void 0;\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _utils = require(\"./utils\");\n\nvar _exporter = require(\"../../exporter\");\n\nvar _exporter2 = _interopRequireDefault(_exporter);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _themes = require(\"../themes\");\n\nvar _themes2 = _interopRequireDefault(_themes);\n\nvar _hover = require(\"../../events/hover\");\n\nvar _hover2 = _interopRequireDefault(_hover);\n\nvar _pointer = require(\"../../events/pointer\");\n\nvar _pointer2 = _interopRequireDefault(_pointer);\n\nvar _console = require(\"../../core/utils/console\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar imageExporter = _exporter2.default.image;\nvar svgExporter = _exporter2.default.svg;\nvar pdfExporter = _exporter2.default.pdf;\nvar pointerActions = [_pointer2.default.down, _pointer2.default.move].join(\" \");\nvar BUTTON_SIZE = 35;\nvar ICON_COORDS = [[9, 12, 26, 12, 26, 14, 9, 14], [9, 17, 26, 17, 26, 19, 9, 19], [9, 22, 26, 22, 26, 24, 9, 24]];\nvar LIST_PADDING_TOP = 4;\nvar LIST_WIDTH = 120;\nvar VERTICAL_TEXT_MARGIN = 8;\nvar HORIZONTAL_TEXT_MARGIN = 15;\nvar MENU_ITEM_HEIGHT = 30;\nvar LIST_STROKE_WIDTH = 1;\nvar MARGIN = 10;\nvar SHADOW_OFFSET = 2;\nvar SHADOW_BLUR = 3;\nvar DEFAULT_EXPORT_FORMAT = \"PNG\";\nvar ALLOWED_IMAGE_FORMATS = [DEFAULT_EXPORT_FORMAT, \"JPEG\", \"GIF\"];\nvar ALLOWED_EXTRA_FORMATS = [\"PDF\", \"SVG\"];\nvar EXPORT_CSS_CLASS = \"dx-export-menu\";\nvar EXPORT_DATA_KEY = \"export-element-type\";\nvar FORMAT_DATA_KEY = \"export-element-format\";\nvar GET_COLOR_REGEX = /data-backgroundcolor=\"([^\"]*)\"/;\n\nfunction getValidFormats() {\n  var imageFormats = imageExporter.testFormats(ALLOWED_IMAGE_FORMATS);\n  return {\n    unsupported: imageFormats.unsupported,\n    supported: imageFormats.supported.concat(ALLOWED_EXTRA_FORMATS)\n  };\n}\n\nfunction validateFormat(format, incidentOccurred, validFormats) {\n  validFormats = validFormats || getValidFormats();\n  format = String(format).toUpperCase();\n\n  if (validFormats.supported.indexOf(format) !== -1) {\n    return format;\n  }\n\n  if (validFormats.unsupported.indexOf(format) !== -1) {\n    incidentOccurred && incidentOccurred(\"W2108\", [format]);\n  }\n}\n\nfunction getCreatorFunc(format) {\n  if (\"SVG\" === format) {\n    return svgExporter.getData;\n  } else {\n    if (\"PDF\" === format) {\n      return pdfExporter.getData;\n    } else {\n      return imageExporter.getData;\n    }\n  }\n}\n\nfunction _print(imageSrc, options) {\n  var document = (0, _window.getWindow)().document;\n  var iFrame = document.createElement(\"iframe\");\n  iFrame.onload = setPrint(imageSrc, options);\n  iFrame.style.visibility = \"hidden\";\n  iFrame.style.position = \"fixed\";\n  iFrame.style.right = \"0\";\n  iFrame.style.bottom = \"0\";\n  document.body.appendChild(iFrame);\n}\n\nfunction setPrint(imageSrc, options) {\n  return function () {\n    var _this = this;\n\n    var window = this.contentWindow;\n    var img = window.document.createElement(\"img\");\n    window.document.body.appendChild(img);\n\n    var removeFrame = function () {\n      _this.parentElement.removeChild(_this);\n    };\n\n    img.addEventListener(\"load\", function () {\n      window.focus();\n      window.print();\n      removeFrame();\n    });\n    img.addEventListener(\"error\", removeFrame);\n    img.src = imageSrc;\n  };\n}\n\nfunction getItemAttributes(options, type, itemIndex) {\n  var x = BUTTON_SIZE - LIST_WIDTH;\n  var y = BUTTON_SIZE + LIST_PADDING_TOP + LIST_STROKE_WIDTH + itemIndex * MENU_ITEM_HEIGHT;\n  var attr = {\n    rect: {\n      width: LIST_WIDTH - 2 * LIST_STROKE_WIDTH,\n      height: MENU_ITEM_HEIGHT,\n      x: x + LIST_STROKE_WIDTH,\n      y: y\n    },\n    text: {\n      x: x + (options.rtl ? LIST_WIDTH - HORIZONTAL_TEXT_MARGIN : HORIZONTAL_TEXT_MARGIN),\n      y: y + MENU_ITEM_HEIGHT - VERTICAL_TEXT_MARGIN\n    }\n  };\n\n  if (\"printing\" === type) {\n    attr.separator = {\n      stroke: options.button.default.borderColor,\n      \"stroke-width\": LIST_STROKE_WIDTH,\n      cursor: \"pointer\",\n      sharp: \"v\",\n      d: \"M \" + x + \" \" + (y + MENU_ITEM_HEIGHT - LIST_STROKE_WIDTH) + \" L \" + (x + LIST_WIDTH) + \" \" + (y + MENU_ITEM_HEIGHT - LIST_STROKE_WIDTH)\n    };\n  }\n\n  return attr;\n}\n\nfunction createMenuItem(renderer, options, settings) {\n  var itemData = {};\n  var type = settings.type;\n  var format = settings.format;\n  var attr = getItemAttributes(options, type, settings.itemIndex);\n  var fontStyle = (0, _utils.patchFontOptions)(options.font);\n  fontStyle[\"pointer-events\"] = \"none\";\n  var menuItem = renderer.g().attr({\n    \"class\": EXPORT_CSS_CLASS + \"-list-item\"\n  });\n  itemData[EXPORT_DATA_KEY] = type;\n\n  if (format) {\n    itemData[FORMAT_DATA_KEY] = format;\n  }\n\n  var rect = renderer.rect();\n  rect.attr(attr.rect).css({\n    cursor: \"pointer\",\n    \"pointer-events\": \"all\"\n  }).data(itemData);\n  rect.on(_hover2.default.start + \".export\", function () {\n    return rect.attr({\n      fill: options.button.hover.backgroundColor\n    });\n  }).on(_hover2.default.end + \".export\", function () {\n    return rect.attr({\n      fill: null\n    });\n  });\n  rect.append(menuItem);\n  var text = renderer.text(settings.text).css(fontStyle).attr(attr.text).append(menuItem);\n\n  if (\"printing\" === type) {\n    renderer.path(null, \"line\").attr(attr.separator).append(menuItem);\n  }\n\n  return {\n    g: menuItem,\n    rect: rect,\n    resetState: function () {\n      return rect.attr({\n        fill: null\n      });\n    },\n    fixPosition: function () {\n      var textBBox = text.getBBox();\n      text.move(attr.text.x - textBBox.x - (options.rtl ? textBBox.width : 0));\n    }\n  };\n}\n\nfunction createMenuItems(renderer, options) {\n  var items = [];\n\n  if (options.printingEnabled) {\n    items.push(createMenuItem(renderer, options, {\n      type: \"printing\",\n      text: _message2.default.format(\"vizExport-printingButtonText\"),\n      itemIndex: items.length\n    }));\n  }\n\n  items = options.formats.reduce(function (r, format) {\n    r.push(createMenuItem(renderer, options, {\n      type: \"exporting\",\n      text: _message2.default.getFormatter(\"vizExport-exportButtonText\")(format),\n      format: format,\n      itemIndex: r.length\n    }));\n    return r;\n  }, items);\n  return items;\n}\n\nfunction getBackgroundColorFromMarkup(markup) {\n  var parsedMarkup = GET_COLOR_REGEX.exec(markup);\n  return parsedMarkup ? parsedMarkup[1] : void 0;\n}\n\nvar exportFromMarkup = exports.exportFromMarkup = function (markup, options) {\n  options.format = validateFormat(options.format) || DEFAULT_EXPORT_FORMAT;\n  options.fileName = options.fileName || \"file\";\n  options.exportingAction = options.onExporting;\n  options.exportedAction = options.onExported;\n  options.fileSavingAction = options.onFileSaving;\n  options.margin = (0, _type.isDefined)(options.margin) ? options.margin : MARGIN;\n  options.backgroundColor = (0, _type.isDefined)(options.backgroundColor) ? options.backgroundColor : getBackgroundColorFromMarkup(markup) || _themes2.default.getTheme().backgroundColor;\n\n  _exporter2.default.export(markup, options, getCreatorFunc(options.format));\n};\n\nvar getMarkup = exports.getMarkup = function (widgets) {\n  return combineMarkups(widgets).markup;\n};\n\nvar exportWidgets = exports.exportWidgets = function (widgets, options) {\n  options = options || {};\n  var markupInfo = exports.combineMarkups(widgets, {\n    gridLayout: options.gridLayout,\n    verticalAlignment: options.verticalAlignment,\n    horizontalAlignment: options.horizontalAlignment\n  });\n  options.width = markupInfo.width;\n  options.height = markupInfo.height;\n  exportFromMarkup(markupInfo.markup, options);\n};\n\nvar combineMarkups = exports.combineMarkups = function (widgets) {\n  var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n\n  if (!Array.isArray(widgets)) {\n    widgets = [[widgets]];\n  } else {\n    if (!Array.isArray(widgets[0])) {\n      widgets = widgets.map(function (item) {\n        return [item];\n      });\n    }\n  }\n\n  var compactView = !options.gridLayout;\n  var exportItems = widgets.reduce(function (r, row, rowIndex) {\n    var rowInfo = row.reduce(function (r, item, colIndex) {\n      var size = item.getSize();\n\n      var backgroundColor = item.option(\"backgroundColor\") || _themes2.default.getTheme(item.option(\"theme\")).backgroundColor;\n\n      backgroundColor && r.backgroundColors.indexOf(backgroundColor) === -1 && r.backgroundColors.push(backgroundColor);\n      r.hOffset = r.width;\n      r.width += size.width;\n      r.height = Math.max(r.height, size.height);\n      r.itemWidth = Math.max(r.itemWidth, size.width);\n      r.items.push({\n        markup: item.svg(),\n        width: size.width,\n        height: size.height,\n        c: colIndex,\n        r: rowIndex,\n        hOffset: r.hOffset\n      });\n      return r;\n    }, {\n      items: [],\n      height: 0,\n      itemWidth: 0,\n      hOffset: 0,\n      width: 0,\n      backgroundColors: r.backgroundColors\n    });\n    r.rowOffsets.push(r.totalHeight);\n    r.rowHeights.push(rowInfo.height);\n    r.totalHeight += rowInfo.height;\n    r.items = r.items.concat(rowInfo.items);\n    r.itemWidth = Math.max(r.itemWidth, rowInfo.itemWidth);\n    r.maxItemLen = Math.max(r.maxItemLen, rowInfo.items.length);\n    r.totalWidth = compactView ? Math.max(r.totalWidth, rowInfo.width) : r.maxItemLen * r.itemWidth;\n    return r;\n  }, {\n    items: [],\n    rowOffsets: [],\n    rowHeights: [],\n    itemWidth: 0,\n    totalHeight: 0,\n    maxItemLen: 0,\n    totalWidth: 0,\n    backgroundColors: []\n  });\n  var backgroundColor = 'data-backgroundcolor=\"'.concat(1 === exportItems.backgroundColors.length ? exportItems.backgroundColors[0] : \"\", '\" ');\n\n  var getVOffset = function (item) {\n    var align = options.verticalAlignment;\n    var dy = exportItems.rowHeights[item.r] - item.height;\n    return exportItems.rowOffsets[item.r] + (\"bottom\" === align ? dy : \"center\" === align ? dy / 2 : 0);\n  };\n\n  var getHOffset = function (item) {\n    if (compactView) {\n      return item.hOffset;\n    }\n\n    var align = options.horizontalAlignment;\n    var colWidth = exportItems.itemWidth;\n    var dx = colWidth - item.width;\n    return item.c * colWidth + (\"right\" === align ? dx : \"center\" === align ? dx / 2 : 0);\n  };\n\n  var totalHeight = exportItems.totalHeight;\n  var totalWidth = exportItems.totalWidth;\n  return {\n    markup: \"<svg \" + backgroundColor + 'height=\"' + totalHeight + '\" width=\"' + totalWidth + '\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">' + exportItems.items.map(function (item) {\n      return '<g transform=\"translate('.concat(getHOffset(item), \",\").concat(getVOffset(item), ')\">').concat(item.markup, \"</g>\");\n    }).join(\"\") + \"</svg>\",\n    width: totalWidth,\n    height: totalHeight\n  };\n};\n\nvar ExportMenu = exports.ExportMenu = function (params) {\n  var renderer = this._renderer = params.renderer;\n  this._incidentOccurred = params.incidentOccurred;\n  this._exportTo = params.exportTo;\n  this._print = params.print;\n  this._shadow = renderer.shadowFilter(\"-50%\", \"-50%\", \"200%\", \"200%\", SHADOW_OFFSET, 6, SHADOW_BLUR);\n\n  this._shadow.attr({\n    opacity: .8\n  });\n\n  this._group = renderer.g().attr({\n    \"class\": EXPORT_CSS_CLASS,\n    \"hidden-for-export\": true\n  }).linkOn(renderer.root, {\n    name: \"export-menu\",\n    after: \"peripheral\"\n  });\n  this._buttonGroup = renderer.g().attr({\n    \"class\": EXPORT_CSS_CLASS + \"-button\"\n  }).append(this._group);\n  this._listGroup = renderer.g().attr({\n    \"class\": EXPORT_CSS_CLASS + \"-list\"\n  }).append(this._group);\n  this._overlay = renderer.rect(-LIST_WIDTH + BUTTON_SIZE, BUTTON_SIZE + LIST_PADDING_TOP, LIST_WIDTH, 0);\n\n  this._overlay.attr({\n    \"stroke-width\": LIST_STROKE_WIDTH,\n    cursor: \"pointer\",\n    rx: 4,\n    ry: 4,\n    filter: this._shadow.id\n  });\n\n  this._overlay.data({\n    \"export-element-type\": \"list\"\n  });\n\n  this.validFormats = getValidFormats();\n\n  this._subscribeEvents();\n};\n\n(0, _extend.extend)(ExportMenu.prototype, {\n  getLayoutOptions: function () {\n    if (this._hiddenDueToLayout) {\n      return {\n        width: 0,\n        height: 0,\n        cutSide: \"vertical\",\n        cutLayoutSide: \"top\"\n      };\n    }\n\n    var bBox = this._buttonGroup.getBBox();\n\n    bBox.cutSide = \"vertical\";\n    bBox.cutLayoutSide = \"top\";\n    bBox.height += MARGIN;\n    bBox.position = {\n      vertical: \"top\",\n      horizontal: \"right\"\n    };\n    bBox.verticalAlignment = \"top\";\n    bBox.horizontalAlignment = \"right\";\n    return bBox;\n  },\n  probeDraw: function () {\n    this._fillSpace();\n\n    this.show();\n  },\n  shift: function (_, y) {\n    this._group.attr({\n      translateY: this._group.attr(\"translateY\") + y\n    });\n  },\n  draw: function (width, height, canvas) {\n    this._group.move(width - BUTTON_SIZE - SHADOW_OFFSET - SHADOW_BLUR + canvas.left, Math.floor(height / 2 - BUTTON_SIZE / 2));\n\n    var layoutOptions = this.getLayoutOptions();\n\n    if (layoutOptions.width > width || layoutOptions.height > height) {\n      this.freeSpace();\n    }\n\n    return this;\n  },\n  show: function () {\n    this._group.linkAppend();\n  },\n  hide: function () {\n    this._group.linkRemove();\n  },\n  setOptions: function (options) {\n    var _this2 = this;\n\n    this._options = options;\n\n    if (options.formats) {\n      options.formats = options.formats.reduce(function (r, format) {\n        format = validateFormat(format, _this2._incidentOccurred, _this2.validFormats);\n        format && r.push(format);\n        return r;\n      }, []);\n    } else {\n      options.formats = this.validFormats.supported.slice();\n    }\n\n    options.printingEnabled = void 0 === options.printingEnabled ? true : options.printingEnabled;\n\n    if (options.enabled && (options.formats.length || options.printingEnabled)) {\n      this.show();\n\n      this._updateButton();\n\n      this._updateList();\n\n      this._hideList();\n    } else {\n      this.hide();\n    }\n  },\n  dispose: function () {\n    this._unsubscribeEvents();\n\n    this._group.linkRemove().linkOff();\n\n    this._group.dispose();\n\n    this._shadow.dispose();\n  },\n  layoutOptions: function () {\n    return this._options.enabled && {\n      horizontalAlignment: \"right\",\n      verticalAlignment: \"top\",\n      weak: true\n    };\n  },\n  measure: function () {\n    this._fillSpace();\n\n    var margin = this._options.button.margin;\n    return [BUTTON_SIZE + margin.left + margin.right, BUTTON_SIZE + margin.top + margin.bottom];\n  },\n  move: function (rect) {\n    var margin = this._options.button.margin;\n\n    this._group.attr({\n      translateX: Math.round(rect[0]) + margin.left,\n      translateY: Math.round(rect[1]) + margin.top\n    });\n  },\n  _fillSpace: function () {\n    this._hiddenDueToLayout = false;\n    this.show();\n  },\n  freeSpace: function () {\n    this._incidentOccurred(\"W2107\");\n\n    this._hiddenDueToLayout = true;\n    this.hide();\n  },\n  _hideList: function () {\n    this._listGroup.remove();\n\n    this._listShown = false;\n\n    this._setButtonState(\"default\");\n\n    this._menuItems.forEach(function (item) {\n      return item.resetState();\n    });\n  },\n  _showList: function () {\n    this._listGroup.append(this._group);\n\n    this._listShown = true;\n\n    this._menuItems.forEach(function (item) {\n      return item.fixPosition();\n    });\n  },\n  _setButtonState: function (state) {\n    var style = this._options.button[state];\n\n    this._button.attr({\n      stroke: style.borderColor,\n      fill: style.backgroundColor\n    });\n\n    this._icon.attr({\n      fill: style.color\n    });\n  },\n  _subscribeEvents: function () {\n    var _this3 = this;\n\n    this._renderer.root.on(_pointer2.default.up + \".export\", function (e) {\n      var elementType = e.target[EXPORT_DATA_KEY];\n\n      if (!elementType) {\n        if (_this3._button) {\n          _this3._hideList();\n        }\n\n        return;\n      }\n\n      if (\"button\" === elementType) {\n        if (_this3._listShown) {\n          _this3._setButtonState(\"default\");\n\n          _this3._hideList();\n        } else {\n          _this3._setButtonState(\"focus\");\n\n          _this3._showList();\n        }\n      } else {\n        if (\"printing\" === elementType) {\n          _this3._print();\n\n          _this3._hideList();\n        } else {\n          if (\"exporting\" === elementType) {\n            _this3._exportTo(e.target[FORMAT_DATA_KEY]);\n\n            _this3._hideList();\n          }\n        }\n      }\n    });\n\n    this._listGroup.on(pointerActions, function (e) {\n      return e.stopPropagation();\n    });\n\n    this._buttonGroup.on(_pointer2.default.enter, function () {\n      return _this3._setButtonState(\"hover\");\n    });\n\n    this._buttonGroup.on(_pointer2.default.leave, function () {\n      return _this3._setButtonState(_this3._listShown ? \"focus\" : \"default\");\n    });\n\n    this._buttonGroup.on(_pointer2.default.down + \".export\", function () {\n      return _this3._setButtonState(\"active\");\n    });\n  },\n  _unsubscribeEvents: function () {\n    this._renderer.root.off(\".export\");\n\n    this._listGroup.off();\n\n    this._buttonGroup.off();\n  },\n  _updateButton: function () {\n    var renderer = this._renderer;\n    var options = this._options;\n    var exportData = {\n      \"export-element-type\": \"button\"\n    };\n\n    if (!this._button) {\n      this._button = renderer.rect(0, 0, BUTTON_SIZE, BUTTON_SIZE).append(this._buttonGroup);\n\n      this._button.attr({\n        rx: 4,\n        ry: 4,\n        fill: options.button.default.backgroundColor,\n        stroke: options.button.default.borderColor,\n        \"stroke-width\": 1,\n        cursor: \"pointer\"\n      });\n\n      this._button.data(exportData);\n\n      this._icon = renderer.path(ICON_COORDS).append(this._buttonGroup);\n\n      this._icon.attr({\n        fill: options.button.default.color,\n        cursor: \"pointer\"\n      });\n\n      this._icon.data(exportData);\n\n      this._buttonGroup.setTitle(_message2.default.format(\"vizExport-titleMenuText\"));\n    }\n  },\n  _updateList: function () {\n    var options = this._options;\n    var buttonDefault = options.button.default;\n    var listGroup = this._listGroup;\n    var items = createMenuItems(this._renderer, options);\n\n    this._shadow.attr({\n      color: options.shadowColor\n    });\n\n    this._overlay.attr({\n      height: items.length * MENU_ITEM_HEIGHT + 2 * LIST_STROKE_WIDTH,\n      fill: buttonDefault.backgroundColor,\n      stroke: buttonDefault.borderColor\n    });\n\n    listGroup.clear();\n\n    this._overlay.append(listGroup);\n\n    items.forEach(function (item) {\n      return item.g.append(listGroup);\n    });\n    this._menuItems = items;\n  }\n});\n\nfunction getExportOptions(widget, exportOptions, fileName, format) {\n  if (format || exportOptions.format) {\n    format = validateFormat(format || exportOptions.format, widget._incidentOccurred);\n  }\n\n  return {\n    format: format || DEFAULT_EXPORT_FORMAT,\n    fileName: fileName || exportOptions.fileName || \"file\",\n    proxyUrl: exportOptions.proxyUrl,\n    backgroundColor: exportOptions.backgroundColor,\n    width: widget._canvas.width,\n    height: widget._canvas.height,\n    margin: exportOptions.margin,\n    svgToCanvas: exportOptions.svgToCanvas,\n    forceProxy: exportOptions.forceProxy,\n    exportingAction: widget._createActionByOption(\"onExporting\"),\n    exportedAction: widget._createActionByOption(\"onExported\"),\n    fileSavingAction: widget._createActionByOption(\"onFileSaving\")\n  };\n}\n\nvar plugin = exports.plugin = {\n  name: \"export\",\n  init: function () {\n    var _this4 = this;\n\n    this._exportMenu = new exports.ExportMenu({\n      renderer: this._renderer,\n      incidentOccurred: this._incidentOccurred,\n      print: function () {\n        return _this4.print();\n      },\n      exportTo: function (format) {\n        return _this4.exportTo(void 0, format);\n      }\n    });\n\n    this._layout.add(this._exportMenu);\n  },\n  dispose: function () {\n    this._exportMenu.dispose();\n  },\n  members: {\n    _getExportMenuOptions: function () {\n      return (0, _extend.extend)({}, this._getOption(\"export\"), {\n        rtl: this._getOption(\"rtlEnabled\", true)\n      });\n    },\n    _disablePointerEvents: function () {\n      var pointerEventsValue = this._renderer.root.attr(\"pointer-events\");\n\n      this._renderer.root.attr({\n        \"pointer-events\": \"none\"\n      });\n\n      return pointerEventsValue;\n    },\n    exportTo: function (fileName, format) {\n      var _this5 = this;\n\n      var menu = this._exportMenu;\n      var options = getExportOptions(this, this._getOption(\"export\") || {}, fileName, format);\n      menu && menu.hide();\n\n      var pointerEventsValue = this._disablePointerEvents();\n\n      var promise = _exporter2.default.export(this._renderer.root.element, options, getCreatorFunc(options.format)).fail(_console.logger.error).always(function () {\n        _this5._renderer.root.attr({\n          \"pointer-events\": pointerEventsValue\n        });\n      });\n\n      menu && menu.show();\n      return promise;\n    },\n    print: function () {\n      var _this6 = this;\n\n      var menu = this._exportMenu;\n      var options = getExportOptions(this, this._getOption(\"export\") || {});\n      options.exportingAction = null;\n      options.exportedAction = null;\n      options.margin = 0;\n      options.format = \"PNG\";\n      options.forceProxy = true;\n\n      options.fileSavingAction = function (eventArgs) {\n        _print(\"data:image/png;base64,\".concat(eventArgs.data), {\n          __test: options.__test\n        });\n\n        eventArgs.cancel = true;\n      };\n\n      var pointerEventsValue = this._disablePointerEvents();\n\n      menu && menu.hide();\n\n      var promise = _exporter2.default.export(this._renderer.root.element, options, getCreatorFunc(options.format)).fail(_console.logger.error).always(function () {\n        _this6._renderer.root.attr({\n          \"pointer-events\": pointerEventsValue\n        });\n      });\n\n      menu && menu.show();\n      return promise;\n    }\n  },\n  customize: function (constructor) {\n    var proto = constructor.prototype;\n    constructor.addChange({\n      code: \"EXPORT\",\n      handler: function () {\n        this._exportMenu.setOptions(this._getExportMenuOptions());\n\n        this._change([\"LAYOUT\"]);\n      },\n      isThemeDependent: true,\n      isOptionChange: true,\n      option: \"export\"\n    });\n    proto._optionChangesMap.onExporting = \"EXPORT\";\n    proto._optionChangesMap.onExported = \"EXPORT\";\n    proto._optionChangesMap.onFileSaving = \"EXPORT\";\n  },\n  fontFields: [\"export.font\"]\n};","map":null,"metadata":{},"sourceType":"script"}