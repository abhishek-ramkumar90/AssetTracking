{"ast":null,"code":"/**\r\n * DevExtreme (core/dom_component_with_template.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"./renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _type = require(\"./utils/type\");\n\nvar _common = require(\"./utils/common\");\n\nvar _extend = require(\"./utils/extend\");\n\nvar _errors = require(\"./errors\");\n\nvar _dom = require(\"./utils/dom\");\n\nvar _devices = require(\"./devices\");\n\nvar _devices2 = _interopRequireDefault(_devices);\n\nvar _dom_component = require(\"./dom_component\");\n\nvar _dom_component2 = _interopRequireDefault(_dom_component);\n\nvar _template = require(\"./templates/template\");\n\nvar _template_base = require(\"./templates/template_base\");\n\nvar _function_template = require(\"./templates/function_template\");\n\nvar _empty_template = require(\"./templates/empty_template\");\n\nvar _child_default_template = require(\"./templates/child_default_template\");\n\nvar _inflector = require(\"./utils/inflector\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar TEXT_NODE = 3;\nvar ANONYMOUS_TEMPLATE_NAME = \"template\";\nvar TEMPLATE_SELECTOR = \"[data-options*='dxTemplate']\";\nvar TEMPLATE_WRAPPER_CLASS = \"dx-template-wrapper\";\nvar DX_POLYMORPH_WIDGET_TEMPLATE = new _function_template.FunctionTemplate(function (options) {\n  var widgetName = options.model.widget;\n\n  if (widgetName) {\n    var widgetElement = (0, _renderer2.default)(\"<div>\");\n    var widgetOptions = options.model.options || {};\n\n    if (\"button\" === widgetName || \"tabs\" === widgetName || \"dropDownMenu\" === widgetName) {\n      var deprecatedName = widgetName;\n      widgetName = (0, _inflector.camelize)(\"dx-\" + widgetName);\n      (0, _errors.log)(\"W0001\", \"dxToolbar - 'widget' item field\", deprecatedName, \"16.1\", \"Use: '\" + widgetName + \"' instead\");\n    }\n\n    if (options.parent) {\n      options.parent._createComponent(widgetElement, widgetName, widgetOptions);\n    } else {\n      widgetElement[widgetName](widgetOptions);\n    }\n\n    return widgetElement;\n  }\n\n  return (0, _renderer2.default)();\n});\n\nvar DOMComponentWithTemplate = _dom_component2.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      integrationOptions: {\n        watchMethod: function (fn, callback, options) {\n          options = options || {};\n\n          if (!options.skipImmediate) {\n            callback(fn());\n          }\n\n          return _common.noop;\n        },\n        templates: {\n          \"dx-polymorph-widget\": DX_POLYMORPH_WIDGET_TEMPLATE\n        },\n        createTemplate: function (element) {\n          return new _template.Template(element);\n        }\n      }\n    });\n  },\n  _init: function () {\n    this.callBase();\n    this._tempTemplates = [];\n    this._defaultTemplates = {};\n\n    this._initTemplates();\n  },\n  _dispose: function () {\n    this._cleanTemplates();\n\n    this.callBase();\n  },\n  _cleanTemplates: function () {\n    this._tempTemplates.forEach(function (t) {\n      t.template.dispose && t.template.dispose();\n    });\n\n    this._tempTemplates = [];\n  },\n  _initTemplates: function () {\n    this._extractTemplates();\n\n    this._extractAnonymousTemplate();\n  },\n  _extractTemplates: function () {\n    var templateElements = this.$element().contents().filter(TEMPLATE_SELECTOR);\n    var templatesMap = {};\n    templateElements.each(function (_, template) {\n      var templateOptions = (0, _dom.getElementOptions)(template).dxTemplate;\n\n      if (!templateOptions) {\n        return;\n      }\n\n      if (!templateOptions.name) {\n        throw (0, _errors.Error)(\"E0023\");\n      }\n\n      (0, _renderer2.default)(template).addClass(TEMPLATE_WRAPPER_CLASS).detach();\n      templatesMap[templateOptions.name] = templatesMap[templateOptions.name] || [];\n      templatesMap[templateOptions.name].push(template);\n    });\n\n    for (var templateName in templatesMap) {\n      var deviceTemplate = this._findTemplateByDevice(templatesMap[templateName]);\n\n      if (deviceTemplate) {\n        this._saveTemplate(templateName, deviceTemplate);\n      }\n    }\n  },\n  _saveTemplate: function (name, template) {\n    var templates = this.option(\"integrationOptions.templates\");\n    templates[name] = this._createTemplate(template);\n  },\n  _findTemplateByDevice: function (templates) {\n    var suitableTemplate = (0, _common.findBestMatches)(_devices2.default.current(), templates, function (template) {\n      return (0, _dom.getElementOptions)(template).dxTemplate;\n    })[0];\n    templates.forEach(function (template) {\n      if (template !== suitableTemplate) {\n        (0, _renderer2.default)(template).remove();\n      }\n    });\n    return suitableTemplate;\n  },\n  _extractAnonymousTemplate: function () {\n    var templates = this.option(\"integrationOptions.templates\");\n\n    var anonymousTemplateName = this._getAnonymousTemplateName();\n\n    var $anonymousTemplate = this.$element().contents().detach();\n    var $notJunkTemplateContent = $anonymousTemplate.filter(function (_, element) {\n      var isTextNode = element.nodeType === TEXT_NODE;\n      var isEmptyText = (0, _renderer2.default)(element).text().trim().length < 1;\n      return !(isTextNode && isEmptyText);\n    });\n    var onlyJunkTemplateContent = $notJunkTemplateContent.length < 1;\n\n    if (!templates[anonymousTemplateName] && !onlyJunkTemplateContent) {\n      templates[anonymousTemplateName] = this._createTemplate($anonymousTemplate);\n    }\n  },\n  _getAnonymousTemplateName: function () {\n    return ANONYMOUS_TEMPLATE_NAME;\n  },\n  _createTemplateIfNeeded: function (templateSource) {\n    var templateKey = function (templateSource) {\n      return (0, _type.isRenderer)(templateSource) && templateSource[0] || templateSource;\n    };\n\n    var cachedTemplate = this._tempTemplates.filter(function (t) {\n      templateSource = templateKey(templateSource);\n      return t.source === templateSource;\n    })[0];\n\n    if (cachedTemplate) {\n      return cachedTemplate.template;\n    }\n\n    var template = this._createTemplate(templateSource);\n\n    this._tempTemplates.push({\n      template: template,\n      source: templateKey(templateSource)\n    });\n\n    return template;\n  },\n  _createTemplate: function (templateSource) {\n    templateSource = \"string\" === typeof templateSource ? (0, _dom.normalizeTemplateElement)(templateSource) : templateSource;\n    return this.option(\"integrationOptions.createTemplate\")(templateSource);\n  },\n  _getTemplateByOption: function (optionName) {\n    return this._getTemplate(this.option(optionName));\n  },\n  _getTemplate: function (templateSource) {\n    if ((0, _type.isFunction)(templateSource)) {\n      return new _function_template.FunctionTemplate(function (options) {\n        var templateSourceResult = templateSource.apply(this, this._getNormalizedTemplateArgs(options));\n\n        if (!(0, _type.isDefined)(templateSourceResult)) {\n          return new _empty_template.EmptyTemplate();\n        }\n\n        var dispose = false;\n\n        var template = this._acquireTemplate(templateSourceResult, function (templateSource) {\n          if (templateSource.nodeType || (0, _type.isRenderer)(templateSource) && !(0, _renderer2.default)(templateSource).is(\"script\")) {\n            return new _function_template.FunctionTemplate(function () {\n              return templateSource;\n            });\n          }\n\n          dispose = true;\n          return this._createTemplate(templateSource);\n        }.bind(this));\n\n        var result = template.render(options);\n        dispose && template.dispose && template.dispose();\n        return result;\n      }.bind(this));\n    }\n\n    return this._acquireTemplate(templateSource, this._createTemplateIfNeeded.bind(this));\n  },\n  _acquireTemplate: function (templateSource, createTemplate) {\n    if (null == templateSource) {\n      return new _empty_template.EmptyTemplate();\n    }\n\n    if (templateSource instanceof _child_default_template.ChildDefaultTemplate) {\n      return this._defaultTemplates[templateSource.name];\n    }\n\n    if (templateSource instanceof _template_base.TemplateBase) {\n      return templateSource;\n    }\n\n    if ((0, _type.isFunction)(templateSource.render) && !(0, _type.isRenderer)(templateSource)) {\n      return this._addOneRenderedCall(templateSource);\n    }\n\n    if (templateSource.nodeType || (0, _type.isRenderer)(templateSource)) {\n      return createTemplate((0, _renderer2.default)(templateSource));\n    }\n\n    if (\"string\" === typeof templateSource) {\n      var nonIntegrationTemplates = this.option(\"integrationOptions.skipTemplates\") || [];\n      var integrationTemplate = null;\n\n      if (nonIntegrationTemplates.indexOf(templateSource) === -1) {\n        integrationTemplate = this._renderIntegrationTemplate(templateSource);\n      }\n\n      return integrationTemplate || this._defaultTemplates[templateSource] || createTemplate(templateSource);\n    }\n\n    return this._acquireTemplate(templateSource.toString(), createTemplate);\n  },\n  _getNormalizedTemplateArgs: function (options) {\n    var args = [];\n\n    if (\"model\" in options) {\n      args.push(options.model);\n    }\n\n    if (\"index\" in options) {\n      args.push(options.index);\n    }\n\n    args.push(options.container);\n    return args;\n  },\n  _addOneRenderedCall: function (template) {\n    var _render = template.render.bind(template);\n\n    return (0, _extend.extend)({}, template, {\n      render: function (options) {\n        var templateResult = _render(options);\n\n        options && options.onRendered && options.onRendered();\n        return templateResult;\n      }\n    });\n  },\n  _renderIntegrationTemplate: function (templateSource) {\n    var integrationTemplate = this.option(\"integrationOptions.templates\")[templateSource];\n\n    if (integrationTemplate && !(integrationTemplate instanceof _template_base.TemplateBase)) {\n      var isAsyncTemplate = this.option(\"templatesRenderAsynchronously\");\n\n      if (!isAsyncTemplate) {\n        return this._addOneRenderedCall(integrationTemplate);\n      }\n    }\n\n    return integrationTemplate;\n  }\n});\n\nmodule.exports = DOMComponentWithTemplate;","map":null,"metadata":{},"sourceType":"script"}