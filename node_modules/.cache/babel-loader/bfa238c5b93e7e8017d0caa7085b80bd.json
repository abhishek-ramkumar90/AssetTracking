{"ast":null,"code":"/**\r\n * DevExtreme (viz/core/title.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _Number = Number;\n\nvar _isString = require(\"../../core/utils/type\").isString;\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar _patchFontOptions = require(\"./utils\").patchFontOptions;\n\nvar parseHorizontalAlignment = require(\"./utils\").enumParser([\"left\", \"center\", \"right\"]);\n\nvar parseVerticalAlignment = require(\"./utils\").enumParser([\"top\", \"bottom\"]);\n\nvar DEFAULT_MARGIN = 10;\n\nfunction hasText(text) {\n  return !!(text && String(text).length > 0);\n}\n\nfunction processTitleLength(elem, text, width, options, placeholderSize) {\n  if (elem.attr({\n    text: text\n  }).setMaxSize(width, placeholderSize, options).textChanged) {\n    elem.setTitle(text);\n  }\n}\n\nfunction pickMarginValue(value) {\n  return value >= 0 ? _Number(value) : DEFAULT_MARGIN;\n}\n\nfunction validateMargin(margin) {\n  var result;\n\n  if (margin >= 0) {\n    result = {\n      left: _Number(margin),\n      top: _Number(margin),\n      right: _Number(margin),\n      bottom: _Number(margin)\n    };\n  } else {\n    margin = margin || {};\n    result = {\n      left: pickMarginValue(margin.left),\n      top: pickMarginValue(margin.top),\n      right: pickMarginValue(margin.right),\n      bottom: pickMarginValue(margin.bottom)\n    };\n  }\n\n  return result;\n}\n\nfunction checkRect(rect, boundingRect) {\n  return rect[2] - rect[0] < boundingRect.width || rect[3] - rect[1] < boundingRect.height;\n}\n\nfunction Title(params) {\n  this._params = params;\n  this._group = params.renderer.g().attr({\n    \"class\": params.cssClass\n  }).linkOn(params.root || params.renderer.root, \"title\");\n  this._hasText = false;\n}\n\nextend(Title.prototype, require(\"./layout_element\").LayoutElement.prototype, {\n  dispose: function () {\n    var that = this;\n\n    that._group.linkRemove();\n\n    that._group.linkOff();\n\n    if (that._titleElement) {\n      that._clipRect.dispose();\n\n      that._titleElement = that._subtitleElement = that._clipRect = null;\n    }\n\n    that._params = that._group = that._options = null;\n  },\n  _updateOptions: function (options) {\n    this._options = options;\n    this._options.horizontalAlignment = parseHorizontalAlignment(options.horizontalAlignment, \"center\");\n    this._options.verticalAlignment = parseVerticalAlignment(options.verticalAlignment, \"top\");\n    this._options.margin = validateMargin(options.margin);\n  },\n  _updateStructure: function () {\n    var that = this;\n    var renderer = that._params.renderer;\n    var group = that._group;\n    var options = that._options;\n    var align = options.horizontalAlignment;\n\n    if (!that._titleElement) {\n      that._titleElement = renderer.text().append(group);\n      that._subtitleElement = renderer.text();\n      that._clipRect = renderer.clipRect();\n      group.attr({\n        \"clip-path\": that._clipRect.id\n      });\n    }\n\n    that._titleElement.attr({\n      align: align,\n      \"class\": options.cssClass\n    });\n\n    that._subtitleElement.attr({\n      align: align,\n      \"class\": options.subtitle.cssClass\n    });\n\n    group.linkAppend();\n    hasText(options.subtitle.text) ? that._subtitleElement.append(group) : that._subtitleElement.remove();\n  },\n  _updateTexts: function () {\n    var that = this;\n    var options = that._options;\n    var subtitleOptions = options.subtitle;\n    var titleElement = that._titleElement;\n    var subtitleElement = that._subtitleElement;\n    var testText = \"A\";\n    var titleBox;\n    var y;\n    titleElement.attr({\n      text: testText,\n      y: 0\n    }).css(_patchFontOptions(options.font));\n    titleBox = titleElement.getBBox();\n    that._baseLineCorrection = titleBox.height + titleBox.y;\n    titleElement.attr({\n      text: options.text\n    });\n    titleBox = titleElement.getBBox();\n    y = -titleBox.y;\n    titleElement.attr({\n      y: y\n    });\n\n    if (hasText(subtitleOptions.text)) {\n      subtitleElement.attr({\n        text: subtitleOptions.text,\n        y: 0\n      }).css(_patchFontOptions(subtitleOptions.font));\n    }\n  },\n  _shiftSubtitle: function () {\n    var that = this;\n\n    var titleBox = that._titleElement.getBBox();\n\n    var element = that._subtitleElement;\n    var offset = that._options.subtitle.offset;\n    element.move(0, titleBox.y + titleBox.height - element.getBBox().y - offset);\n  },\n  _updateBoundingRectAlignment: function () {\n    var boundingRect = this._boundingRect;\n    var options = this._options;\n    boundingRect.verticalAlignment = options.verticalAlignment;\n    boundingRect.horizontalAlignment = options.horizontalAlignment;\n    boundingRect.cutLayoutSide = options.verticalAlignment;\n    boundingRect.cutSide = \"vertical\";\n    boundingRect.position = {\n      horizontal: options.horizontalAlignment,\n      vertical: options.verticalAlignment\n    };\n  },\n  hasText: function () {\n    return this._hasText;\n  },\n  update: function (themeOptions, userOptions) {\n    var that = this;\n    var options = extend(true, {}, themeOptions, processTitleOptions(userOptions));\n\n    var _hasText = hasText(options.text);\n\n    var isLayoutChanged = _hasText || _hasText !== that._hasText;\n    that._baseLineCorrection = 0;\n\n    that._updateOptions(options);\n\n    that._boundingRect = {};\n\n    if (_hasText) {\n      that._updateStructure();\n\n      that._updateTexts();\n    } else {\n      that._group.linkRemove();\n    }\n\n    that._updateBoundingRect();\n\n    that._updateBoundingRectAlignment();\n\n    that._hasText = _hasText;\n    return isLayoutChanged;\n  },\n  draw: function (width, height) {\n    var that = this;\n\n    if (that._hasText) {\n      that._group.linkAppend();\n\n      that._correctTitleLength(width);\n\n      if (that._group.getBBox().height > height) {\n        this.freeSpace();\n      }\n    }\n\n    return that;\n  },\n  probeDraw: function (width, height) {\n    this.draw(width, height);\n    return this;\n  },\n  _correctTitleLength: function (width) {\n    var that = this;\n    var options = that._options;\n    var margin = options.margin;\n    var maxWidth = width - margin.left - margin.right;\n    var placeholderSize = options.placeholderSize;\n    processTitleLength(that._titleElement, options.text, maxWidth, options, placeholderSize);\n\n    if (that._subtitleElement) {\n      if (_Number(placeholderSize) > 0) {\n        placeholderSize -= that._titleElement.getBBox().height;\n      }\n\n      processTitleLength(that._subtitleElement, options.subtitle.text, maxWidth, options.subtitle, placeholderSize);\n\n      that._shiftSubtitle();\n    }\n\n    that._updateBoundingRect();\n\n    var _this$getCorrectedLay = this.getCorrectedLayoutOptions(),\n        x = _this$getCorrectedLay.x,\n        y = _this$getCorrectedLay.y,\n        height = _this$getCorrectedLay.height;\n\n    this._clipRect.attr({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n  },\n  getLayoutOptions: function () {\n    return this._boundingRect || null;\n  },\n  shift: function (x, y) {\n    var that = this;\n    var box = that.getLayoutOptions();\n\n    that._group.move(x - box.x, y - box.y);\n\n    return that;\n  },\n  _updateBoundingRect: function () {\n    var that = this;\n    var options = that._options;\n    var margin = options.margin;\n    var boundingRect = that._boundingRect;\n    var box;\n    box = that._hasText ? that._group.getBBox() : {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n      isEmpty: true\n    };\n\n    if (!box.isEmpty) {\n      box.height += margin.top + margin.bottom - that._baseLineCorrection;\n      box.width += margin.left + margin.right;\n      box.x -= margin.left;\n      box.y += that._baseLineCorrection - margin.top;\n    }\n\n    if (options.placeholderSize > 0) {\n      box.height = options.placeholderSize;\n    }\n\n    boundingRect.height = box.height;\n    boundingRect.width = box.width;\n    boundingRect.x = box.x;\n    boundingRect.y = box.y;\n  },\n  getCorrectedLayoutOptions: function () {\n    var srcBox = this.getLayoutOptions();\n    var correction = this._baseLineCorrection;\n    return extend({}, srcBox, {\n      y: srcBox.y - correction,\n      height: srcBox.height + correction\n    });\n  },\n  layoutOptions: function () {\n    if (!this._hasText) {\n      return null;\n    }\n\n    return {\n      horizontalAlignment: this._boundingRect.horizontalAlignment,\n      verticalAlignment: this._boundingRect.verticalAlignment,\n      priority: 0\n    };\n  },\n  measure: function (size) {\n    this.draw(size[0], size[1]);\n    return [this._boundingRect.width, this._boundingRect.height];\n  },\n  move: function (rect, fitRect) {\n    var boundingRect = this._boundingRect;\n\n    if (checkRect(rect, boundingRect)) {\n      this.shift(fitRect[0], fitRect[1]);\n    } else {\n      this.shift(Math.round(rect[0]), Math.round(rect[1]));\n    }\n  },\n  freeSpace: function () {\n    var that = this;\n\n    that._params.incidentOccurred(\"W2103\");\n\n    that._group.linkRemove();\n\n    that._boundingRect.width = that._boundingRect.height = 0;\n  },\n  getOptions: function () {\n    return this._options;\n  },\n  changeLink: function (root) {\n    this._group.linkRemove();\n\n    this._group.linkOn(root, \"title\");\n  }\n});\nexports.Title = Title;\n\nfunction processTitleOptions(options) {\n  var newOptions = _isString(options) ? {\n    text: options\n  } : options || {};\n  newOptions.subtitle = _isString(newOptions.subtitle) ? {\n    text: newOptions.subtitle\n  } : newOptions.subtitle || {};\n  return newOptions;\n}\n\nexports.plugin = {\n  name: \"title\",\n  init: function () {\n    var that = this;\n    that._title = new exports.Title({\n      renderer: that._renderer,\n      cssClass: that._rootClassPrefix + \"-title\",\n      incidentOccurred: that._incidentOccurred\n    });\n\n    that._layout.add(that._title);\n  },\n  dispose: function () {\n    this._title.dispose();\n\n    this._title = null;\n  },\n  customize: function (constructor) {\n    constructor.addChange({\n      code: \"TITLE\",\n      handler: function () {\n        if (this._title.update(this._themeManager.theme(\"title\"), this.option(\"title\"))) {\n          this._change([\"LAYOUT\"]);\n        }\n      },\n      isThemeDependent: true,\n      option: \"title\",\n      isOptionChange: true\n    });\n  },\n  fontFields: [\"title.font\", \"title.subtitle.font\"]\n};","map":null,"metadata":{},"sourceType":"script"}