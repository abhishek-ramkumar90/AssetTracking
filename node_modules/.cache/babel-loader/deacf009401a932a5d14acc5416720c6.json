{"ast":null,"code":"/**\r\n * DevExtreme (core/class.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar errors = require(\"./errors\");\n\nvar typeUtils = require(\"./utils/type\");\n\nvar wrapOverridden = function (baseProto, methodName, method) {\n  return function () {\n    var prevCallBase = this.callBase;\n    this.callBase = baseProto[methodName];\n\n    try {\n      return method.apply(this, arguments);\n    } finally {\n      this.callBase = prevCallBase;\n    }\n  };\n};\n\nvar clonePrototype = function (obj) {\n  var func = function () {};\n\n  func.prototype = obj.prototype;\n  return new func();\n};\n\nvar redefine = function (members) {\n  var that = this;\n  var overridden;\n  var memberName;\n  var member;\n\n  if (!members) {\n    return that;\n  }\n\n  for (memberName in members) {\n    member = members[memberName];\n    overridden = \"function\" === typeof that.prototype[memberName] && \"function\" === typeof member;\n    that.prototype[memberName] = overridden ? wrapOverridden(that.parent.prototype, memberName, member) : member;\n  }\n\n  return that;\n};\n\nvar include = function () {\n  var classObj = this;\n  var argument;\n  var name;\n  var i;\n  var hasClassObjOwnProperty = Object.prototype.hasOwnProperty.bind(classObj);\n  var isES6Class = !hasClassObjOwnProperty(\"_includedCtors\") && !hasClassObjOwnProperty(\"_includedPostCtors\");\n\n  if (isES6Class) {\n    classObj._includedCtors = classObj._includedCtors.slice(0);\n    classObj._includedPostCtors = classObj._includedPostCtors.slice(0);\n  }\n\n  for (i = 0; i < arguments.length; i++) {\n    argument = arguments[i];\n\n    if (argument.ctor) {\n      classObj._includedCtors.push(argument.ctor);\n    }\n\n    if (argument.postCtor) {\n      classObj._includedPostCtors.push(argument.postCtor);\n    }\n\n    for (name in argument) {\n      if (\"ctor\" === name || \"postCtor\" === name) {\n        continue;\n      }\n\n      classObj.prototype[name] = argument[name];\n    }\n  }\n\n  return classObj;\n};\n\nvar subclassOf = function (parentClass) {\n  var hasParentProperty = Object.prototype.hasOwnProperty.bind(this)(\"parent\");\n  var isES6Class = !hasParentProperty && this.parent;\n\n  if (isES6Class) {\n    var baseClass = Object.getPrototypeOf(this);\n    return baseClass === parentClass || baseClass.subclassOf(parentClass);\n  } else {\n    if (this.parent === parentClass) {\n      return true;\n    }\n\n    if (!this.parent || !this.parent.subclassOf) {\n      return false;\n    }\n\n    return this.parent.subclassOf(parentClass);\n  }\n};\n\nvar abstract = function () {\n  throw errors.Error(\"E0001\");\n};\n\nvar copyStatic = function () {\n  var hasOwn = Object.prototype.hasOwnProperty;\n  return function (source, destination) {\n    for (var key in source) {\n      if (!hasOwn.call(source, key)) {\n        return;\n      }\n\n      destination[key] = source[key];\n    }\n  };\n}();\n\nvar classImpl = function () {};\n\nclassImpl.inherit = function (members) {\n  var inheritor = function () {\n    if (!this || typeUtils.isWindow(this) || \"function\" !== typeof this.constructor) {\n      throw errors.Error(\"E0003\");\n    }\n\n    var instance = this;\n    var ctor = instance.ctor;\n    var includedCtors = instance.constructor._includedCtors;\n    var includedPostCtors = instance.constructor._includedPostCtors;\n    var i;\n\n    for (i = 0; i < includedCtors.length; i++) {\n      includedCtors[i].call(instance);\n    }\n\n    if (ctor) {\n      ctor.apply(instance, arguments);\n    }\n\n    for (i = 0; i < includedPostCtors.length; i++) {\n      includedPostCtors[i].call(instance);\n    }\n  };\n\n  inheritor.prototype = clonePrototype(this);\n  copyStatic(this, inheritor);\n  inheritor.inherit = this.inherit;\n  inheritor.abstract = abstract;\n  inheritor.redefine = redefine;\n  inheritor.include = include;\n  inheritor.subclassOf = subclassOf;\n  inheritor.parent = this;\n  inheritor._includedCtors = this._includedCtors ? this._includedCtors.slice(0) : [];\n  inheritor._includedPostCtors = this._includedPostCtors ? this._includedPostCtors.slice(0) : [];\n  inheritor.prototype.constructor = inheritor;\n  inheritor.redefine(members);\n  return inheritor;\n};\n\nclassImpl.abstract = abstract;\nmodule.exports = classImpl;","map":null,"metadata":{},"sourceType":"script"}