{"ast":null,"code":"/**\r\n * DevExtreme (viz/core/renderers/animation.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar animationFrame = require(\"../../../animation/frame\");\n\nvar noop = function () {};\n\nvar easingFunctions = {\n  easeOutCubic: function (pos, start, end) {\n    return 1 === pos ? end : (1 - Math.pow(1 - pos, 3)) * (end - start) + +start;\n  },\n  linear: function (pos, start, end) {\n    return 1 === pos ? end : pos * (end - start) + +start;\n  }\n};\nexports.easingFunctions = easingFunctions;\nvar animationSvgStep = {\n  segments: function segments(elem, params, progress, easing, currentParams) {\n    var from = params.from;\n    var to = params.to;\n    var curSeg;\n    var seg;\n    var i;\n    var j;\n    var segments = [];\n\n    for (i = 0; i < from.length; i++) {\n      curSeg = from[i];\n      seg = [curSeg[0]];\n\n      if (curSeg.length > 1) {\n        for (j = 1; j < curSeg.length; j++) {\n          seg.push(easing(progress, curSeg[j], to[i][j]));\n        }\n      }\n\n      segments.push(seg);\n    }\n\n    currentParams.segments = params.end && 1 === progress ? params.end : segments;\n    elem.attr({\n      segments: segments\n    });\n  },\n  arc: function (elem, params, progress, easing) {\n    var from = params.from;\n    var to = params.to;\n    var current = {};\n\n    for (var i in from) {\n      current[i] = easing(progress, from[i], to[i]);\n    }\n\n    elem.attr(current);\n  },\n  transform: function (elem, params, progress, easing, currentParams) {\n    var from = params.from;\n    var to = params.to;\n    var current = {};\n\n    for (var i in from) {\n      current[i] = currentParams[i] = easing(progress, from[i], to[i]);\n    }\n\n    elem.attr(current);\n  },\n  base: function (elem, params, progress, easing, currentParams, attributeName) {\n    var obj = {};\n    obj[attributeName] = currentParams[attributeName] = easing(progress, params.from, params.to);\n    elem.attr(obj);\n  },\n  _: noop,\n  complete: function (element, currentSettings) {\n    element.attr(currentSettings);\n  }\n};\n\nfunction step(now) {\n  var that = this;\n  var animateStep = that._animateStep;\n  var attrName;\n  that._progress = that._calcProgress(now);\n\n  for (attrName in that.params) {\n    var anim = animateStep[attrName] || animateStep.base;\n    anim(that.element, that.params[attrName], that._progress, that._easing, that._currentParams, attrName);\n  }\n\n  that.options.step && that.options.step(that._easing(that._progress, 0, 1), that._progress);\n\n  if (1 === that._progress) {\n    return that.stop();\n  }\n\n  return true;\n}\n\nfunction delayTick(now) {\n  if (now - this._startTime >= this.delay) {\n    this.tick = step;\n  }\n\n  return true;\n}\n\nfunction start(now) {\n  this._startTime = now;\n  this.tick = this.delay ? delayTick : step;\n  return true;\n}\n\nfunction Animation(element, params, options) {\n  var that = this;\n  that._progress = 0;\n  that.element = element;\n  that.params = params;\n  that.options = options;\n  that.duration = options.partitionDuration ? options.duration * options.partitionDuration : options.duration;\n  that.delay = options.delay && options.duration * options.delay || 0;\n  that._animateStep = options.animateStep || animationSvgStep;\n  that._easing = easingFunctions[options.easing] || easingFunctions.easeOutCubic;\n  that._currentParams = {};\n  that.tick = start;\n}\n\nAnimation.prototype = {\n  _calcProgress: function (now) {\n    return Math.min(1, (now - this.delay - this._startTime) / this.duration);\n  },\n  stop: function (disableComplete) {\n    var that = this;\n    var options = that.options;\n    var animateStep = that._animateStep;\n    that.stop = that.tick = noop;\n    animateStep.complete && animateStep.complete(that.element, that._currentParams);\n    options.complete && !disableComplete && options.complete();\n  }\n};\n\nfunction AnimationController(element) {\n  var that = this;\n  that._animationCount = 0;\n  that._timerId = null;\n  that._animations = {};\n  that.element = element;\n}\n\nexports.AnimationController = AnimationController;\nAnimationController.prototype = {\n  _loop: function () {\n    var that = this;\n    var animations = that._animations;\n    var activeAnimation = 0;\n    var now = new Date().getTime();\n    var an;\n    var endAnimation = that._endAnimation;\n\n    for (an in animations) {\n      if (!animations[an].tick(now)) {\n        delete animations[an];\n      }\n\n      activeAnimation++;\n    }\n\n    if (0 === activeAnimation) {\n      that.stop();\n      that._endAnimationTimer = endAnimation && setTimeout(function () {\n        if (0 === that._animationCount) {\n          endAnimation();\n          that._endAnimation = null;\n        }\n      });\n      return;\n    }\n\n    that._timerId = animationFrame.requestAnimationFrame.call(null, function () {\n      that._loop();\n    }, that.element);\n  },\n  addAnimation: function (animation) {\n    var that = this;\n    that._animations[that._animationCount++] = animation;\n    clearTimeout(that._endAnimationTimer);\n\n    if (!that._timerId) {\n      clearTimeout(that._startDelay);\n      that._startDelay = setTimeout(function () {\n        that._timerId = 1;\n\n        that._loop();\n      }, 0);\n    }\n  },\n  animateElement: function (elem, params, options) {\n    if (elem && params && options) {\n      elem.animation && elem.animation.stop();\n      this.addAnimation(elem.animation = new Animation(elem, params, options));\n    }\n  },\n  onEndAnimation: function (endAnimation) {\n    this._animationCount ? this._endAnimation = endAnimation : endAnimation();\n  },\n  dispose: function () {\n    this.stop();\n    this.element = null;\n  },\n  stop: function () {\n    var that = this;\n    that._animations = {};\n    that._animationCount = 0;\n    animationFrame.cancelAnimationFrame(that._timerId);\n    clearTimeout(that._startDelay);\n    clearTimeout(that._endAnimationTimer);\n    that._timerId = null;\n  },\n  lock: function () {\n    var an;\n    var animations = this._animations;\n    var unstoppable;\n    var hasUnstoppableInAnimations;\n\n    for (an in animations) {\n      unstoppable = animations[an].options.unstoppable;\n      hasUnstoppableInAnimations = hasUnstoppableInAnimations || unstoppable;\n\n      if (!unstoppable) {\n        animations[an].stop(true);\n        delete animations[an];\n      }\n    }\n\n    !hasUnstoppableInAnimations && this.stop();\n  }\n};\nexports.animationSvgStep = animationSvgStep;","map":null,"metadata":{},"sourceType":"script"}