{"ast":null,"code":"/**\r\n * DevExtreme (core/devices.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../core/renderer\");\n\nvar windowUtils = require(\"./utils/window\");\n\nvar navigator = windowUtils.getNavigator();\nvar window = windowUtils.getWindow();\n\nvar extend = require(\"./utils/extend\").extend;\n\nvar isPlainObject = require(\"./utils/type\").isPlainObject;\n\nvar each = require(\"./utils/iterator\").each;\n\nvar Class = require(\"./class\");\n\nvar errors = require(\"./errors\");\n\nvar Callbacks = require(\"./utils/callbacks\");\n\nvar resizeCallbacks = require(\"./utils/resize_callbacks\");\n\nvar EventsMixin = require(\"./events_mixin\");\n\nvar SessionStorage = require(\"./utils/storage\").sessionStorage;\n\nvar viewPort = require(\"./utils/view_port\");\n\nvar Config = require(\"./config\");\n\nvar KNOWN_UA_TABLE = {\n  iPhone: \"iPhone\",\n  iPhone5: \"iPhone\",\n  iPhone6: \"iPhone\",\n  iPhone6plus: \"iPhone\",\n  iPad: \"iPad\",\n  iPadMini: \"iPad Mini\",\n  androidPhone: \"Android Mobile\",\n  androidTablet: \"Android\",\n  msSurface: \"Windows ARM Tablet PC\",\n  desktop: \"desktop\"\n};\nvar DEFAULT_DEVICE = {\n  deviceType: \"desktop\",\n  platform: \"generic\",\n  version: [],\n  phone: false,\n  tablet: false,\n  android: false,\n  ios: false,\n  generic: true,\n  grade: \"A\",\n  mac: false\n};\nvar uaParsers = {\n  generic: function (userAgent) {\n    var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/);\n    var isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent);\n    var isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent);\n    var isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());\n\n    if (!(isPhone || isTablet || isDesktop || isMac)) {\n      return;\n    }\n\n    return {\n      deviceType: isPhone ? \"phone\" : isTablet ? \"tablet\" : \"desktop\",\n      platform: \"generic\",\n      version: [],\n      grade: \"A\",\n      mac: isMac\n    };\n  },\n  ios: function (userAgent) {\n    if (!/ip(hone|od|ad)/i.test(userAgent)) {\n      return;\n    }\n\n    var isPhone = /ip(hone|od)/i.test(userAgent);\n    var matches = userAgent.match(/os (\\d+)_(\\d+)_?(\\d+)?/i);\n    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [];\n    var isIPhone4 = 480 === window.screen.height;\n    var grade = isIPhone4 ? \"B\" : \"A\";\n    return {\n      deviceType: isPhone ? \"phone\" : \"tablet\",\n      platform: \"ios\",\n      version: version,\n      grade: grade\n    };\n  },\n  android: function (userAgent) {\n    if (!/android|htc_|silk/i.test(userAgent)) {\n      return;\n    }\n\n    var isPhone = /mobile/i.test(userAgent);\n    var matches = userAgent.match(/android (\\d+)\\.?(\\d+)?\\.?(\\d+)?/i);\n    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [];\n    var worseThan4_4 = version.length > 1 && (version[0] < 4 || 4 === version[0] && version[1] < 4);\n    var grade = worseThan4_4 ? \"B\" : \"A\";\n    return {\n      deviceType: isPhone ? \"phone\" : \"tablet\",\n      platform: \"android\",\n      version: version,\n      grade: grade\n    };\n  }\n};\nvar Devices = Class.inherit({\n  ctor: function (options) {\n    this._window = options && options.window || window;\n    this._realDevice = this._getDevice();\n    this._currentDevice = void 0;\n    this._currentOrientation = void 0;\n    this.changed = Callbacks();\n\n    if (windowUtils.hasWindow()) {\n      this._recalculateOrientation();\n\n      resizeCallbacks.add(this._recalculateOrientation.bind(this));\n    }\n  },\n  current: function (deviceOrName) {\n    if (deviceOrName) {\n      this._currentDevice = this._getDevice(deviceOrName);\n      this._forced = true;\n      this.changed.fire();\n      return;\n    }\n\n    if (!this._currentDevice) {\n      deviceOrName = void 0;\n\n      try {\n        deviceOrName = this._getDeviceOrNameFromWindowScope();\n      } catch (e) {\n        deviceOrName = this._getDeviceNameFromSessionStorage();\n      } finally {\n        if (!deviceOrName) {\n          deviceOrName = this._getDeviceNameFromSessionStorage();\n        }\n\n        if (deviceOrName) {\n          this._forced = true;\n        }\n      }\n\n      this._currentDevice = this._getDevice(deviceOrName);\n    }\n\n    return this._currentDevice;\n  },\n  real: function () {\n    return extend({}, this._realDevice);\n  },\n  orientation: function () {\n    return this._currentOrientation;\n  },\n  isForced: function () {\n    return this._forced;\n  },\n  isRippleEmulator: function () {\n    return !!this._window.tinyHippos;\n  },\n  _getCssClasses: function (device) {\n    var result = [];\n    var realDevice = this._realDevice;\n    device = device || this.current();\n\n    if (device.deviceType) {\n      result.push(\"dx-device-\" + device.deviceType);\n\n      if (\"desktop\" !== device.deviceType) {\n        result.push(\"dx-device-mobile\");\n      }\n    }\n\n    result.push(\"dx-device-\" + realDevice.platform);\n\n    if (realDevice.version && realDevice.version.length) {\n      result.push(\"dx-device-\" + realDevice.platform + \"-\" + realDevice.version[0]);\n    }\n\n    if (devices.isSimulator()) {\n      result.push(\"dx-simulator\");\n    }\n\n    if (Config().rtlEnabled) {\n      result.push(\"dx-rtl\");\n    }\n\n    return result;\n  },\n  attachCssClasses: function (element, device) {\n    this._deviceClasses = this._getCssClasses(device).join(\" \");\n    $(element).addClass(this._deviceClasses);\n  },\n  detachCssClasses: function (element) {\n    $(element).removeClass(this._deviceClasses);\n  },\n  isSimulator: function () {\n    try {\n      return this._isSimulator || windowUtils.hasWindow() && this._window.top !== this._window.self && this._window.top[\"dx-force-device\"] || this.isRippleEmulator();\n    } catch (e) {\n      return false;\n    }\n  },\n  forceSimulator: function () {\n    this._isSimulator = true;\n  },\n  _getDevice: function (deviceName) {\n    if (\"genericPhone\" === deviceName) {\n      deviceName = {\n        deviceType: \"phone\",\n        platform: \"generic\",\n        generic: true\n      };\n    }\n\n    if (isPlainObject(deviceName)) {\n      return this._fromConfig(deviceName);\n    } else {\n      var ua;\n\n      if (deviceName) {\n        ua = KNOWN_UA_TABLE[deviceName];\n\n        if (!ua) {\n          throw errors.Error(\"E0005\");\n        }\n      } else {\n        ua = navigator.userAgent;\n      }\n\n      return this._fromUA(ua);\n    }\n  },\n  _getDeviceOrNameFromWindowScope: function () {\n    var result;\n\n    if (windowUtils.hasWindow() && (this._window.top[\"dx-force-device-object\"] || this._window.top[\"dx-force-device\"])) {\n      result = this._window.top[\"dx-force-device-object\"] || this._window.top[\"dx-force-device\"];\n    }\n\n    return result;\n  },\n  _getDeviceNameFromSessionStorage: function () {\n    var sessionStorage = SessionStorage();\n\n    if (!sessionStorage) {\n      return;\n    }\n\n    var deviceOrName = sessionStorage.getItem(\"dx-force-device\");\n\n    try {\n      return JSON.parse(deviceOrName);\n    } catch (ex) {\n      return deviceOrName;\n    }\n  },\n  _fromConfig: function (config) {\n    var result = extend({}, DEFAULT_DEVICE, this._currentDevice, config);\n    var shortcuts = {\n      phone: \"phone\" === result.deviceType,\n      tablet: \"tablet\" === result.deviceType,\n      android: \"android\" === result.platform,\n      ios: \"ios\" === result.platform,\n      generic: \"generic\" === result.platform\n    };\n    return extend(result, shortcuts);\n  },\n  _fromUA: function (ua) {\n    var config;\n    each(uaParsers, function (platform, parser) {\n      config = parser(ua);\n      return !config;\n    });\n\n    if (config) {\n      return this._fromConfig(config);\n    }\n\n    return DEFAULT_DEVICE;\n  },\n  _changeOrientation: function () {\n    var $window = $(this._window);\n    var orientation = $window.height() > $window.width() ? \"portrait\" : \"landscape\";\n\n    if (this._currentOrientation === orientation) {\n      return;\n    }\n\n    this._currentOrientation = orientation;\n    this.fireEvent(\"orientationChanged\", [{\n      orientation: orientation\n    }]);\n  },\n  _recalculateOrientation: function () {\n    var windowWidth = $(this._window).width();\n\n    if (this._currentWidth === windowWidth) {\n      return;\n    }\n\n    this._currentWidth = windowWidth;\n\n    this._changeOrientation();\n  }\n}).include(EventsMixin);\nvar devices = new Devices();\nviewPort.changeCallback.add(function (viewPort, prevViewport) {\n  devices.detachCssClasses(prevViewport);\n  devices.attachCssClasses(viewPort);\n});\nmodule.exports = devices;\nmodule.exports.default = module.exports;","map":null,"metadata":{},"sourceType":"script"}