{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/comparator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _dom_adapter = require(\"../dom_adapter\");\n\nvar _dom_adapter2 = _interopRequireDefault(_dom_adapter);\n\nvar _data = require(\"./data\");\n\nvar _type = require(\"./type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar hasNegation = function (oldValue, newValue) {\n  return 1 / oldValue === 1 / newValue;\n};\n\nvar equals = function (oldValue, newValue) {\n  oldValue = (0, _data.toComparable)(oldValue, true);\n  newValue = (0, _data.toComparable)(newValue, true);\n\n  if (oldValue && newValue && _type2.default.isRenderer(oldValue) && _type2.default.isRenderer(newValue)) {\n    return newValue.is(oldValue);\n  }\n\n  var oldValueIsNaN = oldValue !== oldValue;\n  var newValueIsNaN = newValue !== newValue;\n\n  if (oldValueIsNaN && newValueIsNaN) {\n    return true;\n  }\n\n  if (0 === oldValue && 0 === newValue) {\n    return hasNegation(oldValue, newValue);\n  }\n\n  if (null === oldValue || \"object\" !== _typeof(oldValue) || _dom_adapter2.default.isElementNode(oldValue)) {\n    return oldValue === newValue;\n  }\n\n  return false;\n};\n\nexports.equals = equals;","map":null,"metadata":{},"sourceType":"script"}