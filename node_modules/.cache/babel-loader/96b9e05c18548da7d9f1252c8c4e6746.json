{"ast":null,"code":"/**\r\n * DevExtreme (viz/series/stacked_series.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _noop = require(\"../../core/utils/common\").noop;\n\nvar _extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar areaSeries = require(\"./area_series\").chart;\n\nvar chartAreaSeries = areaSeries.area;\n\nvar barSeries = require(\"./bar_series\");\n\nvar chartBarSeries = barSeries.chart.bar;\n\nvar lineSeries = require(\"./line_series\").chart;\n\nvar vizUtils = require(\"../core/utils\");\n\nvar objectUtils = require(\"../../core/utils/object\");\n\nvar baseStackedSeries = {\n  _calculateErrorBars: _noop,\n  _updateOptions: function (options) {\n    this._stackName = \"axis_\" + (options.axis || \"default\");\n  }\n};\nexports.chart = {};\nexports.polar = {};\nexports.chart.stackedline = _extend({}, lineSeries.line, baseStackedSeries, {});\nexports.chart.stackedspline = _extend({}, lineSeries.spline, baseStackedSeries, {});\nexports.chart.fullstackedline = _extend({}, lineSeries.line, baseStackedSeries, {\n  getValueRangeInitialValue: areaSeries.area.getValueRangeInitialValue\n});\nexports.chart.fullstackedspline = _extend({}, lineSeries.spline, baseStackedSeries, {\n  getValueRangeInitialValue: areaSeries.area.getValueRangeInitialValue\n});\n\nvar stackedBar = exports.chart.stackedbar = _extend({}, chartBarSeries, baseStackedSeries, {\n  _updateOptions: function (options) {\n    baseStackedSeries._updateOptions.call(this, options);\n\n    this._stackName = this._stackName + \"_stack_\" + (options.stack || \"default\");\n  }\n});\n\nexports.chart.fullstackedbar = _extend({}, chartBarSeries, baseStackedSeries, {\n  _updateOptions: stackedBar._updateOptions\n});\n\nfunction clonePoint(point, value, minValue, position) {\n  point = objectUtils.clone(point);\n  point.value = value;\n  point.minValue = minValue;\n  point.translate();\n  point.argument = point.argument + position;\n  return point;\n}\n\nfunction preparePointsForStackedAreaSegment(points) {\n  var i = 0;\n  var p;\n  var result = [];\n  var array;\n  var len = points.length;\n\n  while (i < len) {\n    p = points[i];\n    array = [p];\n\n    if (p.leftHole) {\n      array = [clonePoint(p, p.leftHole, p.minLeftHole, \"left\"), p];\n    }\n\n    if (p.rightHole) {\n      array.push(clonePoint(p, p.rightHole, p.minRightHole, \"right\"));\n    }\n\n    result.push(array);\n    i++;\n  }\n\n  return [].concat.apply([], result);\n}\n\nexports.chart.stackedarea = _extend({}, chartAreaSeries, baseStackedSeries, {\n  _prepareSegment: function (points, rotated) {\n    return chartAreaSeries._prepareSegment.call(this, preparePointsForStackedAreaSegment(points), rotated);\n  },\n  _appendInGroup: function () {\n    this._group.append(this._extGroups.seriesGroup).toBackground();\n  }\n});\n\nfunction getPointsByArgFromPrevSeries(prevSeries, argument) {\n  var result;\n\n  while (!result && prevSeries) {\n    result = prevSeries._segmentByArg && prevSeries._segmentByArg[argument];\n    prevSeries = prevSeries._prevSeries;\n  }\n\n  return result;\n}\n\nexports.chart.stackedsplinearea = _extend({}, areaSeries.splinearea, baseStackedSeries, {\n  _prepareSegment: function (points, rotated) {\n    var that = this;\n    var areaSegment;\n    points = preparePointsForStackedAreaSegment(points);\n\n    if (!this._prevSeries || 1 === points.length) {\n      areaSegment = areaSeries.splinearea._prepareSegment.call(this, points, rotated);\n    } else {\n      var forwardPoints = lineSeries.spline._calculateBezierPoints(points, rotated);\n\n      var backwardPoints = vizUtils.map(points, function (p) {\n        var point = p.getCoords(true);\n        point.argument = p.argument;\n        return point;\n      });\n      var prevSeriesForwardPoints = [];\n      var pointByArg = {};\n      var i = 0;\n      var len = that._prevSeries._segments.length;\n\n      while (i < len) {\n        prevSeriesForwardPoints = prevSeriesForwardPoints.concat(that._prevSeries._segments[i].line);\n        i++;\n      }\n\n      each(prevSeriesForwardPoints, function (_, p) {\n        if (null !== p.argument) {\n          var argument = p.argument.valueOf();\n\n          if (!pointByArg[argument]) {\n            pointByArg[argument] = [p];\n          } else {\n            pointByArg[argument].push(p);\n          }\n        }\n      });\n      that._prevSeries._segmentByArg = pointByArg;\n      backwardPoints = lineSeries.spline._calculateBezierPoints(backwardPoints, rotated);\n      each(backwardPoints, function (i, p) {\n        var argument = p.argument.valueOf();\n        var prevSeriesPoints;\n\n        if (i % 3 === 0) {\n          prevSeriesPoints = pointByArg[argument] || getPointsByArgFromPrevSeries(that._prevSeries, argument);\n\n          if (prevSeriesPoints) {\n            backwardPoints[i - 1] && prevSeriesPoints[0] && (backwardPoints[i - 1] = prevSeriesPoints[0]);\n            backwardPoints[i + 1] && (backwardPoints[i + 1] = prevSeriesPoints[2] || p);\n          }\n        }\n      });\n      areaSegment = {\n        line: forwardPoints,\n        area: forwardPoints.concat(backwardPoints.reverse())\n      };\n\n      that._areaPointsToSplineAreaPoints(areaSegment.area);\n    }\n\n    return areaSegment;\n  },\n  _appendInGroup: exports.chart.stackedarea._appendInGroup\n});\nexports.chart.fullstackedarea = _extend({}, chartAreaSeries, baseStackedSeries, {\n  _prepareSegment: exports.chart.stackedarea._prepareSegment,\n  _appendInGroup: exports.chart.stackedarea._appendInGroup\n});\nexports.chart.fullstackedsplinearea = _extend({}, areaSeries.splinearea, baseStackedSeries, {\n  _prepareSegment: exports.chart.stackedsplinearea._prepareSegment,\n  _appendInGroup: exports.chart.stackedarea._appendInGroup\n});\nexports.polar.stackedbar = _extend({}, barSeries.polar.bar, baseStackedSeries, {});","map":null,"metadata":{},"sourceType":"script"}