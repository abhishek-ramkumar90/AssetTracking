import React from 'react';
import PropTypes from 'prop-types';
import { CountdownTimeDelta, CountdownTimeDeltaFormatted, CountdownTimeDeltaFormatOptions } from './utils';
export interface CountdownProps extends React.Props<Countdown>, CountdownTimeDeltaFormatOptions {
    readonly date: Date | number | string;
    readonly controlled?: boolean;
    readonly intervalDelay?: number;
    readonly precision?: number;
    readonly autoStart?: boolean;
    readonly children?: React.ReactElement<any>;
    readonly renderer?: (props: CountdownRenderProps) => React.ReactNode;
    readonly now?: () => number;
    readonly onMount?: CountdownTimeDeltaFn;
    readonly onStart?: CountdownTimeDeltaFn;
    readonly onPause?: CountdownTimeDeltaFn;
    readonly onTick?: CountdownTimeDeltaFn;
    readonly onComplete?: CountdownTimeDeltaFn;
}
export interface CountdownRenderProps extends CountdownTimeDelta {
    readonly api: CountdownApi;
    readonly props: CountdownProps;
    readonly formatted: CountdownTimeDeltaFormatted;
}
export declare type CountdownTimeDeltaFn = (delta: CountdownTimeDelta) => void;
interface CountdownState {
    readonly timeDelta: CountdownTimeDelta;
    readonly offsetStart: number;
    readonly offsetTime: number;
}
export interface CountdownApi {
    readonly start: () => void;
    readonly pause: () => void;
    readonly isPaused: () => boolean;
    readonly isCompleted: () => boolean;
}
export default class Countdown extends React.Component<CountdownProps, CountdownState> {
    static defaultProps: Partial<CountdownProps>;
    static propTypes: {
        date: PropTypes.Validator<string | number | Date>;
        daysInHours: PropTypes.Requireable<boolean>;
        zeroPadTime: PropTypes.Requireable<number>;
        zeroPadDays: PropTypes.Requireable<number>;
        controlled: PropTypes.Requireable<boolean>;
        intervalDelay: PropTypes.Requireable<number>;
        precision: PropTypes.Requireable<number>;
        autoStart: PropTypes.Requireable<boolean>;
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        renderer: PropTypes.Requireable<(...args: any[]) => any>;
        now: PropTypes.Requireable<(...args: any[]) => any>;
        onMount: PropTypes.Requireable<(...args: any[]) => any>;
        onStart: PropTypes.Requireable<(...args: any[]) => any>;
        onPause: PropTypes.Requireable<(...args: any[]) => any>;
        onTick: PropTypes.Requireable<(...args: any[]) => any>;
        onComplete: PropTypes.Requireable<(...args: any[]) => any>;
    };
    mounted: boolean;
    interval: number | undefined;
    api: CountdownApi | undefined;
    constructor(props: CountdownProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: CountdownProps): void;
    componentWillUnmount(): void;
    tick: () => void;
    calcTimeDelta(): CountdownTimeDelta;
    calcOffsetStart(): number;
    start: () => void;
    pause: () => void;
    clearInterval(): void;
    isPaused: () => boolean;
    isCompleted: () => boolean;
    setTimeDeltaState(timeDelta: CountdownTimeDelta): void;
    getApi(): CountdownApi;
    getRenderProps(): CountdownRenderProps;
    render(): React.ReactNode;
}
export {};
